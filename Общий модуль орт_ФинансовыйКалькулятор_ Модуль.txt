//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
// Расчет эффективной ставки процента
//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
// МетодВычисленияЭСП = 1 - метод золотого сечения
//--------------------------------------------------------------------------------------------------------------
Функция РасчетЭСП(ДенежныйПоток, ПотокДат, НачальноеПредположениеЭСП=0.1, ТочностьВычислений=0.000001, МетодВычисленияЭСП=1) Экспорт
    Если ДенежныйПоток.Количество() <> ПотокДат.Количество() Тогда
		Сообщить("Размерности входных массивов НЕ совпадают!");
        Возврат 0;        
	КонецЕсли;
	
	Если ДенежныйПоток[0] >= 0 Тогда
		Сообщить("Первый платеж должен быть отрицательным!");
        Возврат 0;        
	КонецЕсли;
	
	Если НачальноеПредположениеЭСП < 0 Тогда
		НачальноеПредположениеЭСП = 0.1;	
		Сообщить("Начальное предположение меньше нуля!" + Символы.ПС + "Меняю на 0.1 и продолжаю расчет...");
	КонецЕсли;

    ВходныеПараметрыЭСП = Новый Структура(); 
    ВходныеПараметрыЭСП.Вставить("Предположение", НачальноеПредположениеЭСП);
    ВходныеПараметрыЭСП.Вставить("ДенежныйПоток", ДенежныйПоток);
    ВходныеПараметрыЭСП.Вставить("ПотокДат", ПотокДат);

    Если МетодВычисленияЭСП = 1 Тогда        // метод золотого сечения
        ВходныеПараметрыЭСП.Вставить("ИмяЦелевойФункции", "орт_ФинансовыйКалькулятор.РасчетЭСП_ЦелеваяФункция");
        Результат = орт_ЧисленныеМетоды.НайтиКореньМетодомЗолотогоСечения(ВходныеПараметрыЭСП, ТочностьВычислений);          
    ИначеЕсли МетодВычисленияЭСП = 2 Тогда   // метод касательных (Ньютона)
        ВходныеПараметрыЭСП.Вставить("ИмяЦелевойФункции", "орт_ФинансовыйКалькулятор.РасчетЭСП_ЦелеваяФункция");
        ВходныеПараметрыЭСП.Вставить("ИмяОтклоненияЦелевойФункции", "орт_ФинансовыйКалькулятор.РасчетЭСП_ОтклонениеЦелевойФункции");
        Результат = орт_ЧисленныеМетоды.НайтиКореньМетодомКасательных(ВходныеПараметрыЭСП, ТочностьВычислений);
    КонецЕсли;
    
    Возврат Результат;
КонецФункции
//--------------------------------------------------------------------------------------------------------------
// Целевая функция для расчета ЭСП (вызывается автоматически численным методом)
//--------------------------------------------------------------------------------------------------------------
Функция РасчетЭСП_ЦелеваяФункция(ПараметрыЦелевойФункции) Экспорт
	Основание = ПараметрыЦелевойФункции.Предположение + 1; 
    КоэффициентЗнака = 1;
    Если Основание < 0 Тогда
    	Основание = -Основание;
    	КоэффициентЗнака = -1;
    КонецЕсли; 
	Результат = ПараметрыЦелевойФункции.ДенежныйПоток[0];
	Для индекс = 1 По ПараметрыЦелевойФункции.ДенежныйПоток.ВГраница() Цикл 
		Степень = ((ПараметрыЦелевойФункции.ПотокДат[индекс] - ПараметрыЦелевойФункции.ПотокДат[0]) / 86400) / 365;
		Результат = Результат + ПараметрыЦелевойФункции.ДенежныйПоток[индекс] / (КоэффициентЗнака*Pow(Основание, Степень));
    КонецЦикла;

	Возврат Результат;	
КонецФункции
//--------------------------------------------------------------------------------------------------------------
Функция РасчетЭСП_ОтклонениеЦелевойФункции(ПараметрыЦелевойФункции) Экспорт
    Основание = ПараметрыЦелевойФункции.Предположение + 1;	
    КоэффициентЗнака = 1;
    Если Основание < 0 Тогда
    	Основание = -Основание;
    	КоэффициентЗнака = -1;
    КонецЕсли;  
	
	Результат = 0;
    Для индекс = 1 По ПараметрыЦелевойФункции.ДенежныйПоток.ВГраница() Цикл
        Степень = ((ПараметрыЦелевойФункции.ПотокДат[индекс] - ПараметрыЦелевойФункции.ПотокДат[0]) / 86400) / 365;
		Результат = Результат - Степень * ПараметрыЦелевойФункции.ДенежныйПоток[индекс] / (КоэффициентЗнака*Pow(Основание, Степень + 1));
	КонецЦикла;
	
    Возврат Результат;    
КонецФункции    
//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
