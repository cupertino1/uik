{3,
{42,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаЗагрузитьФайл",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаВыгрузитьФайл",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыгрузитьФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{11,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Узел",1,0,
{1,0},
{1,0},
{2,
{1},
{0,6a8c8cc9-516b-4653-92a0-cacdd1fcea74}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{12,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УзелКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УзелРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"Перем КешОбъектов;
Перем КешПоиска;
Перем КешДР;

#Region Выбор_Файла_Клиент

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.Показать(Новый ОписаниеОповещения(""ПриВыбореФайла"", ЭтаФорма, ""Открыть""));
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайла(Результат, ДопПараметры) Экспорт
	Если НЕ результат = Неопределено Тогда
		Если ДопПараметры = ""Открыть"" Тогда 
			ДД = Новый ДвоичныеДанные(Результат[0]);
			ЗагрузитьНаСервере(ДД);
		ИначеЕсли ДопПараметры = ""Записать"" Тогда
			Тхт = Новый ТекстовыйДокумент;
			Тхт.УстановитьТекст(ВыгрузитьФайлНаСервере());
			тхт.Записать(Результат[0], КодировкаТекста.UTF8);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#EndRegion

#Region Загрузка_Файла

Процедура ВывестиВЛог(СтрокаЛога)
	Сообщить(СтрокаЛога);
КонецПроцедуры

&НаСервереБезКонтекста
Функция Дамп(Объект)
	
	Попытка
		тхт = """";
		Для Каждого Ст ИЗ Объект.Свойства() Цикл
			тхт = тхт + Ст.Имя + "" = "" + Объект[ст.Имя] + ""
			|"";
		КонецЦикла;
		Возврат тхт
	Исключение
		Возврат Объект
	КонецПопытки;
КонецФункции

Функция ПолучитьКонтейнерИзСтроки(Стр)

	ЛевСкобка  = СтрНайти(стр, ""<"");
	ПравСкобка = СтрНайти(стр, "">"");
	Стр = Сред(Стр, ЛевСкобка + 1, ПравСкобка - ЛевСкобка - 1);
	

	Если ЛевСкобка > 0 И ПравСкобка > 0 Тогда 
		Если СтрНайти(Стр, "" "") > 0 Тогда 
			Стр = Лев(стр, СтрНайти(Стр, "" "")-1);
		КонецЕсли;
		Возврат Стр
	КонецЕсли;

КонецФункции

Процедура ЗагрузитьНаСервере(ДД)

	ИмяФайла = ПолучитьИмяВременногоФайла(""xml"");
	ДД.Записать(ИмяФайла);

	Чтение = Новый ЧтениеXML;
	типXDTO1 = ФабрикаXDTO.Пакеты.Получить(""NFONAPFEXCHANGE"").КорневыеСвойства.Получить(""Сообщение"").Тип;
	
	Пакет = ФабрикаXDTO.Создать(типXDTO1);
	
	Попытка

		Попытка
			Чтение.ОткрытьФайл(ИмяФайла);
			ОбXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, типXDTO1);
			Чтение.Закрыть();
		Исключение
			Чтение.ОткрытьФайл(ИмяФайла);
			ОбXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, Неопределено);
			Чтение.Закрыть();

			Для Каждого Ст ИЗ ОбXDTO.Свойства() Цикл
	 
				Если ТипЗнч(ОбXDTO[Ст.Имя]) = тип(""ОбъектXDTO"") Тогда
					
					СубКонтейнер = """";
					Если Ст.Имя = ""Контрагенты"" Тогда
						Если НЕ ОбXDTO[Ст.Имя].Свойства().Получить(""ЮрЛицо"") = Неопределено Тогда
							// есть тег юрлицо
							СубКонтейнер = ""ЮрЛицо"";
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ЮрЛицо"")
						ИначеЕсли НЕ ОбXDTO[Ст.Имя].Свойства().Получить(""ФизЛицо"") = Неопределено Тогда
							// есть тег физлицо
							СубКонтейнер = ""ФизЛицо"";
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ФизЛицо"")
						ИначеЕсли ОбXDTO[Ст.Имя].Свойства().Получить(""LastName"") = Неопределено Тогда
							// это контрагент
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ЮрЛицо"")
						Иначе
							// это физлицо
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ФизЛицо"")
						КонецЕсли;
					Иначе
						типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", Ст.Имя)
					КонецЕсли;

					Если ПустаяСтрока(СубКонтейнер) Тогда
						Ст1 = ОбXDTO[Ст.Имя];
					Иначе
						Ст1 = ОбXDTO[Ст.Имя][СубКонтейнер];
					КонецЕсли;

                    // Виктор (
                    // Исключаем незнакомые НАПФу секции
                    Если типXDTO2 = Неопределено Тогда
                        Продолжить;                                
                    КонецЕсли;    
                    // Виктор )

                            
					Конт = ФабрикаXDTO.Создать(типXDTO2);
					//Если НЕ ПустаяСтрока(СубКонтейнер) Тогда
					//	Ст1 = ОбXDTO[Ст.Имя];
					//КонецЕсли;

					Для Каждого Ст2 ИЗ Ст1.Свойства() Цикл 
						Попытка
							Если ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Строка"") ИЛИ ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Дата"") ИЛИ ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Число"") Тогда 
								Конт[Ст2.Имя] = Ст1[Ст2.Имя]
							Иначе
								Конт[Ст2.Имя] = """"
							КонецЕсли
						Исключение
							ВывестиВЛог(""Элемент "" + Ст2.Имя + "" контейнера "" + Ст.Имя + "" отсутствует в формате НАПФ!
								|"" + дамп(Ст1));
						КонецПопытки;
					КонецЦикла;
					Пакет[Ст.Имя].Добавить(Конт)
		
				Иначе

					СубКонтейнер = """";
					Если Ст.Имя = ""Контрагенты"" Тогда
						Если НЕ ОбXDTO[Ст.Имя][0].Свойства().Получить(""ЮрЛицо"") = Неопределено Тогда
							// есть тег юрлицо
							СубКонтейнер = ""ЮрЛицо"";
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ЮрЛицо"")
						ИначеЕсли НЕ ОбXDTO[Ст.Имя][0].Свойства().Получить(""ФизЛицо"") = Неопределено Тогда
							// есть тег физлицо
							СубКонтейнер = ""ФизЛицо"";
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ФизЛицо"")
						ИначеЕсли ОбXDTO[Ст.Имя][0].Свойства().Получить(""LastName"") = Неопределено Тогда
							// это контрагент
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ЮрЛицо"")
						Иначе
							// это физлицо
							типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ФизЛицо"")
						КонецЕсли;
					Иначе
						типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", Ст.Имя)
					КонецЕсли;
					
					Для Каждого Ст1 ИЗ ОбXDTO[Ст.Имя] Цикл
						
                        Если ПустаяСтрока(СубКонтейнер) Тогда 
                            // Виктор (
                            // Исключаем незнакомые НАПФу секции
                            Если типXDTO2 = Неопределено Тогда
                                Продолжить;                                
                            КонецЕсли;    
                            // Виктор )

							Конт = ФабрикаXDTO.Создать(типXDTO2);
                            
                            Для Каждого Ст2 ИЗ Ст1.Свойства() Цикл
                                // Виктор (
                                // Исключаем незнакомые свойства
                                Если Конт.Свойства().Получить(Ст2.Имя) = Неопределено Тогда
                                    Продолжить;
                                КонецЕсли;
                                // Виктор )
								Попытка
									Если ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Строка"") ИЛИ ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Дата"") ИЛИ ТипЗнч(Ст1[Ст2.Имя]) = Тип(""Число"") Тогда 
										Конт[Ст2.Имя] = Ст1[Ст2.Имя]
									Иначе
										Конт[Ст2.Имя] = """"
									КонецЕсли
								Исключение
									ВывестиВЛог(""Элемент "" + Ст2.Имя + "" контейнера "" + Ст.Имя + "" отсутствует в формате НАПФ!
										|"" + Дамп(Ст1));
								КонецПопытки;
							КонецЦикла;
						Иначе
							СубКонтейнер = Ст1.Свойства()[0].Имя;
							Если СубКонтейнер = ""ЮрЛицо"" Тогда
								типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ЮрЛицо"")
							Иначе
								типXDTO2 = ФабрикаXDTO.Тип(""NFONAPFEXCHANGE"", ""ФизЛицо"")
							КонецЕсли;

							Конт = ФабрикаXDTO.Создать(типXDTO2);

							Для Каждого Ст2 ИЗ Ст1[СубКонтейнер].Свойства() Цикл 
								Попытка
									Если ТипЗнч(Ст1[СубКонтейнер][Ст2.Имя]) = Тип(""Строка"") ИЛИ ТипЗнч(Ст1[СубКонтейнер][Ст2.Имя]) = Тип(""Дата"") ИЛИ ТипЗнч(Ст1[СубКонтейнер][Ст2.Имя]) = Тип(""Число"") Тогда 
										Конт[Ст2.Имя] = Ст1[СубКонтейнер][Ст2.Имя]
									Иначе
										Конт[Ст2.Имя] = """"
									КонецЕсли
								Исключение
									ВывестиВЛог(""Элемент "" + Ст2.Имя + "" контейнера "" + Ст.Имя + "" отсутствует в формате НАПФ!
										|"" + Дамп(Ст1[СубКонтейнер]));
								КонецПопытки;
							КонецЦикла;
						КонецЕсли;						
						Пакет[Ст.Имя].Добавить(Конт)
					КонецЦикла;
		
				КонецЕсли;

			КонецЦикла;

			ОбXDTO = пакет;
		КонецПопытки;

		// получим правила для узла в соответствии с порядком
		Запрос = Новый Запрос(
			""ВЫБРАТЬ
			|	орт_ПравилаНАПФ.КонтейнерXDTO
			|ИЗ
			|	Справочник.орт_ПравилаНАПФ КАК орт_ПравилаНАПФ
			|ГДЕ
			|	орт_ПравилаНАПФ.Узел = &Узел
			|
			|УПОРЯДОЧИТЬ ПО
			|	орт_ПравилаНАПФ.Порядок"");

		Запрос.УстановитьПараметр(""Узел"", Объект.Узел);

		КонтрагентыБыли = Ложь;

		Для Каждого Ст ИЗ Запрос.Выполнить().Выгрузить() Цикл

			Если Ст.КонтейнерXDTO = ""ФизЛицо"" или Ст.КонтейнерXDTO = ""ЮрЛицо"" Тогда
				Если КонтрагентыБыли Тогда 
					Продолжить;
				КонецЕсли;

				СписокXDTO = ОбXDTO.ПолучитьСписок(""Контрагенты"");
				КонтрагентыБыли = Истина;
			Иначе
				СписокXDTO = ОбXDTO.ПолучитьСписок(Ст.КонтейнерXDTO);
			КонецЕсли;

			КешОбъектов = Новый Соответствие;
			КешПоиска = Новый Соответствие;
			КешДР = Новый Соответствие;

			ЗагрузтьСписокXDTO(СписокXDTO, Объект.Узел);
			
			Если КешОбъектов.Количество() > 0 Тогда
				Для Каждого ОбКеша ИЗ КешОбъектов Цикл
					Если ОбКеша.Значение.Изменение Тогда 
						Если СтрНачинаетсяС(Метаданные.НайтиПоТипу(ТипЗнч(ОбКеша.Значение.Объект)).ПолноеИмя(), ""Документ."") Тогда
							ОбКеша.Значение.Объект.Записать(РежимЗаписиДокумента.Запись);
						Иначе
							ОбКеша.Значение.Объект.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

	Исключение

		ВывестиВЛог(""Ошибка загрузки!
					|"" + ОписаниеОшибки());
	КонецПопытки;

	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Функция ПолучитьПравилоЗагрузки(СписокXDTO, тип = Неопределено)

	МассивПараметров = Новый Массив;

	Если тип = Неопределено Тогда 
		СоотвСвойстваТип = Новый Соответствие;
		Для Каждого Ст ИЗ СписокXDTO Цикл		
			СоотвСвойстваТип[Ст.Тип()] = 1;
		КонецЦикла;

		Для Каждого Ст ИЗ СоотвСвойстваТип Цикл
			МассивПараметров.Добавить(
				СтрЗаменить(Ст.Ключ,""{"" + СписокXDTO.ВладеющееСвойство.URIПространстваИмен + ""}"", """")
				);
		КонецЦикла;
		
		ИмяКонтейнераXDTO = СписокXDTO.ВладеющееСвойство.Имя;
	Иначе
		МассивПараметров.Добавить(Тип);
	КонецЕсли;

	Запрос = Новый Запрос(
		""ВЫБРАТЬ
		|	ПравилаНАПФ.Ссылка
		|ИЗ
		|	Справочник.орт_ПравилаНАПФ КАК ПравилаНАПФ
		|ГДЕ
		|	ПравилаНАПФ.Активность
		|	И ПравилаНАПФ.КонтейнерXDTO В(&КонтейнерXDTO)
		|	И НЕ ПравилаНАПФ.ПометкаУдаления
		|	И ПравилаНАПФ.Узел = &Узел""
		);
	
	Запрос.УстановитьПараметр(""КонтейнерXDTO"", МассивПараметров);
	Запрос.УстановитьПараметр(""Узел"", Объект.Узел);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Новый Массив
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку(""Ссылка"");

КонецФункции

Процедура ЗагрузитьПроводки(СписокXDTO, ПравилоЗагрузки)
	// найдем документ по дате и правилу
	
	Если СписокXDTO.Количество() = 0 Тогда 
		Возврат
	КонецЕсли;
	
	// получим настройки счетов
	СоответствиеСчетов = Новый Соответствие;
	Для Каждого Ст ИЗ ПравилоЗагрузки.Счета Цикл
		Если НЕ ПустаяСтрока(Ст.Реквизиты) Тогда 
			СоответствиеСчетов[Ст.Счет] = ЗначениеИзСтрокиВнутр(Ст.Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	""ВЫБРАТЬ
	|	нфо_ЗагрузкаПроводокЕПС.Ссылка,
	|	НАЧАЛОПЕРИОДА(нфо_ЗагрузкаПроводокЕПС.Дата, ДЕНЬ) КАК Дата,
	|	нфо_ЗагрузкаПроводокЕПС.ДоговорДУ
	|ИЗ
	|	Документ.нфо_ЗагрузкаПроводокЕПС КАК нфо_ЗагрузкаПроводокЕПС
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(нфо_ЗагрузкаПроводокЕПС.Дата, ДЕНЬ) В (&Дата)
	|	И нфо_ЗагрузкаПроводокЕПС.ПравилоСсылка = &ПравилоСсылка
	|	И нфо_ЗагрузкаПроводокЕПС.ДоговорДУ = &ДоговорДУ"");
	
	Запрос.УстановитьПараметр(""ПравилоСсылка"", ПравилоЗагрузки);

	ДоговорыДУ = Новый Соответствие;
	
	ПравилоДоговоровДУ = ПолучитьПравилоЗагрузки(СписокXDTO, ""ДоговорыДУ"");
	Если ПравилоДоговоровДУ.Количество() > 0 Тогда
		ДоговрыДУИсточник = ПравилоДоговоровДУ[0].Источник;
	Иначе
		ДоговрыДУИсточник = ""Справочник.ДоговорыКонтрагентов"";
	КонецЕсли;

	Для Каждого Ст ИЗ СписокXDTO Цикл
		// будем сразу разбирать по пакетам
		// получим соответствие счетов из правила
		// предварительно проверяем на наличие точки в счете и меняем 306.02 и 205.01 на 479.01
		Если СтрНайти(Ст.AccDebit, ""."") = 0 Тогда
			Ст.AccDebit = Лев(Ст.AccDebit, 3) + ""."" + Прав(Ст.AccDebit, 2);
		КонецЕсли;

		Если СтрНайти(Ст.AccCredit, ""."") = 0 Тогда
			Ст.AccCredit = Лев(Ст.AccCredit, 3) + ""."" + Прав(Ст.AccCredit, 2);
		КонецЕсли;

		// замена счетов ДУ
		Если Ст.AccDebit = ""306.02"" ИЛИ Ст.AccDebit = ""205.01"" Тогда
			ВывестиВЛог(""Счет Дт "" + Ст.AccDebit + "" заменен на 479.01"");
			Ст.AccDebit = ""479.01"";
		КонецЕсли;

		Если Ст.AccCredit = ""306.02"" ИЛИ Ст.AccCredit = ""205.01"" Тогда
			ВывестиВЛог(""Счет Кт "" + Ст.AccCredit + "" заменен на 479.01"");
			Ст.AccCredit = ""479.01""
		КонецЕсли;
		
		СчетДт = ПланыСчетов.НФО.НайтиПоКоду(Ст.AccDebit);
		СчетКт = ПланыСчетов.НФО.НайтиПоКоду(Ст.AccCredit);

        // Виктор+ (
        // Обработка ситуации, когда счет 479.03 корреспондирует с любым другим ненулевым счетом
        // В этой ситуации счет 479.03 заменяем на 000.00
        Если СчетДТ.Код <> ""000.00"" И СчетКТ.Код <> ""000.00"" Тогда
            КодСчетаИскомый = ""479.03"";
            КодСчетаНаЗамену = ""000.00"";
            Если СчетДТ.Код = КодСчетаИскомый Тогда
                ВывестиВЛог(""Счет Дт "" + СчетДТ.Код + "" заменен на "" + КодСчетаНаЗамену);
                Ст.AccDebit = КодСчетаНаЗамену;
                СчетДТ = ПланыСчетов.НФО.НайтиПоКоду(Ст.AccDebit);                
            ИначеЕсли СчетКТ.Код = КодСчетаИскомый Тогда
                ВывестиВЛог(""Счет Кт "" + СчетКТ.Код + "" заменен на "" + КодСчетаНаЗамену);
                Ст.AccCredit = КодСчетаНаЗамену;
                СчетКТ = ПланыСчетов.НФО.НайтиПоКоду(Ст.AccCredit);
            КонецЕсли;
        КонецЕсли; // Виктор )
        
		Если СоответствиеСчетов[СчетДт] = Неопределено ИЛИ СоответствиеСчетов[СчетКт] = Неопределено Тогда 
			// нет соответствия для загружаемого счета!
			ВывестиВЛог(""Нет соответствия для загружаемого счета!
				|"" + дамп(Ст));
			Продолжить;
		КонецЕсли;
		
		// получим документ с этим договором ДУ и за эту дату
		// 1. Определим договор ДУ
		ДоговорДУ = Неопределено;

		Для Каждого Ст1 ИЗ СоответствиеСчетов[СчетДт].НайтиСтроки(Новый Структура(""ЭтоДоговорДУ"", Истина)) Цикл 
			Если СтрНачинаетсяС(Ст1.Значение, ""Аналитический признак"") Тогда
				ДоговорДУ = НайтиРанееЗагруженныеПоИД(
					Новый Структура(""Источник, Узал, ЗначениеИдентификатора"",
									ДоговрыДУИсточник,
									Объект.Узел,
									Ст[""SubcDebit""+Прав(Ст1.Значение, 1)]));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДоговорДУ = Неопределено Тогда 
			Для Каждого Ст1 ИЗ СоответствиеСчетов[СчетКт].НайтиСтроки(Новый Структура(""ЭтоДоговорДУ"", Истина)) Цикл 
				Если СтрНачинаетсяС(Ст1.Значение, ""Аналитический признак"") Тогда
					ДоговорДУ = НайтиРанееЗагруженныеПоИД(
						Новый Структура(""Источник, Узал, ЗначениеИдентификатора"",
										""Справочник.ДоговорыКонтрагентов"",
										Объект.Узел,
										Ст[""SubcCredit""+Прав(Ст1.Значение, 1)]));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДоговорДУ = Неопределено Тогда 
			ДоговорДУ = объект.Узел.ДоговорДУ;
		КонецЕсли;
		
		Если ДоговорыДУ[ДоговорДУ] = Неопределено Тогда
			ДоговорыДУ[ДоговорДУ] = Новый Соответствие;
		КонецЕсли;

		Если ДоговорыДУ[ДоговорДУ][НачалоДня(Ст.DocumDate)] = Неопределено Тогда
			// ищем документ за эту дату с этим договором ДУ
			Запрос.УстановитьПараметр(""Дата"", НачалоДня(Ст.DocumDate));
			Запрос.УстановитьПараметр(""ДоговорДУ"", ДоговорДУ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				ДоговорыДУ[ДоговорДУ][НачалоДня(Ст.DocumDate)] = Новый Структура(""Документ"",
					Выборка.Ссылка.ПолучитьОбъект());
			Иначе
				ДокОбъект = Документы.нфо_ЗагрузкаПроводокЕПС.СоздатьДокумент();
				ДокОбъект.Дата = НачалоДня(Ст.DocumDate);
				ДокОбъект.ДоговорДУ = ДоговорДУ;
				ДокОбъект.ПравилоСсылка = ПравилоЗагрузки;
				СтрокаВидДеятельности = ПравилоЗагрузки.ДуИВидыДеятельности.Найти(ДоговорДУ, ""ДоговорДУ"");
				Если НЕ СтрокаВидДеятельности = Неопределено Тогда 
					ДокОбъект.ВидДеятельности = СтрокаВидДеятельности.ВидДеятельности;
				КонецЕсли;
				
				ДоговорыДУ[ДоговорДУ][НачалоДня(Ст.DocumDate)] = Новый Структура(""Документ"", ДокОбъект);
				
			КонецЕсли;
			ДоговорыДУ[ДоговорДУ][НачалоДня(Ст.DocumDate)].Вставить(""Пакет"", 
				ФабрикаXDTO.Создать(
					ФабрикаXDTO.Пакеты.Получить(""NFONAPFEXCHANGE"").КорневыеСвойства.Получить(""Сообщение"").Тип)
				);
			
		КонецЕсли;
		
		Конт = ФабрикаXDTO.Создать(Ст.Тип());
		Для Каждого Ст1 ИЗ Ст.Свойства() Цикл 
			Если НЕ Ст[Ст1.Имя] = Неопределено Тогда
				Конт[Ст1.Имя] = Ст[Ст1.Имя]
			КонецЕсли;
		КонецЦикла;
		
		ДоговорыДУ[ДоговорДУ][НачалоДня(Ст.DocumDate)].Пакет.БухгалтПроводки.Добавить(Конт);

	КонецЦикла;

	// сериализуем текущее правило (по которому загружали)
	// если впоследствии объект будет изменен, то при ошибке десериализации для проведения будет взять объект по ссылке
	// пока так - может потом такое поведение будет убрано
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(Запись, ПравилоЗагрузки.ПолучитьОбъект());
	СериализованноеПравило = Запись.Закрыть();
	
	Для Каждого Ст ИЗ ДоговорыДУ Цикл

		Для Каждого Ст1 ИЗ Ст.Значение Цикл 

			ДокОбъект = Ст1.Значение.Документ;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);

			ВремФайл = ПолучитьИмяВременногоФайла(""xml"");
			Запись = Новый ЗаписьXML;
			Запись.ОткрытьФайл(ВремФайл, ""UTF-8"");

			ФабрикаXDTO.ЗаписатьXML(Запись, Ст1.Значение.Пакет, ""Сообщение"", ""NFONAPFEXCHANGE"");
			Текст = Запись.Закрыть();
			ДокОбъект.ФайлПакета = РаботаСФайлами.СоздатьФайлНаОсновеФайлаНаДиске(ДокОбъект.Ссылка, ВремФайл);
			ДокОбъект.ПравилоЗагрузки = СериализованноеПравило;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);

		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьФильтр(Фильтр, ОбъектXDTO)
	// пока по наличию в поле значения
	Возврат ?(НЕ ЗначениеЗаполнено(Фильтр.ЗначениеФильтра), ЗначениеЗаполнено(ОбъектXDTO[Фильтр.ЭлементXDTO]), ОбъектXDTO[Фильтр.ЭлементXDTO] = Фильтр.ЗначениеФильтра);

	// туду!
	// определить как фильтр работает
КонецФункции

Процедура ЗагрузтьСписокXDTO(СписокXDTO,ПланОбмена)

	Для Каждого ПравилоЗагрузки ИЗ ПолучитьПравилоЗагрузки(СписокXDTO) Цикл
		
		// если проводки, то нужно их отдельно обработать
		Если ПравилоЗагрузки.КонтейнерXDTO = ""БухгалтПроводки"" Тогда
			ЗагрузитьПроводки(СписокXDTO, ПравилоЗагрузки);
			Продолжить;
		КонецЕсли;

		МассивПолейПоиска = Новый Структура(""ПервичноеПоле, ВторичноеПоле"", Новый Массив, Новый Массив);
		ПараметрыЗагрузки = Новый Структура(""Источник, Идентификатор, ПоляПоиска, УзелИнформационнойБазы, ЗначениеИдентификатора, Фильтры"", ПравилоЗагрузки.Источник, Неопределено, МассивПолейПоиска, ПравилоЗагрузки.Узел, Неопределено, Новый Массив);

		Для Каждого Ст ИЗ ПравилоЗагрузки.Элементы Цикл

			Если СтрНайти(Ст.РеквизитИсточника, ""."") > 0 Тогда 
				Продолжить;
			КонецЕсли;

			Если Ст.Вид = ""Идентификатор"" Тогда 
				ПараметрыЗагрузки.Идентификатор =
					Новый Структура(""ЭлементXDTO, Реквизит"", 
						Ст.ЭлементСпискаXDTO, 
						Ст.РеквизитИсточника);
			КонецЕсли;
			
			Если Ст.Роль = ""ПолеПоиска"" Тогда
				МассивПолейПоиска.ПервичноеПоле.Добавить(
					Новый Структура(
						""ЭлементXDTO, Реквизит, Вид, ТипСсылки"", 
						Ст.ЭлементСпискаXDTO, 
						Ст.РеквизитИсточника,
						Ст.Вид,
						Ст.ТипСсылки)
				);
			ИначеЕсли Ст.Роль = ""ВторичноеПолеПоиска"" Тогда
				МассивПолейПоиска.ВторичноеПоле.Добавить(
					Новый Структура(
						""ЭлементXDTO, Реквизит"", 
						Ст.ЭлементСпискаXDTO, 
						Ст.РеквизитИсточника)
				);
			ИначеЕсли Ст.Роль = ""Фильтр"" Тогда
				ПараметрыЗагрузки.Фильтры.Добавить(
					Новый Структура(
						""ЭлементXDTO, ЗначениеФильтра"", 
						Ст.ЭлементСпискаXDTO,
						?(ПустаяСтрока(Ст.СоответствиеЭлементов), Неопределено, ЗначениеИзСтрокиВнутр(Ст.СоответствиеЭлементов)))
				);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ОбъектXDTO ИЗ СписокXDTO Цикл
			
			// проверим, какое правило работает для этого объекта
			Если НЕ СтрЗаканчиваетсяНа(ОбъектXDTO.Тип(), ПравилоЗагрузки.КонтейнерXDTO) Тогда 
				Продолжить;
			КонецЕсли;
			
			// фильтр
			Если ПараметрыЗагрузки.Фильтры.Количество() > 0 Тогда
				ЗначениеФильтра = Истина;
				Для Каждого Ст ИЗ ПараметрыЗагрузки.Фильтры Цикл
					ЗначениеФильтра = ЗначениеФильтра И ПроверитьФильтр(Ст, ОбъектXDTO);
					Если НЕ ЗначениеФильтра Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗначениеФильтра Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ОбъектИБ = Неопределено;

			Если СтрНачинаетсяС(ПравилоЗагрузки.Источник, ""РегистрСведений."") Тогда 
				СоздатьОбъектИБ(ОбъектXDTO, ПравилоЗагрузки);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыЗагрузки.Идентификатор) Тогда 
				ПараметрыЗагрузки.ЗначениеИдентификатора = ОбъектXDTO[ПараметрыЗагрузки.Идентификатор.ЭлементXDTO];
				ОбъектИБ = НайтиРанееЗагруженныеПоИД(ПараметрыЗагрузки);
			КонецЕсли;

			Если НЕ ОбъектИБ = Неопределено Тогда
				// найден по ИД
				Если ПравилоЗагрузки.Обновлять Тогда 
					ОбновитьОбъект(ОбъектXDTO, ПравилоЗагрузки, ОбъектИБ);
				КонецЕсли;
			Иначе
				ОбъектИБ = НайтиПоПолямПоиска(ОбъектXDTO, ПараметрыЗагрузки);
				Если НЕ ОбъектИБ = Неопределено Тогда
					// нашли по полям поиска
					// 1. Запишем соответствие
					Если ЗначениеЗаполнено(ПараметрыЗагрузки.Идентификатор) Тогда
						СохранитьСоответствиеОбъектов(ОбъектИБ, ПараметрыЗагрузки);
					КонецЕсли;
					// 2. Обновим объект
					Если ПравилоЗагрузки.Обновлять Тогда 
						ОбновитьОбъект(ОбъектXDTO, ПравилоЗагрузки, ОбъектИБ);
					КонецЕсли;
				ИначеЕсли НЕ ПравилоЗагрузки.ТолькоПоиск Тогда
					// не нашли - создадим
					// 1. Запишем объект
					ОбъектИБ = СоздатьОбъектИБ(ОбъектXDTO, ПравилоЗагрузки);
					// 2. Запишем соответствие
					Если ЗначениеЗаполнено(ПараметрыЗагрузки.Идентификатор) Тогда 
						СохранитьСоответствиеОбъектов(ОбъектИБ, ПараметрыЗагрузки);
					КонецЕсли;
				Иначе
					// элемент не был найден, но при этом стоит признак ""Только поиск"".
					ВывестиВЛог(""Элемент не найден!
							|"" + дамп(ОбъектXDTO));
				КонецЕсли;			
			КонецЕсли;

			Если ПравилоЗагрузки.КонтейнерXDTO = ""ДоговорыДУ"" Тогда
				// это договор ДУ - сохраним!
				НоваяСтрокаДоговорДУ = ЗагруженныеДоговорыДУ.Добавить();
				НоваяСтрокаДоговорДУ.ДоговорДУ = ОбъектИБ.Ссылка;
				НоваяСтрокаДоговорДУ.Идентификатор = ПараметрыЗагрузки.ЗначениеИдентификатора;
			КонецЕсли;

		КонецЦикла; // объект XDTO
		
	КонецЦикла; // правила загразки
КонецПроцедуры

Процедура СохранитьСоответствиеОбъектов(ОбъектИБ, ПараметрыЗагрузки)

	РегЗапись = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьМенеджерЗаписи();
	РегЗапись.Активность = Истина;
	РегЗапись.Период = ТекущаяДата();
	РегЗапись.ОбъектВыгруженПоСсылке = Истина;
	РегЗапись.ТипИсточника = ПараметрыЗагрузки.Источник;
	РегЗапись.ТипПриемника = ПараметрыЗагрузки.Источник;
	РегЗапись.УзелИнформационнойБазы = Объект.Узел;
	РегЗапись.УникальныйИдентификаторИсточника = ОбъектИБ;
	РегЗапись.УникальныйИдентификаторИсточникаСтрокой = ОбъектИБ.УникальныйИдентификатор();
	РегЗапись.УникальныйИдентификаторПриемника = ПараметрыЗагрузки.ЗначениеИдентификатора;
	РегЗапись.Записать();
	
КонецПроцедуры

Функция НайтиРанееЗагруженныеПоИД(ПараметрыЗагрузки)

	Если НЕ КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора] = Неопределено Тогда
		Если НЕ КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора][ПараметрыЗагрузки.Источник] = Неопределено Тогда 
			Если КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора][ПараметрыЗагрузки.Источник] = 0 Тогда 
				Возврат Неопределено
			Иначе
				Возврат КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора][ПараметрыЗагрузки.Источник]
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	""ВЫБРАТЬ
	|	Соответствия.УзелИнформационнойБазы,
	|	Соответствия.УникальныйИдентификаторИсточника,
	|	Соответствия.УникальныйИдентификаторПриемника,
	|	Соответствия.ТипПриемника,
	|	Соответствия.ТипИсточника,
	|	Соответствия.УникальныйИдентификаторИсточникаСтрокой,
	|	Соответствия.ОбъектВыгруженПоСсылке
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК Соответствия
	|ГДЕ
	|	Соответствия.ТипИсточника = &ТипИсточника
	|	И Соответствия.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И Соответствия.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника"");
		
	Запрос.УстановитьПараметр(""ТипИсточника"", ПараметрыЗагрузки.Источник);
	Запрос.УстановитьПараметр(""УзелИнформационнойБазы"", Объект.Узел);
	Запрос.УстановитьПараметр(""УникальныйИдентификаторПриемника"", ПараметрыЗагрузки.ЗначениеИдентификатора);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Соотв = Новый Соответствие;
		Соотв[ПараметрыЗагрузки.Источник] = 0;
		КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора] = Соотв;
		Возврат Неопределено
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Соотв = Новый Соответствие;
		Соотв[ПараметрыЗагрузки.Источник] = Выборка.УникальныйИдентификаторИсточника;
		КешПоиска[ПараметрыЗагрузки.ЗначениеИдентификатора] = Соотв;
		Возврат Выборка.УникальныйИдентификаторИсточника;
	КонецЕсли;
	
КонецФункции

Функция НайтиПоПолямПоиска(ОбъектXDTO, ПараметрыЗагрузки)
	Если ПараметрыЗагрузки.ПоляПоиска.ПервичноеПоле.Количество() = 0 Тогда 
		Возврат Неопределено
	КонецЕсли;

	Запрос = Новый Запрос(
	""ВЫБРАТЬ 
	|	Ссылка
	|ИЗ "" + ПараметрыЗагрузки.Источник + ""
	|ГДЕ
	|	"");
	
	МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(ПараметрыЗагрузки.Источник);
	
	Для Каждого Ст ИЗ ПараметрыЗагрузки.ПоляПоиска.ПервичноеПоле Цикл
        // Виктор (
        // Исключаем пустой реквизит
        Если ПустаяСтрока(Ст.Реквизит) Тогда
            Продолжить;
        КонецЕсли;
        // Виктор )
		Если Ст.Вид = ""Ссылка"" Тогда
			// ищем по ссылке
			// 1. Нужно найти ссылку в регистре соответствий объектов
			// 2. Нужно подстваить его в параметры
			СсылкаДляПоиска = НайтиРанееЗагруженныеПоИД(
					Новый Структура(""Источник, ЗначениеИдентификатора"", Ст.ТипСсылки, ОбъектXDTO[Ст.ЭлементXDTO])
					);
			Если СсылкаДляПоиска = Неопределено Тогда 
				//ВывестиВЛог(""Не найдена ссылка для поиска"");
				Возврат Неопределено
			Иначе
				Запрос.Текст = Запрос.Текст + Ст.Реквизит + "" = &"" + Ст.Реквизит + ""
				|	И "";
				Запрос.УстановитьПараметр(Ст.Реквизит, СсылкаДляПоиска);
			КонецЕсли;
		Иначе
			ЗнакСравнения = ""="";
			Попытка
				Если МетаданныеОбъект.Реквизиты.Найти(Ст.Реквизит).Тип.СодержитТип(Тип(""Строка"")) Тогда 
					Если МетаданныеОбъект.Реквизиты.Найти(Ст.Реквизит).Тип.КвалификаторыСтроки = 0 Тогда 
						ЗнакСравнения = ""ПОДОБНО"";
					КонецЕсли;
				КонецЕсли;
			Исключение
				Если МетаданныеОбъект.СтандартныеРеквизиты[Ст.Реквизит].Тип.СодержитТип(Тип(""Строка"")) Тогда 
					Если МетаданныеОбъект.СтандартныеРеквизиты[Ст.Реквизит].Тип.КвалификаторыСтроки = 0 Тогда 
						ЗнакСравнения = ""ПОДОБНО"";
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;

			Запрос.Текст = Запрос.Текст + Ст.Реквизит + "" "" + ЗнакСравнения + "" &"" + Ст.Реквизит + ""
			|	И "";
			Запрос.УстановитьПараметр(Ст.Реквизит, ОбъектXDTO[Ст.ЭлементXDTO]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВторичныхПолей = Новый Массив;
	
	Для Каждого Ст ИЗ ПараметрыЗагрузки.ПоляПоиска.ВторичноеПоле Цикл

		ЗнакСравнения = ""="";
		Если МетаданныеОбъект.Реквизиты.Найти(Ст.Реквизит).Тип.СодержитТип(Тип(""Строка"")) Тогда 
			Если МетаданныеОбъект.Реквизиты.Найти(Ст.Реквизит).Тип.КвалификаторыСтроки = 0 Тогда 
				ЗнакСравнения = ""ПОДОБНО"";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + Ст.Реквизит + "" "" + ЗнакСравнения + "" &"" + Ст.Реквизит + ""
		|	И "";
		Запрос.УстановитьПараметр(Ст.Реквизит, ОбъектXDTO[Ст.ЭлементXDTO]);
		ПараметрыВторичныхПолей.Добавить(Ст.Реквизит);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст + ""///"",""И ///"", """");
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда

		Для Каждого Ст ИЗ ПараметрыВторичныхПолей Цикл 
			Запрос.УстановитьПараметр(Ст, """");
		КонецЦикла;

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда		
			Возврат Неопределено
		Иначе
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 1 Тогда 
				ВывестиВЛог(""Найдено больше одного элеемента по основным полям поиска!
							|"" + дамп(ОбъектXDTO));
			КонецЕсли;
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 1 Тогда 
			ВывестиВЛог(""Найдено больше одного элеемента по всем полям поиска!
							|"" + дамп(ОбъектXDTO));
		КонецЕсли;
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьОбъектИБ(ОбъектXDTO, ПараметрыЗагрузки, Ссылка = Неопределено)

	Если Ссылка = Неопределено Тогда 
		Если СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Справочник."") Тогда
			// создадим элемент справочника
			ОбъектИБ = Справочники[СтрЗаменить(ПараметрыЗагрузки.Источник, ""Справочник."", """")].СоздатьЭлемент();
			ОбъектИБ.ОбменДанными.Загрузка = Истина;

			Если ЗначениеЗаполнено(ПараметрыЗагрузки.Группа) Тогда
				ОбъектИБ.Родитель = ПараметрыЗагрузки.Группа;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Документ."") Тогда
			// создадим документ
			ОбъектИБ = Документы[СтрЗаменить(ПараметрыЗагрузки.Источник, ""Документ."", """")].СоздатьДокумент();
			ОбъектИБ.ОбменДанными.Загрузка = Истина;
		ИначеЕсли СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""РегистрСведений."") Тогда
			ОбъектИБ = РегистрыСведений[СтрЗаменить(ПараметрыЗагрузки.Источник, ""РегистрСведений."", """")].СоздатьМенеджерЗаписи();
		КонецЕсли;
	Иначе // нельзя обновить регистр сведений
		ОбъектИБ = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если КешДР[ПараметрыЗагрузки.Источник] = Неопределено Тогда 
		ДопРеквизиты = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ПараметрыЗагрузки.Источник, ""ДополнительныеРеквизиты"");
		КешДР[ПараметрыЗагрузки.Источник] = ДопРеквизиты;
	Иначе
		ДопРеквизиты = КешДР[ПараметрыЗагрузки.Источник]
	КонецЕсли;

	РеквизитыТЧ = Новый Соответствие;
	КонтрольИзменений = Ложь;
	РеквизитыПоискаТЧ = Новый Соответствие;
		
	Для Каждого Элт ИЗ ПараметрыЗагрузки.Элементы Цикл

		Если ПустаяСтрока(Элт.РеквизитИсточника) Тогда Продолжить;
		КонецЕсли;

		Если ПустаяСтрока(Элт.ЭлементСпискаXDTO) И ЗначениеЗаполнено(Элт.Значение) Тогда
			ОбъектИБ[Элт.РеквизитИсточника] = Элт.Значение;
			Продолжить;
		КонецЕсли;
		
		Если Элт.ЭтоДопРеквизит Тогда 
			ДопРеквизит = ДопРеквизиты.Найти(Элт.РеквизитИсточника, ""Наименование"").Свойство;
		Иначе
			ДопРеквизит = Неопределено;
		КонецЕсли;
		
		Если СтрНайти(Элт.РеквизитИсточника, ""."") > 0 Тогда 
			// таблица
			МассивРТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт.РеквизитИсточника, ""."");
			Если РеквизитыТЧ[МассивРТЧ[0]] = Неопределено Тогда 
				РеквизитыТЧ[МассивРТЧ[0]] = Новый Соответствие;
				РеквизитыПоискаТЧ[МассивРТЧ[0]] = Новый Соответствие;
			КонецЕсли;
		Иначе
			МассивРТЧ = Неопределено;
		КонецЕсли;

		Если СтрНайти( ""БезРоли,ПолеПоиска,ВторичноеПолеПоиска"", Элт.Роль ) > 0 И НЕ Элт.Вид = ""Ссылка"" Тогда
			// обычный тип
			Если Элт.ЭтоДопРеквизит Тогда
				НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Найти(ДопРеквизит, ""Свойство"");
				Если НайтиДопРек = Неопределено Тогда 
					НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Добавить();
					НайтиДопРек.Свойство = ДопРеквизит;
				КонецЕсли;
				НайтиДопРек.Значение = ОбъектXDTO[Элт.ЭлементСпискаXDTO];
			Иначе
				Если МассивРТЧ = Неопределено Тогда 
					ОбъектИБ[Элт.РеквизитИсточника] = ОбъектXDTO[Элт.ЭлементСпискаXDTO];
				Иначе
					РеквизитыТЧ[МассивРТЧ[0]][МассивРТЧ[1]] = ОбъектXDTO[Элт.ЭлементСпискаXDTO];
					// для табличной части нужно указать поле поиска для полей, по которым будет осуществляться поиск данных в ТЧ
					Если Элт.Роль = ""ПолеПоиска"" Тогда 
						РеквизитыПоискаТЧ[МассивРТЧ[0]][МассивРТЧ[1]] = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элт.Роль = ""Соответствие"" Тогда
			ТабСоотв = ЗначениеИзСтрокиВнутр(Элт.СоответствиеЭлементов);
			Если Элт.ЭтоДопРеквизит Тогда
				НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Найти(ДопРеквизит, ""Свойство"");
				Если НайтиДопРек = Неопределено Тогда 
					НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Добавить();
					НайтиДопРек.Свойство = ДопРеквизит;
				КонецЕсли;
				СтрокаСоответствия = ТабСоотв.Найти(ОбъектXDTO[Элт.ЭлементСпискаXDTO], ""Значение"");
				Если НЕ СтрокаСоответствия = Неопределено Тогда 
					НайтиДопРек.Значение = СтрокаСоответствия.Элемент;
				КонецЕсли;
			Иначе
				СтрокаСоответствия = ТабСоотв.Найти(ОбъектXDTO[Элт.ЭлементСпискаXDTO], ""Значение"");
				Если НЕ СтрокаСоответствия = Неопределено Тогда
					Если МассивРТЧ = Неопределено Тогда 
						ОбъектИБ[Элт.РеквизитИсточника] = СтрокаСоответствия.Элемент
					Иначе
						РеквизитыТЧ[МассивРТЧ[0]][МассивРТЧ[1]] = СтрокаСоответствия.Элемент
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элт.Роль = ""ПолеСсылки"" ИЛИ Элт.Вид = ""Ссылка"" Тогда
			// ищем по идентификатору

			НайденныйОбъект = НайтиРанееЗагруженныеПоИД(
				Новый Структура(
					""Источник, УзелИнформационнойБазы, ЗначениеИдентификатора"",
					Элт.ТипСсылки,
					ПараметрыЗагрузки.Узел,
					ОбъектXDTO[Элт.ЭлементСпискаXDTO]
					)
				);
			Если НайденныйОбъект = Неопределено Тогда 
				// ищем по полю ссылки
				ЗапросПоПолюСсылки = Новый Запрос(
				""ВЫБРАТЬ ПЕРВЫЕ 2 Ссылка ИЗ "" + Элт.ТипСсылки + "" ГДЕ "" + Элт.ПолеСсылки + "" = &"" + Элт.ПолеСсылки);
				ЗапросПоПолюСсылки.УстановитьПараметр(Элт.ПолеСсылки, ОбъектXDTO[Элт.ЭлементСпискаXDTO]);
				Результат = ЗапросПоПолюСсылки.Выполнить();
				Если Результат.Пустой() Тогда 
					ВывестиВЛог(""Объект не найден по полю поиска!
							|поле: "" + Элт.ЭлементСпискаXDTO + ""
							|значение: "" + ОбъектXDTO[Элт.ЭлементСпискаXDTO] + ""
							|"" + дамп(ОбъектXDTO));
				Иначе
					Выборка = Результат.Выбрать();
					Если Выборка.Количество() > 1 Тогда 
						ВывестиВЛог(""По полю поиска найдено более одного объекта!
							|поле: "" + Элт.ЭлементСпискаXDTO + ""
							|значение: "" + ОбъектXDTO[Элт.ЭлементСпискаXDTO] + ""
							|"" + дамп(ОбъектXDTO));
					КонецЕсли;
					Выборка.Следующий();
					НайденныйОбъект	= Выборка.Ссылка;
					КешПоиска[ОбъектXDTO[Элт.ЭлементСпискаXDTO]] = Новый Соответствие;
					КешПоиска[ОбъектXDTO[Элт.ЭлементСпискаXDTO]][Элт.ТипСсылки] = Выборка.Ссылка 
				КонецЕсли
			КонецЕсли;

			Если Элт.ЭтоДопРеквизит Тогда
				НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Найти(ДопРеквизит, ""Свойство"");
				Если НайтиДопРек = Неопределено Тогда 
					НайтиДопРек = ОбъектИБ.ДополнительныеРеквизиты.Добавить();
					НайтиДопРек.Свойство = ДопРеквизит;
				КонецЕсли;
				НайтиДопРек.Значение = НайденныйОбъект
			Иначе
				// если мы ищем ссылку для справочника или документа, то нужно текущий объект переопределить!
				Если Элт.РеквизитИсточника = ""Ссылка"" 
					И (СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Справочник."") ИЛИ СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Документ."")) Тогда
					Если ЗначениеЗаполнено(НайденныйОбъект) И Метаданные.НайтиПоТипу(ТипЗнч(НайденныйОбъект)).ПолноеИмя() = ПараметрыЗагрузки.Источник Тогда 
						// кеш объектов
						Если КешОбъектов[НайденныйОбъект] = Неопределено Тогда 
							ОбъектИБ = НайденныйОбъект.ПолучитьОбъект();
							КешОбъектов[НайденныйОбъект] = Новый Структура(""Объект, Изменение"", ОбъектИБ, Ложь);
						Иначе
							ОбъектИБ = КешОбъектов[НайденныйОбъект].Объект;
						КонецЕсли;

						КонтрольИзменений = Истина;
						ОбъектИБ.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
				Иначе
					Если МассивРТЧ = Неопределено Тогда 
						ОбъектИБ[Элт.РеквизитИсточника] = НайденныйОбъект
					Иначе
						РеквизитыТЧ[МассивРТЧ[0]][МассивРТЧ[1]] = НайденныйОбъект;
						// для табличной части нужно указать поле поиска для полей, по которым будет осуществляться поиск данных в ТЧ
						Если Элт.Роль = ""ПолеПоиска"" Тогда 
							РеквизитыПоискаТЧ[МассивРТЧ[0]][МассивРТЧ[1]] = Истина;
						КонецЕсли;
					КонецЕсли
				КонецЕсли
			КонецЕсли
		ИначеЕсли Элт.Роль = ""Адрес"" Тогда
			
		ИначеЕсли Элт.Роль = ""Фильтр"" Тогда
			
		Иначе
			Продолжить
		КонецЕсли;

	КонецЦикла;

	БылиИзмененияТЧ = Ложь;
	// ищем данные в ТЧ и меняем!
	Для Каждого Ст ИЗ РеквизитыТЧ Цикл
		СтруктураПоиска = Новый Структура;
		Для Каждого Ст1 ИЗ Ст.Значение Цикл
			Если РеквизитыПоискаТЧ[Ст.Ключ][Ст1.Ключ] = Истина Тогда 
				СтруктураПоиска.Вставить(Ст1.Ключ, Ст1.Значение);
			КонецЕсли;
		КонецЦикла;

		НайденныеСтроки = ОбъектИБ[Ст.Ключ].НайтиСтроки(СтруктураПоиска);

		Если НайденныеСтроки.Количество() = 0 Тогда
			БылиИзмененияТЧ = Истина;
			НоваяСтрока = ОбъектИБ[Ст.Ключ].Добавить();

			Для Каждого Ст1 ИЗ Ст.Значение Цикл
				НоваяСтрока[Ст1.Ключ] = Ст1.Значение;
			КонецЦикла;
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			// обновим таблицу
			Для Каждого Ст1 ИЗ Ст.Значение Цикл
				БылиИзмененияТЧ = БылиИзмененияТЧ ИЛИ НЕ НайденныеСтроки[0][Ст1.Ключ] = Ст1.Значение;
				НайденныеСтроки[0][Ст1.Ключ] = Ст1.Значение;
			КонецЦикла;
		Иначе
			
			ВывестиВЛог(""Найдено больше одной строки в таблице по полям поиска!
				|"" + Дамп(ОбъектXDTO));
		КонецЕсли;

	КонецЦикла;

	Если КонтрольИзменений И НЕ БылиИзмененияТЧ Тогда 
		Возврат ОбъектИБ.Ссылка
	КонецЕсли;

	Если СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Справочник."") Тогда
		// создадим элемент справочника
        Если КешОбъектов[ОбъектИБ.Ссылка] = Неопределено Тогда 
            Попытка         // Виктор+ 
			    ОбъектИБ.Записать();
            Исключение      // Виктор+
            КонецПопытки;   // Виктор+
		Иначе
			КешОбъектов[ОбъектИБ.Ссылка].Изменение = Истина;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""Документ."") Тогда
		// создадим документ
		Если КешОбъектов[ОбъектИБ.Ссылка] = Неопределено Тогда 
			ОбъектИБ.Записать(РежимЗаписиДокумента.Запись)
		Иначе
			КешОбъектов[ОбъектИБ.Ссылка].Изменение = Истина;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПараметрыЗагрузки.Источник, ""РегистрСведений."") Тогда
		// запишем запись
		ОбъектИБ.Записать();
		Возврат Истина
	КонецЕсли;
	
	Возврат ОбъектИБ.Ссылка

КонецФункции

Процедура ОбновитьОбъект(ОбъектXDTO, ПараметрыЗагрузки, Ссылка)
	СоздатьОбъектИБ(ОбъектXDTO, ПараметрыЗагрузки, Ссылка);	
КонецПроцедуры

#EndRegion

////////////////////////////////// ВЫГРУЗКА //////////////////////////////

#Region Выгрузка_Файла

&НаСервереБезКонтекста
Функция ПолучитьВидыКИИсточника(Источник)
	Если СтрНачинаетсяС(Источник, ""РегистрСведений."") ИЛИ Источник = ""Произвольный"" Тогда
		Возврат Новый СписокЗначений
	Иначе
		Если Метаданные.НайтиПоПолномуИмени(Источник).ТабличныеЧасти.Найти(""КонтактнаяИнформация"") = Неопределено Тогда 
			Возврат Новый СписокЗначений
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации[СтрЗаменить(Источник, ""."", """")]);
	
	Список = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Попытка
			Картинка = БиблиотекаКартинок[Выборка.Тип]
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		Список[Выборка.Наименование] = Выборка.ИмяПредопределенныхДанных;
	КонецЦикла;
	
	Возврат Список
		
КонецФункции

// выгрузка аналитических признаков счетов
// СообщенинеXDTO - объект XDTO
// Выборка - выборка справочника правил для проводок - выгружается соответствие счетов
&НаСервере
Процедура ВыгрузитьАналитическиеПризнакиСчетов(СообщенинеXDTO, Выборка)
	ТипXDTO = ФабрикаXDTO.Тип(Выборка.ПакетXDTO, ""АналитичПризнакиСчетов"");
	нпп = 0;
	Для Каждого Ст ИЗ Выборка.Счета Цикл
		Для Каждого Ст1 ИЗ ЗначениеИзСтрокиВнутр(Ст.Реквизиты) Цикл
			Если СтрНачинаетсяС(Ст1.Значение, ""Аналитический признак "") Тогда 
				нпп = нпп + 1;
				ЭлементXDTO = ФабрикаXDTO.Создать(ТипXDTO);
				ЭлементXDTO.ExtCode = Выборка.Код + ""_"" + Формат(нпп, ""ЧГ=0"");
				ЭлементXDTO.AccountNo = """" + Ст.Счет;
				ЭлементXDTO.SubcountCode = Ст1.Реквизит.Код;
				ЭлементXDTO.SubcObjectName = """" + Ст1.Реквизит;
				ЭлементXDTO.SubcOrder = 0 + Прав(Ст1.Значение, 1);
				СообщенинеXDTO.АналитичПризнакиСчетов.Добавить(ЭлементXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьФайлНаСервере()

	ИдентификаторыОбъектов = Новый Соответствие;
	
	ЗапросПоИдентификаторам = Новый Запрос(
	""ВЫБРАТЬ
	|	Орт_ПравилаНАПФЭлементы.РеквизитИсточника,
	|	Орт_ПравилаНАПФЭлементы.Ссылка.Источник КАК Источник
	|ИЗ
	|	Справочник.орт_ПравилаНАПФ.Элементы КАК Орт_ПравилаНАПФЭлементы
	|ГДЕ
	|	Орт_ПравилаНАПФЭлементы.Ссылка.Активность
	|	И НЕ Орт_ПравилаНАПФЭлементы.Ссылка.ПометкаУдаления
	|	И Орт_ПравилаНАПФЭлементы.Вид = """"Идентификатор""""
	|	И НЕ Орт_ПравилаНАПФЭлементы.Ссылка.Источник = """"Произвольный""""
	|	И Орт_ПравилаНАПФЭлементы.Ссылка.Узел = &Узел"");
	
	ЗапросПоИдентификаторам.УстановитьПараметр(""Узел"", Объект.Узел);

	Для Каждого Ст ИЗ ЗапросПоИдентификаторам.Выполнить().Выгрузить() Цикл 
		ИдентификаторыОбъектов[Ст.Источник] = Ст.РеквизитИсточника;
	КонецЦикла;

	Выборка = Справочники.Орт_ПравилаНАПФ.Выбрать();

	СообщенинеXDTO = Неопределено;

	Пока Выборка.Следующий() Цикл

		// если правило неактивно или помечено на удаление, то не используем
		Если Выборка.ПометкаУдаления ИЛИ НЕ Выборка.Активность Тогда Продолжить
		КонецЕсли;

		Если СообщенинеXDTO = Неопределено Тогда 
			СообщенинеXDTO = ФабрикаXDTO.Пакеты.Получить(Выборка.ПакетXDTO).КорневыеСвойства.Получить(""Сообщение"");
			Сообщение = ФабрикаXDTO.Создать(СообщенинеXDTO.Тип);
		КонецЕсли;

		ТипXDTO	= ФабрикаXDTO.Тип(Выборка.ПакетXDTO, Выборка.КонтейнерXDTO);
		
		Если Выборка.КонтейнерXDTO = ""БухгалтПроводки"" Тогда 
			// если правило - это выгрузка проводок, то выгрузим ""АналитичПризнакиСчетов""
			ВыгрузитьАналитическиеПризнакиСчетов(Сообщение, Выборка);
		КонецЕсли;

		Соотв = Новый Соответствие;

		Если Выборка.Источник = ""Произвольный"" Тогда

			Запрос = Новый Запрос(Выборка.ПроизвольныйИсточник);
			Для Каждого Ст ИЗ Выборка.ПараметрыПроизвольногоИстончника Цикл
				Запрос.УстановитьПараметр(Ст.Параметр, Ст.Значение);
			КонецЦикла;

			Для Каждого Ст ИЗ Выборка.Элементы Цикл

				Если ПустаяСтрока(ст.ЭлементСпискаXDTO) Тогда
					Продолжить
				КонецЕсли;
				
				Если СтрНайти(""ВариантИзменений,Фильтр,Соответствие,РеквизитЛС,ПолеСсылки"", Ст.Роль) = 0 И НЕ ПустаяСтрока(Ст.РеквизитИсточника) Тогда 
					Соотв[Ст.ЭлементСпискаXDTO] = Ст.РеквизитИсточника;
				ИначеЕсли Ст.Роль = ""Соответствие"" Тогда 
					Соотв[Ст.ЭлементСпискаXDTO] = Новый Структура(""Поле, Таблица"", Ст.РеквизитИсточника, ЗначениеИзСтрокиВнутр(Ст.СоответствиеЭлементов));
				ИначеЕсли Ст.Роль = ""РеквизитЛС"" Тогда
					// здесь необходимо заполнить данные лицевых счетов в соответствии с настройкой
					Соотв[Ст.ЭлементСпискаXDTO] = Новый Структура(""Поле, Счета"", Ст.РеквизитИсточника, Выборка.Счета);
				ИначеЕсли Ст.Роль = ""ОРФ"" Тогда
					// здесь необходимо заполнить данные ОФР в соответствии с настройкой
					Соотв[Ст.ЭлементСпискаXDTO] = Новый Структура(""Поле, Счета, ОФР"", Ст.РеквизитИсточника, Выборка.Счета, Истина);
				ИначеЕсли Ст.Роль = ""ПолеСсылки"" И ЗначениеЗаполнено(Ст.ПолеСсылки) Тогда 
					Соотв[Ст.ЭлементСпискаXDTO] = Новый Структура(""Поле, ПолеСсылки"", Ст.РеквизитИсточника, Ст.ПолеСсылки);
				КонецЕсли;

			КонецЦикла;

		Иначе

			СписокВидовАдреса = ПолучитьВидыКИИсточника(Выборка.Источник);
			Метадата = Метаданные.НайтиПоПолномуИмени(Выборка.Источник);
			ДопРеквизиты = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(Выборка.Источник, ""ДополнительныеРеквизиты"");
			ТаблицыДопРеквизитов = Новый Массив;

			Запрос  = Новый Запрос;
			ТекстЗапроса = ""ВЫБРАТЬ"";
			СоединениеДляАдресов = """";
			СоединениеДляТЧ = """";
			ИменаТаблицДляТЧ = Новый Соответствие;

			Для Каждого Ст ИЗ Выборка.Элементы Цикл

				Если ПустаяСтрока(ст.ЭлементСпискаXDTO) Тогда
					Продолжить
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ст.РеквизитИсточника) И НЕ Ст.Роль = ""Адрес""  Тогда 
					Продолжить;
				КонецЕсли;
				
				// ТЧ
				ЭтоРТЧ = СтрНайти(Ст.РеквизитИсточника,""."") > 0;
				Если ЭтоРТЧ Тогда 
					МассивРТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ст.РеквизитИсточника, ""."");
					Если ИменаТаблицДляТЧ[МассивРТЧ[0]] = Неопределено Тогда
						ИменаТаблицДляТЧ[МассивРТЧ[0]] = МассивРТЧ[0] + Формат(Ст.НомерСтроки,""ЧГ=0"");
						СоединениеДляТЧ = СоединениеДляТЧ + ""
						| ВНУТРЕННЕЕ СОЕДИНЕНИЕ "" + Выборка.Источник + ""."" + МассивРТЧ[0] + "" КАК "" + ИменаТаблицДляТЧ[МассивРТЧ[0]] + "" 
						|  ПО Источник.Ссылка = "" + ИменаТаблицДляТЧ[МассивРТЧ[0]]+"".Ссылка"";
					КонецЕсли;
				КонецЕсли;

				Если СтрНайти(""ВариантИзменений,Фильтр,Соответствие"", Ст.Роль) = 0 И НЕ ПустаяСтрока(Ст.РеквизитИсточника) Тогда
					ТекстЗапроса = ТекстЗапроса +  ""
					|"" + ?(ст.ЭтоДопРеквизит,""ДопРеквизиты"" + Формат(Ст.НомерСтроки,""ЧГ=0"") + "".Значение"",
						?(ЭтоРТЧ, ИменаТаблицДляТЧ[МассивРТЧ[0]] + ""."" + МассивРТЧ[1],""Источник."" + ст.РеквизитИсточника)) + ?(ПустаяСтрока(ст.ПолеСсылки),"""","".""+Ст.ПолеСсылки)+"" КАК Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0"") +"","";
					Соотв[Ст.ЭлементСпискаXDTO] = ""Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0"");
				ИначеЕсли Ст.Роль = ""Соответствие"" Тогда 
					ТекстЗапроса = ТекстЗапроса +  ""
					|"" + ?(ст.ЭтоДопРеквизит,""ДопРеквизиты"" + Формат(Ст.НомерСтроки,""ЧГ=0"") + "".Значение"", 
						?(ЭтоРТЧ, ИменаТаблицДляТЧ[МассивРТЧ[0]] + ""."" + МассивРТЧ[1], ""Источник."" + ст.РеквизитИсточника)) + ?(ПустаяСтрока(ст.ПолеСсылки),"""","".""+Ст.ПолеСсылки)+"" КАК Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0"") +"","";
					Соотв[Ст.ЭлементСпискаXDTO] = Новый Структура(""Поле, Таблица"", ""Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0""), ЗначениеИзСтрокиВнутр(Ст.СоответствиеЭлементов));
				ИначеЕсли Ст.Роль = ""Адрес"" Тогда 
					ТекстЗапроса = ТекстЗапроса +  ""
					|ИсточникАдреса"" + Формат(Ст.НомерСтроки,""ЧГ=0"") + "".Представление КАК Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0"") +"","";
					Соотв[Ст.ЭлементСпискаXDTO] = ""Поле"" + Формат(Ст.НомерСтроки,""ЧГ=0""); 
					ТаблицаАдреса = Выборка.Источник + "".КонтактнаяИнформация КАК ИсточникАдреса"" + Формат(Ст.НомерСтроки,""ЧГ=0"");
					УсловиеСвязи = ""Источник.Ссылка = ИсточникАдреса"" + Формат(Ст.НомерСтроки,""ЧГ=0"") + "".Ссылка И ИсточникАдреса"" + Формат(Ст.НомерСтроки,""ЧГ=0"") + "".Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации."" + СписокВидовАдреса[Ст.СоответствиеЭлементов] + "")"";
					СоединениеДляАдресов = СоединениеДляАдресов + ""
					|	ЛЕВОЕ СОЕДИНЕНИЕ "" +ТаблицаАдреса + ""
					|	ПО "" + УсловиеСвязи;
				КонецЕсли;
				
				Если Ст.ЭтоДопРеквизит Тогда
					ТаблицыДопРеквизитов.Добавить(Новый Структура(""Таблица, Свойство"", ""ДопРеквизиты"" + Формат(Ст.НомерСтроки,""ЧГ=0""), ДопРеквизиты.Найти(Ст.РеквизитИсточника ,""Наименование"").Свойство));
				КонецЕсли;

			КонецЦикла;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса+""///"","",///"","""");
			ТекстЗапроса = ТекстЗапроса + ""
			|ИЗ "" + Выборка.Источник + "" КАК Источник"" + СоединениеДляАдресов + СоединениеДляТЧ;
			Если СтрНачинаетсяС(Выборка.Источник, ""Справочник"") И Метаданные.НайтиПоПолномуИмени(Выборка.Источник).Иерархический Тогда 
				ТекстЗапроса = ТекстЗапроса + ""
				|ГДЕ НЕ ЭтоГруппа"";
			КонецЕсли;
			
			Для Каждого Ст ИЗ ТаблицыДопРеквизитов Цикл
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""ГДЕ "", ""ЛЕВОЕ СОЕДИНЕНИЕ "" + Выборка.Источник + "".ДополнительныеРеквизиты КАК "" + Ст.Таблица + ""
				|ПО Источник.Ссылка = "" + Ст.Таблица + "".Ссылка И "" + Ст.Таблица + "".Свойство = &Свойство"" + Ст.Таблица + ""
				|ГДЕ "");
				
				Запрос.УстановитьПараметр(""Свойство"" + Ст.Таблица, Ст.Свойство);
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапроса;
		КонецЕсли;
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

		Пока ВыборкаЗапроса.Следующий() Цикл

			Элт = ФабрикаXDTO.Создать(ТипXDTO);
			Для Каждого Ст ИЗ Соотв Цикл
				Если ТипЗнч(Ст.Значение) = Тип(""Структура"") Тогда
			
					Если Ст.Значение.Свойство(""Таблица"") Тогда
						НайдСтрока = Ст.Значение.Таблица.Найти(ВыборкаЗапроса[Ст.Значение.Поле], ""Элемент"");
						Если НайдСтрока = Неопределено Тогда
							Если """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}integer"" ИЛИ """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}decimal"" Тогда 
								Элт[Ст.Ключ] = 0
							ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}date"" Тогда 
								Элт[Ст.Ключ] = дата(1,1,1);
							ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}dateTime"" Тогда 
								Элт[Ст.Ключ] = дата(1,1,1,0,0,0);
							ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}string"" Тогда 
								Элт[Ст.Ключ] = """"
							КонецЕсли;
						Иначе
							Элт[Ст.Ключ] = НайдСтрока.Значение;
						КонецЕсли;
					ИначеЕсли Ст.Значение.Свойство(""ПолеСсылки"") Тогда
						Элт[Ст.Ключ] = ?(ВыборкаЗапроса[Ст.Значение.Поле] = NULL, """", ВыборкаЗапроса[Ст.Значение.Поле][Ст.Значение.ПолеСсылки]);
					Иначе
						// реквизиты ЛС или код ОФР
						ЛицевойСчет = ВыборкаЗапроса[Ст.Значение.Поле];
						ЗапросРеквизитовЛС = Новый Запрос(
						""ВЫБРАТЬ
						|	нфо_РеквизитыЛицевогоСчета.Реквизит,
						|	нфо_РеквизитыЛицевогоСчета.Значение
						|ИЗ
						|	РегистрСведений.нфо_РеквизитыЛицевогоСчета КАК нфо_РеквизитыЛицевогоСчета
						|ГДЕ
						|	нфо_РеквизитыЛицевогоСчета.ЛицевойСчет = &ЛицевойСчет
						|	И НЕ нфо_РеквизитыЛицевогоСчета.Значение = НЕОПРЕДЕЛЕНО
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	нфо_ЛицевыеСчета.СчетУчета.ШаблонЛицевогоСчета.ВладелецВид,
						|	нфо_ЛицевыеСчета.ВладелецЗначение
						|ИЗ
						|	Справочник.нфо_ЛицевыеСчета КАК нфо_ЛицевыеСчета
						|ГДЕ
						|	нфо_ЛицевыеСчета.Ссылка = &ЛицевойСчет
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	нфо_ЛицевыеСчета.СчетУчета.ШаблонЛицевогоСчета.РазделительВид,
						|	нфо_ЛицевыеСчета.РазделительЗначение
						|ИЗ
						|	Справочник.нфо_ЛицевыеСчета КАК нфо_ЛицевыеСчета
						|ГДЕ
						|	нфо_ЛицевыеСчета.Ссылка = &ЛицевойСчет"");

						ЗапросРеквизитовЛС.УстановитьПараметр(""ЛицевойСчет"", ЛицевойСчет);
						ТабРеквизитов = ЗапросРеквизитовЛС.Выполнить().Выгрузить();
						СтрокаСопоставления = Ст.Значение.Счета.Найти(ЛицевойСчет.СчетУчета, ""Счет"");

						Если НЕ СтрокаСопоставления = Неопределено Тогда 
							ТаблицаРеквизитовСчетов = ЗначениеИзСтрокиВнутр(СтрокаСопоставления.Реквизиты);
							Если Ст.Значение.Свойства(""ОФР"") Тогда
								Реквизит = ТаблицаРеквизитовСчетов.Найти(""ОФР"", ""Значение"");
							Иначе
								Реквизит = ТаблицаРеквизитовСчетов.Найти(""Аналитический признак ""+прав(Ст.Ключ,1), ""Значение"");
							КонецЕсли;

							Если НЕ Реквизит = Неопределено Тогда
								// нашли реквизит
								// выгрузим его идентификатор
								ЗначениеРеквизита = ТабРеквизитов.Найти(Реквизит.Реквизит, ""Реквизит"");
								Если НЕ ЗначениеРеквизита = Неопределено Тогда
									// нашли реквизит
									Если Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита.Значение)) = Неопределено Тогда 
										// обычный тип
										Элт[Ст.Ключ] = """" + ЗначениеРеквизита.Значение;
									Иначе
										// справочник/документ
										
										ПолеИдентификатора = ИдентификаторыОбъектов[Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита.Значение)).ПолноеИмя()];
										Если НЕ ПолеИдентификатора = Неопределено Тогда 
											Элт[Ст.Ключ] = """" + ЗначениеРеквизита.Значение[ПолеИдентификатора];
										КонецЕсли;
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}integer"" ИЛИ """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}decimal"" Тогда
						знПоУмолчанию = 0;
					ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}string"" Тогда
						знПоУмолчанию ="""";
					ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}date"" Тогда
						знПоУмолчанию =Дата(1,1,1);
					ИначеЕсли """"+Элт.Свойства().Получить(ст.Ключ).Тип = ""{http://www.w3.org/2001/XMLSchema}dateTime"" Тогда
						знПоУмолчанию =Дата(1,1,1,0,0,0);
					КонецЕсли;
					//{http://www.w3.org/2001/XMLSchema}date
					Элт[Ст.Ключ] = ?(ВыборкаЗапроса[Ст.Значение] = NULL, знПоУмолчанию, ВыборкаЗапроса[Ст.Значение]);
				КонецЕсли;
			КонецЦикла;

			Если НЕ Элт.Свойства().Получить(""Log"") = Неопределено Тогда 
				Элт.Log = 0;
			КонецЕсли;

			Если Выборка.КонтейнерXDTO = ""ЮрЛицо"" Тогда
				Сообщение.Контрагенты.Добавить(Элт);
			ИначеЕсли Выборка.КонтейнерXDTO = ""ФизЛицо"" Тогда 
				Сообщение.Контрагенты.Добавить(Элт);
			Иначе
				Сообщение[Выборка.КонтейнерXDTO].Добавить(Элт);
			КонецЕсли;
		КонецЦикла;
		
		// выгрузим элемент
	КонецЦикла;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Сообщение, ""Сообщение"");

	Возврат Запись.Закрыть();

КонецФункции

&НаКлиенте
Процедура ВыгрузитьФайл(Команда)
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Длг.Показать(Новый ОписаниеОповещения(""ПриВыбореФайла"", ЭтаФорма, ""Записать""));
КонецПроцедуры

#EndRegion",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",137201b2-1185-4e2e-b5f2-55e51662ef0d}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{1,
{0,6a8c8cc9-516b-4653-92a0-cacdd1fcea74}
}
},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ЗагруженныеДоговорыДУ",
{1,1,
{"ru","Загруженные договоры ДУ"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,2,
{5,1,0,"ДоговорДУ",
{1,1,
{"ru","Договор ДУ"}
},
{"Pattern",
{"#",376807bc-0d88-4c06-9eb2-42b72b970afb}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Идентификатор",
{1,1,
{"ru","Идентификатор"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,2,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьФайл",
{1,1,
{"ru","Загрузить файл"}
},
{1,1,
{"ru","Загрузить файл"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьФайл",3,0,0,
{0,0},1,0,1,0,0},
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыгрузитьФайл",
{1,1,
{"ru","Выгрузить файл"}
},
{1,1,
{"ru","Выгрузить файл"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыгрузитьФайл",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}