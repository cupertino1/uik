//izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ (
//Событие ОбработкаОповещения() заменилось на ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//Событие ПриЗакрытии() заменилось на ПриЗакрытии()
//Событие ПередЗакрытием() заменилось на ПередЗакрытием(Отказ, СтандартнаяОбработка)
//Событие ПриОткрытии() заменилось на ПриОткрытии(Отказ)
//izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ )

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
		Элементы.ФлажокВнешДанные.Видимость = Истина;
	Иначе
		Элементы.ФлажокВнешДанные.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл пояснительной записки";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = "Файл пояснительной записки (*.doc;*.xls;*.rtf;*.tif;*.pdf;*.jpg)|*.doc;*.xls;*.rtf;*.tif;*.pdf;*.jpg|Документ Word (*.doc)|*.doc|Лист Excel (*.xls)|*.xls|Документ RTF (*.rtf)|*.rtf|Картинка TIFF (*.tif)|*.tif|Документ PDF (*.pdf)|*.pdf|Картинка JPEG (*.jpg)|*.jpg";
	
	Если Диалог.Выбрать() Тогда
		ИмяФайлаПояснительнойЗаписки = Диалог.ПолноеИмяФайла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл аудиторского заключения";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = "Файл аудиторского заключения (*.tif;*.pdf;*.jpg)|*.tif;*.pdf;*.jpg|Картинка TIFF (*.tif)|*.tif|Документ PDF (*.pdf)|*.pdf|Картинка JPEG (*.jpg)|*.jpg";
	
	Если Диалог.Выбрать() Тогда
		ИмяФайлаАудиторскогоЗаключения = Диалог.ПолноеИмяФайла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл заявления ревизионного союза с/х производителей";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = "Файл заявления (*.tif;*.pdf;*.jpg)|*.tif;*.pdf;*.jpg|Картинка TIFF (*.tif)|*.tif|Документ PDF (*.pdf)|*.pdf|Картинка JPEG (*.jpg)|*.jpg";
	
	Если Диалог.Выбрать() Тогда
		ИмяФайлаЗаявленияРевизионногоСоюза = Диалог.ПолноеИмяФайла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализироватьСтруктурыДанных()
	
	мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);
	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("Раздел");
	ТаблицаСообщений.Колонки.Добавить("Графа");
	ТаблицаСообщений.Колонки.Добавить("Строка");
	ТаблицаСообщений.Колонки.Добавить("Страница");
	ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
	ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
	ТаблицаСообщений.Колонки.Добавить("Описание");
	
	СпП = Новый ТаблицаЗначений;
	СпП.Колонки.Добавить("НомСтроки");
	СпП.Колонки.Добавить("ИмяЯчейки");
	СпП.Колонки.Добавить("ИмяПоказателя");
	СпП.Колонки.Добавить("ЗнакОперации");
	СпП.Колонки.Добавить("ИмяСлагаемого");
	СпП.Колонки.Добавить("Сумма");
	СпП.Колонки.Добавить("КодСчета");
	СпП.Колонки.Добавить("КодКорСчета");
	СпП.Колонки.Добавить("ДатаНачала");
	СпП.Колонки.Добавить("ДатаКонца");
	СпП.Колонки.Добавить("Сдвиг");
	СпП.Колонки.Добавить("Раздел");
	СпП.Колонки.Добавить("Страница");
	СпП.Колонки.Добавить("МнЧ");
	СпП.Колонки.Добавить("СтрокаПП");
	СпП.Колонки.Добавить("Субконто1");
	СпП.Колонки.Добавить("Субконто2");
	СпП.Колонки.Добавить("Субконто3");
	СпП.Колонки.Добавить("Организация");
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	мПечатныеФормы = Новый СписокЗначений;
	мПечатаемыеРазделы = Новый СписокЗначений;
	
	ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
	ЦветНеЗаполняется               = Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);
	
	// Объявим таблицу значений мТаблицаИтоговыхПоказателейПриКонсолидации.
	// Используется при заполнении отчета за несколько организаций. Хранит данные по показателям
	// которые записываются через процедуру УстановитьЗначениеПоказателя.
	
	мТаблицаИтоговыхПоказателейПриКонсолидации = Новый ТаблицаЗначений;
	мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("ИмяПоказателя");
	мТаблицаИтоговыхПоказателейПриКонсолидации.Колонки.Добавить("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыУправленияФормы()
	
	// Список выбора поля выбора "Единица измерения".
	Элементы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1"),       "в рублях");
	Элементы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000"),    "в тысячах рублей");
	Элементы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000"), "в миллионах рублей");
	
	// Список выбора поля выбора "ВариантЗаполнения".
	СписокВыбораВариантовЗаполнения = Новый СписокЗначений;
	СписокВыбораВариантовЗаполнения.Добавить(1, "не заполнять автоматически");
	СписокВыбораВариантовЗаполнения.Добавить(2, "заполнять автоматически с корректировкой");
	СписокВыбораВариантовЗаполнения.Добавить(3, "заполнять автоматически без корректировки");
	Элементы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Очистить();
	Для Каждого тек_Значение_уник Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(тек_Значение_уник.Значение, тек_Значение_уник.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияФормаОтчета.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияОДДС.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияОДДС.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияОЦИПС.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияОЦИПС.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияОИК.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияОИК.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияРасчетАктивов.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияРасчетАктивов.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения1.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения1.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения2.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения2.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения3.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения3.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения4.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения4.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения5.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения5.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения6.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения6.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения7.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения7.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения8.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения8.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	Элементы.ПолеВыбораВариантЗаполненияПояснения9.СписокВыбора.Очистить();
	Для Каждого тек_значение_уник_tr_id Из РеквизитФормыВЗначение("СписокВыбораВариантовЗаполнения", Тип("ТаблицаЗначений")).Скопировать() Цикл		
	Элементы.ПолеВыбораВариантЗаполненияПояснения9.СписокВыбора.Добавить(тек_значение_уник_tr_id.Значение, тек_значение_уник_tr_id.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЗаполнитьСоответствиеСчетов(мСчет);
	
	мБезОткрытияФормы = БезОткрытияФормы;
	мРежимПечати = Ложь;
	
	// При восстановлении отчета из сохраненных данных необходимо восстановить
	// значение реквизита Организация до того как будут выполняться настройки формы.
	Если мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
		Объект.Организация = мСохраненныйДок.Организация;
		СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
		СписокСохранения.Свойство("БалансНекоммерческойОрганизации", ЭтоБалансНекоммерческойОрганизации);
		ИнициализацияЗаполнитьСтруктурыДанных(СписокСохранения);
	Иначе
		ИнициализацияЗаполнитьСтруктурыДанных();
	КонецЕсли;
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИнициализироватьПоляТабличныхДокументов();
	
	ИнициализироватьОписанияМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение)
	КонецЦикла;
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьНачальныеНастройки();
	Если Не мБезОткрытияФормы Тогда
		мДеревоВыбранныхСтраниц =РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ТаблицаЗначений")).Скопировать();
		ПоказатьСтраницыОтчета(); 
	КонецЕсли;
	
	мВПрограммеИзмененаОрганизация = Ложь;
	
	ВидДокумента = 0;
	Элементы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			Объект.ЕдиницаИзмерения         = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000");
			Объект.ТочностьЕдиницыИзмерения = 0;
			
			// Инициализация переменных настройки формы
			мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			мДеревоВыбранныхСтраниц =РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ТаблицаЗначений")).Скопировать();
			
			мСохранятьРасшифровку = Истина;
			Элементы.КнопкаСохранятьРасшифровку.Пометка = Истина;
			
			УстановитьФорматВывода();
			
			// При создании нового всегда по умолчанию подставляем почтовый адрес организации.
			// Перевыбрать адрес можно на форме отчета.
			мТипАдреса = "ПолныйАдрПочт";
			
			// Заполним настройки состава дополнительных строк по умолчанию.
			СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	ПоказатьПериод();
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();
	ЗаполнитьПериодыВРазделахОтчетности();
	
	мБаланс.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	ПолеТаблДокументаОДДС.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	мОЦИПС.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	ПолеТаблДокументаОИК.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	
	Если мСохраненныйДок = Неопределено ИЛИ мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;
	
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из Элементы.ОсновнаяПанель.ПодчиненныеЭлементы Цикл
		УстановитьЦветФонаЯчейки( , , Страница.Имя);
	КонецЦикла;
	
	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	
	мБезКонсолидации = мГруппаОрганизаций.Количество() = 0;
	НазванияОрганизаций = ПолучитьНазванияОрганизацийСтрокой();
	Элементы.Надпись30.Заголовок = НазванияОрганизаций;
	Если НЕ мБезКонсолидации Тогда
		Элементы.Надпись30.ГиперСсылка = Истина;
		Элементы.Надпись30.Подсказка = "Список организаций, по которым формируется отчет";
		Элементы.Надпись.Заголовок = "Организации:";
		Если мСохраненныйДок = Неопределено Тогда
			// При первом открытии отчета, который должен собираться по нескольким организациям
			// в поле Комментарий запишем названия всех организаций.
			КомментарийОбщий = НазванияОрганизаций;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		ПрорисоватьПодменюПечать();
		СформироватьСписокПодменюНавигации();
		СформироватьСписокПодменюАвторасчета();
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок();
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные = Неопределено)
	
	Если СохраненныеДанные = Неопределено Тогда
		// Создание нового отчета.
		Если мДатаКонцаПериодаОтчета < '20120101' Тогда
			СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4();
		Иначе
			СтруктураОтчета = ПолучитьСтруктуруОтчета2012Кв1();
		КонецЕсли;
	Иначе
		// Восстановление сохраненного отчета.
		СохраненнаяСтруктураОтчета = Неопределено;
		Если СохраненныеДанные.Свойство("СтруктураОтчета", СохраненнаяСтруктураОтчета) Тогда
			СтруктураОтчета = СохраненнаяСтруктураОтчета;
		Иначе
			// Отчет был сохранен со структурой данных 2011Кв4.
			СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьСтруктуруОтчета2011Кв4()
	
	СоставНастройкаОтчета = Новый Структура;
	
	СтруктураОтчета = Новый Структура();
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2011Кв4");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_НКО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2011Кв4");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2011Кв4");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_КО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2011Кв4");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьСтруктуруОтчета2012Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура();
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2012Кв1");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв1");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета)
	
	// Отчет о прибылях и убытках.
	СтруктураОтчета = Новый Структура();
	Если ИспользуютсяМакетыЕНВД() Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_ЕНВД_2011Кв4");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_НеЕНВД_2011Кв4");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаНеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОПУ", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОИК_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОИК");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураОтчета);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Отчет о целевом использовании полученных средств.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОЦИПС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОЦИПС_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОЦИПС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОЦИПС", СтруктураОтчета);
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "РасчетАктивов");
	СтруктураОтчета.Вставить("ИмяМакета",                      ?(мДатаКонцаПериодаОтчета < '20120101', "РасчетАктивов_2011Кв4", "РасчетАктивов_2012Кв1"));
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "РасчетАктивов");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения1");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения1_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения1");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения1");
	
	СоставНастройкаОтчета.Вставить("Пояснения1", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения2");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения2_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения2");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения2");
	
	СоставНастройкаОтчета.Вставить("Пояснения2", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения3");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения3_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения3");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения3");
	
	СоставНастройкаОтчета.Вставить("Пояснения3", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения4");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения4_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения4");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения4");
	
	СоставНастройкаОтчета.Вставить("Пояснения4", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения5");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения5_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения5");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения5");
	
	СоставНастройкаОтчета.Вставить("Пояснения5", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения6");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения6_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения6");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения6");
	
	СоставНастройкаОтчета.Вставить("Пояснения6", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения7");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения7_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения7");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения7");
	
	СоставНастройкаОтчета.Вставить("Пояснения7", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения8");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения8_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения8");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения8");
	
	СоставНастройкаОтчета.Вставить("Пояснения8", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	СтруктураОтчета = Новый Структура();
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения9");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения9_2011Кв4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения9");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения9");
	
	СоставНастройкаОтчета.Вставить("Пояснения9", СтруктураОтчета);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СформироватьСписокПодменюНавигации()
	
	ПодменюНавигации = Элементы.КнопкаНавигации;
	ПодменюНавигации.Кнопки.Очистить();
	
	Для Каждого СтрокаОтчета Из мДеревоСтраницОтчета.Строки Цикл
		СтраницаПоказывается = (СтрокаОтчета.ПоказатьСтраницу <> 0);
		Если СтраницаПоказывается Тогда
			ПодменюНавигации.Кнопки.Добавить(СтрокаОтчета.ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие, СтрокаОтчета.Представление,"АктивироватьОтчет");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СформироватьСписокПодменюАвторасчета()
	
	ПодменюНастроекАвторасчета = Элементы.Кнопки.Авторасчет;
	ПодменюНастроекАвторасчета.Кнопки.Очистить();
	
	Для Каждого СтрокаОтчета Из мДеревоСтраницОтчета.Строки Цикл
		СтраницаПоказывается = (СтрокаОтчета.ПоказатьСтраницу <> 0);
		Если СтраницаПоказывается Тогда
			ПодменюНастроекАвторасчета.Кнопки.Добавить(СтрокаОтчета.ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие, СтрокаОтчета.Представление,"ПереключитьАвторасчет");
			Если мДеревоСтраницОтчета.Колонки.Найти("АвторасчетПоказателей") = Неопределено Тогда
				мДеревоСтраницОтчета.Колонки.Добавить("АвторасчетПоказателей");
				СтрокаОтчета.АвторасчетПоказателей = Истина;
			Иначе
				Если СтрокаОтчета.АвторасчетПоказателей = Неопределено Тогда
					СтрокаОтчета.АвторасчетПоказателей = Истина;
				КонецЕсли;
			КонецЕсли;
			ПодменюНастроекАвторасчета.Кнопки[СтрокаОтчета.ИмяСтраницы].Пометка = СтрокаОтчета.АвторасчетПоказателей;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПрорисоватьПодменюПечать()
	
	ПечатьPDF417Разрешена = (мДатаКонцаПериодаОтчета < '20120101');
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 2 ИЛИ ВидСдачиОтчетности = 3);
	
	Если ПечатьPDF417Разрешена
	   И (Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 ИЛИ ЭтоЛиквидационнаяОтчетность) Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма,"КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы","КоманднаяПанельДействийПечатьМашиночитаемогоБланка");
	Иначе
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма,"КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы", , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляТабличныхДокументов()
	
	// Бухгалтерский баланс.
	Макет =РеквизитФормыВЗначение("Объект").ПолучитьМакет(СтруктураОтчета.Баланс.ИмяМакета);
	мБаланс = Элементы.ПолеТабличногоДокументаБаланс;
	мБаланс.Очистить();
	мБаланс.Вывести(Макет);
	
	// Отчет о прибылях и убытках.
	МакетОПУ = Объект.ПолучитьМакет(СтруктураОтчета.ОПУ.ИмяМакета);
	мФормаОтчета = Элементы.ПолеТабличногоДокументаФормаОтчета;
	мФормаОтчета.Очистить();
	мФормаОтчета.Вывести(МакетОПУ);
	
	// Отчет об изменениях капитала.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.ОИК.ИмяМакета);
	ПолеТаблДокументаОИК = Элементы.ПолеТабличногоДокументаОИК;
	ПолеТаблДокументаОИК.Очистить();
	ПолеТаблДокументаОИК.Вывести(Макет);
	
	// Отчет о движении денежных средств.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.ОДДС.ИмяМакета);
	ПолеТаблДокументаОДДС = Элементы.ПолеТабличногоДокументаОДДС;
	ПолеТаблДокументаОДДС.Очистить();
	ПолеТаблДокументаОДДС.Вывести(Макет);
	
	// Отчет о целевом использовании денежных средств.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.ОЦИПС.ИмяМакета);
	мОЦИПС = Элементы.ПолеТабличногоДокументаОЦИПС;
	мОЦИПС.Очистить();
	мОЦИПС.Вывести(Макет);
	
	// Расчет стоимости чистых активов акционерного общества.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.РасчетАктивов.ИмяМакета);
	мРасчетАктивов = Элементы.ПолеТабличногоДокументаРасчетАктивов;
	мРасчетАктивов.Очистить();
	мРасчетАктивов.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения1.ИмяМакета);
	ПолеТаблДокументаПояснения1 = Элементы.ПолеТабличногоДокументаПояснения1;
	ПолеТаблДокументаПояснения1.Очистить();
	ПолеТаблДокументаПояснения1.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения2.ИмяМакета);
	ПолеТаблДокументаПояснения2 = Элементы.ПолеТабличногоДокументаПояснения2;
	ПолеТаблДокументаПояснения2.Очистить();
	ПолеТаблДокументаПояснения2.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения3.ИмяМакета);
	ПолеТаблДокументаПояснения3 = Элементы.ПолеТабличногоДокументаПояснения3;
	ПолеТаблДокументаПояснения3.Очистить();
	ПолеТаблДокументаПояснения3.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения4.ИмяМакета);
	ПолеТаблДокументаПояснения4 = Элементы.ПолеТабличногоДокументаПояснения4;
	ПолеТаблДокументаПояснения4.Очистить();
	ПолеТаблДокументаПояснения4.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения5.ИмяМакета);
	ПолеТаблДокументаПояснения5 = Элементы.ПолеТабличногоДокументаПояснения5;
	ПолеТаблДокументаПояснения5.Очистить();
	ПолеТаблДокументаПояснения5.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения6.ИмяМакета);
	ПолеТаблДокументаПояснения6 = Элементы.ПолеТабличногоДокументаПояснения6;
	ПолеТаблДокументаПояснения6.Очистить();
	ПолеТаблДокументаПояснения6.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения7.ИмяМакета);
	ПолеТаблДокументаПояснения7 = Элементы.ПолеТабличногоДокументаПояснения7;
	ПолеТаблДокументаПояснения7.Очистить();
	ПолеТаблДокументаПояснения7.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения8.ИмяМакета);
	ПолеТаблДокументаПояснения8 = Элементы.ПолеТабличногоДокументаПояснения8;
	ПолеТаблДокументаПояснения8.Очистить();
	ПолеТаблДокументаПояснения8.Вывести(Макет);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	Макет = Объект.ПолучитьМакет(СтруктураОтчета.Пояснения9.ИмяМакета);
	ПолеТаблДокументаПояснения9 = Элементы.ПолеТабличногоДокументаПояснения9;
	ПолеТаблДокументаПояснения9.Очистить();
	ПолеТаблДокументаПояснения9.Вывести(Макет);
	
КонецПроцедуры // ИнициализироватьПоляТабличныхДокументов()

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхЧастей()
	
	ИмяМакетаСтруктурыМногострочныхЧастей = НастройкиФормы.МакетСтруктурыМногострочныхЧастей;
	ТекстОписанияСтруктуры =РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакетаСтруктурыМногострочныхЧастей).ПолучитьТекст();
	ИнициализироватьОписанияМногострочныхПоXML(ТекстОписанияСтруктуры);
	
	// Заполнение соответствия показателей и их описаний в структуре 
	// для возможности получения описания по имени показателя.
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Ключ;
		ПоказателиМногострочнойЧасти    = МногострочнаяЧасть.Значение.Состав;
		
		Если ТипЗнч(ПоказателиМногострочнойЧасти) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Колонка Из ПоказателиМногострочнойЧасти.Колонки Цикл
			ИмяПоказателя = Колонка.Имя;
			СоответствиеПоказателейМногострочныхЧастейИхОписанию.Вставить(ИмяПоказателя, ИдентификаторМногострочнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьОписанияМногострочныхЧастей()

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхПоXML(ТекстXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочныеЧасти" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелМногострочныхЧастей Из Узел.ДочерниеУзлы Цикл
			ИмяРазделаМногострочныхЧастей = ПолучитьАтрибутКакСтроку(УзелМногострочныхЧастей, "ИмяРаздела");
			Если ИспользоватьОписаниеМногострочнойЧасти(ИмяРазделаМногострочныхЧастей) Тогда
				ВнестиОписаниеМногострочныхЧастейРаздела(УзелМногострочныхЧастей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ИспользоватьОписаниеМногострочнойЧасти(ИмяОписанияМногострочныхЧастей)
	
	Результат = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		Если Отчет.Значение.ИмяОписанияМногострочныхЧастей = ИмяОписанияМногострочныхЧастей Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВнестиОписаниеМногострочныхЧастейРаздела(УзелРаздела)
	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	
	ИмяПоляТабличногоДокумента = УзелРаздела.Атрибуты.ПолучитьИменованныйЭлемент("РасположениеРаздела").Значение;
	
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторМногострочнойЧасти = ПолучитьАтрибутКакСтроку(Узел, "Идентификатор");
		МинимальноеКоличествоСтрок  = ПолучитьАтрибутКакЧисло(Узел, "МинимальноеКоличествоСтрок");
		МаксимальноеКоличествоСтрок = ПолучитьАтрибутКакЧисло(Узел, "МаксимальноеКоличествоСтрок");
		ВерхнийЭлементСтроки = ПолучитьАтрибутКакСтроку(Узел, "ВерхнийЭлементСтроки");
		НижнийЭлементСтроки  = ПолучитьАтрибутКакСтроку(Узел, "НижнийЭлементСтроки");
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочнойЧасти.Вставить("Масштаб", Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок));
		СтруктураМногострочнойЧасти.Вставить("Габариты", Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", ВерхнийЭлементСтроки, НижнийЭлементСтроки));
		СтруктураМногострочнойЧасти.Вставить("ИмяПоляТабличногоДокумента", ИмяПоляТабличногоДокумента);
		
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ИмяУзла = "Кодификаторы" Тогда
				ВнестиОписаниеКодификаторовМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Заголовки" Тогда
				ВнестиОписаниеЗаголовковМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Состав" Тогда
				ВнестиОписаниеСоставаМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей.Вставить(ИдентификаторМногострочнойЧасти, СтруктураМногострочнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВнестиОписаниеКодификаторовМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивКодификаторов = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Кодификатор" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьКода = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьКода");
		НачальныйКод = ПолучитьАтрибутКакЧисло(ДочернийУзел, "НачальныйКод");
		
		МассивКодификаторов.Добавить(Новый Структура("Область, Код", ОбластьКода, НачальныйКод));
		
	КонецЦикла;
	
	Если МассивКодификаторов.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Кодификаторы", МассивКодификаторов);
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВнестиОписаниеЗаголовковМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Заголовок" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьЗаголовка");
		ШаблонЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ШаблонЗаголовка");
		
		МассивЗаголовков.Добавить(Новый Структура("Область, Заголовок", ОбластьЗаголовка, ШаблонЗаголовка));
		
	КонецЦикла;
	
	Если МассивЗаголовков.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Заголовки", МассивЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеСоставаМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	
	ТаблицаСостава = Новый ТаблицаЗначений;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла <> "ЭлементСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьАтрибутКакСтроку(ДочернийУзел, "Область");
		ТипОбласти = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ТипОбласти");
		
		ТипОбластиЧисло = (ТипОбласти = "Число");
		
		ИмяКолонки = Область;
		ТипКолонки = ?(ТипОбластиЧисло, ОписаниеТиповЧисло, ОписаниеТиповСтрока);
		
		НоваяКолонкаТаблицы = ТаблицаСостава.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		
	КонецЦикла;
	
	НачальноеКоличествоСтрок = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	Для Инд = 1 По НачальноеКоличествоСтрок Цикл
		ТаблицаСостава.Добавить();
	КонецЦикла;
	
	СтруктураМногострочнойЧасти.Вставить("Состав", ТаблицаСостава);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + " г.");
	ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + " г.");
	
	ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату", "На " + Формат(мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода", "На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему", "На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницыОтчета() Экспорт
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;
		
		Если Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Найти(ИмяСтраницыПанели) <> Неопределено Тогда
			Если ПоказатьСтраницу = 0 Тогда
				Элементы.ОсновнаяПанель.ПодчиненныеЭлементы[ИмяСтраницыПанели].Видимость = Ложь;
				ИмеютсяСкрытые = Истина;
			Иначе
				Элементы.ОсновнаяПанель.ПодчиненныеЭлементы[ИмяСтраницыПанели].Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета =РеквизитФормыВЗначение("мДеревоВыбранныхСтраниц", Тип("ТаблицаЗначений")).Скопировать();
	
	КнопкиНастройки = Элементы.Кнопки.КнопкаНастройкаСтраниц;
	
	ИсходныйТекст   = "Настройка";
	
	Если ИмеютсяСкрытые Тогда
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)...";
	Иначе
		КнопкиНастройки.Текст = ИсходныйТекст + "...";
	КонецЕсли;
	
	СформироватьСписокПодменюНавигации();
	СформироватьСписокПодменюАвторасчета();
	
КонецПроцедуры // ПоказатьСтраницыОтчета()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	Элементы.ПолеВыбораВидСдачиОтчетности.Значение = ВидСдачиОтчетности;

КонецПроцедуры // УстановитьВидСдачиОтчетности()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПеренумероватьСтрокиРасшифровки()
	
	ПеренумероватьСтрокиРасшифровкиБаланса();
	ПеренумероватьСтрокиРасшифровкиОПУ();
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиБаланса()
	
	ПолеТабличногоДокумента = мБаланс;
	ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
			НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
			
			Если ЭтоБалансНекоммерческойОрганизации И НомерСтроки = 15302 Тогда
				НомерСтроки = 15301;
			КонецЕсли;
			
			Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
				Если Строка2Уровня.ВключатьВОтчет Тогда
					ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
					НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
					ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
					
					КодСтроки = Формат(НомерСтроки, "ЧГ=0");
					
					ОбластьНомера = ПолеТабличногоДокумента.Области[ИмяОбластиНомера];
					ОбластьНомера.Текст = КодСтроки;
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиОПУ()
	
	ПолеТабличногоДокумента = мФормаОтчета;
	ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
						
						КодСтроки = Формат(НомерСтроки, "ЧГ=0");
						
						ОбластьНомера = ПолеТабличногоДокумента.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Вычитаемые показатели (в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными).
	
	// Бухгалтерский баланс
	Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
	КонецЕсли;
	
	// Отчет о прибылях и убытках.
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241005");
	
	// Отчет об изменениях капитала
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100310004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100320004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100330004");
	
	
	// Отчет о движении денежных средств.
	СписокВычитаемыхСтрок = "4120, 4121, 4122, 4123, 4124, 4129"
	                      + ", 4220, 4221, 4222, 4223, 4224, 4229"
	                      + ", 4320, 4321, 4322, 4323, 4329";
	МассивВычитаемыхСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	СписокВычитаемыхДопСтрок = "4120, 4220, 4320";
	МассивВычитаемыхДопСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
	КонецЦикла;
	
	// Отчет о целевом использовании полученных средств.
	СписокВычитаемыхСтрок = "6310, 6311, 6312, 6313, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350, 6300";
	МассивВычитаемыхСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокВычитаемыхСтрок, ",");
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	// Виртуальные вычитаемые многострочные показатели, необходимые для представления
	// фиксированных и вписываемых дополнительных строк как единого массива строк.
	Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
	КонецЕсли;
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241004");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241005");
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ДобавитьСтрокуРасшифровки(ОбщиеПараметры, ИмяОбластиПоказателя, НаименованиеРасшифровки = "", ЗнакСоставляющей, СодержаниеСоставляющей, ЗначениеСоставляющей, Счет1 = Неопределено, Счет2 = Неопределено);
	
	ИмяОтчета = ОбщиеПараметры.ИмяОтчета;
	ДатаНачалаПериодаОтчета = ОбщиеПараметры.ДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета = ОбщиеПараметры.ДатаКонцаПериодаОтчета;
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, ЗнакСоставляющей, СодержаниеСоставляющей, ЗначениеСоставляющей, Счет1, Счет2, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ИмяОтчета);
	
КонецПроцедуры


// Процедура предназначена для заполнения значения показателя суммой показателей по списку или шаблону в заданном поле табличного документа
// и внесения полученной суммы в указанный показатель.
// При использовании шаблона, из суммируемых показателей исключается показатель, в который будет заноситься полученная сумма.
//
// Параметры
//  ПолеТабличногоДокумента  - Элемент формы типа ПолеТабличногоДокумента
//		Указатель на элемент формы в котором размещены именованные области
//  Показатель - Строка
//		Имя области в которую будет помещена полученная сумма
//  СуммируемыеПоказатели  - Строка
//		Список имен областей, разделенных запятой, подлежащих суммированию
// 		имя области может быть задано в виде шаблона вида <начальные символы имени>+<*>
// 		Если перед именем области указать знак "-", тогда значение этой области будет вычтено из суммы
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьСуммуПоказателей(ПолеТабличногоДокумента, Показатель, Знач СуммируемыеПоказатели, Округлять = Истина)

	МассивИменОбластей = Новый Массив;
	
	Пока Истина Цикл
		ПозицияРазделителя = Найти(СуммируемыеПоказатели, ",");
		Если ПозицияРазделителя = 0 Тогда
			ИмяОбласти = СокрЛП(СуммируемыеПоказатели);
			СуммируемыеПоказатели = "";
		Иначе 
			ИмяОбласти = СокрЛП(Лев(СуммируемыеПоказатели, ПозицияРазделителя - 1));
			СуммируемыеПоказатели = Сред(СуммируемыеПоказатели, ПозицияРазделителя + 1)
		КонецЕсли;
		
		
		Если Найти(ИмяОбласти, "*") > 0 Тогда
			// обрабатываем шаблон имен показателей
			ПозицияРазделителя = Найти(ИмяОбласти, "*");
			СтрокаШаблона = Лев(ИмяОбласти, ПозицияРазделителя - 1);
			Если Лев(ИмяОбласти, 1) = "-" Тогда
				МодификаторЗначения = "-";
				СтрокаШаблона = Сред(СтрокаШаблона, 2);
			Иначе
				МодификаторЗначения = "";
			КонецЕсли;
			
			Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
				Если Найти(Область.Имя, СтрокаШаблона) = 1 И Область.Имя <> Показатель Тогда
					МассивИменОбластей.Добавить(МодификаторЗначения + Область.Имя);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			МассивИменОбластей.Добавить(ИмяОбласти);
			
		КонецЕсли;
	
		Если ПустаяСтрока(СуммируемыеПоказатели) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПоказателей = 0;
	Для Каждого ИмяОбласти из МассивИменОбластей Цикл
		
		Если Лев(ИмяОбласти, 1) = "-" Тогда
			ИмяПоказателя = СокрЛП(Сред(ИмяОбласти, 2));
			МножительПоказателя = -1;
		Иначе
			ИмяПоказателя = ИмяОбласти;
			МножительПоказателя = 1;
		КонецЕсли;
		
		Если Округлять Тогда
			ЗначениеПоказателя = МножительПоказателя * ОкруглитьЧислоПоФормату(ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение);
		Иначе
			ЗначениеПоказателя = МножительПоказателя * ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение;
		КонецЕсли;
		
		СуммаПоказателей = СуммаПоказателей + ЗначениеПоказателя;
	КонецЦикла;
	
	ПолеТабличногоДокумента.Области[Показатель].Значение = СуммаПоказателей;

КонецПроцедуры // СуммаОкругленныхПоказателей()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьСуммуПоказателей(ПолеТабличногоДокумента, СтрокаПоказателей, Округлять = Ложь)
	
	ВременнаяСтрокаПоказателей = СтрЗаменить(СтрокаПоказателей, " ", ""); // удалим пробелы
	
	МассивПрямыхАдресов = Новый Массив;
	МассивШаблонов = Новый Массив;
	МассивИсключений = Новый Массив;
	
	Пока НЕ ПустаяСтрока(ВременнаяСтрокаПоказателей) Цикл
		ПозицияРазделителя = Найти(ВременнаяСтрокаПоказателей, ",");
		Если ПозицияРазделителя > 0 Тогда
			ИмяПоказателя = Лев(ВременнаяСтрокаПоказателей, ПозицияРазделителя - 1);
			ВременнаяСтрокаПоказателей = Сред(ВременнаяСтрокаПоказателей, ПозицияРазделителя + 1);
		Иначе 
			ИмяПоказателя = ВременнаяСтрокаПоказателей;
			ВременнаяСтрокаПоказателей = "";
		КонецЕсли;
		
		Если Лев(ИмяПоказателя, 1) =  "!" Тогда
			МассивИсключений.Добавить(ИмяПоказателя);
		ИначеЕсли Найти(ИмяПоказателя, "*") > 0 ИЛИ Найти(ИмяПоказателя, "?") > 0 Тогда
			МассивШаблонов.Добавить(ИмяПоказателя);
		Иначе
			МассивПрямыхАдресов.Добавить(ИмяПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПоказателей = 0;
	
	Если МассивПрямыхАдресов.Количество() > 0 Тогда
		Для Каждого ИмяОбласти Из МассивПрямыхАдресов Цикл
			Если Лев(ИмяОбласти, 1) = "-" Тогда
				СуммаПоказателей = СуммаПоказателей - ПолеТабличногоДокумента.Области[Сред(ИмяОбласти, 2)].Значение;
			Иначе
				СуммаПоказателей = СуммаПоказателей + ПолеТабличногоДокумента.Области[ИмяОбласти].Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивШаблонов.Количество() > 0 Тогда
		// Перебираем области табличного документа
		Для Каждого Область из ПолеТабличногоДокумента.Области Цикл 
			
			СпособСложения = ПолучитьСпособСложенияПоШаблону(Область.Имя, МассивШаблонов, МассивИсключений);
			
			Если СпособСложения > 0 Тогда
				СуммаПоказателей = СуммаПоказателей + ?(Округлять, ОкруглитьЧислоПоФормату(Область.Значение), Область.Значение);
			ИначеЕсли СпособСложения < 0 Тогда
				СуммаПоказателей = СуммаПоказателей - ?(Округлять, ОкруглитьЧислоПоФормату(Область.Значение), Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаПоказателей;
	
КонецФункции // ПолучитьСуммуПоказателей()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьСпособСложенияПоШаблону(ИмяОбласти, МассивШаблонов, МассивИсключений)

	СпособСложения = 0;
	
	// Исключение показателей имеют приоритет
	Для Каждого Шаблон Из МассивИсключений Цикл
		СтрокаШаблона = Сред(Шаблон, 2);
		Если ИмяОбласти = СтрокаШаблона Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Шаблон Из МассивШаблонов Цикл
		// обрабатываем префиксы шаблонов
		Если Лев(Шаблон, 1) = "!" Тогда
			// шаблоны исключения обработаны в предыдущем цикле
			Продолжить;
		ИначеЕсли Лев(Шаблон, 1) = "-" Тогда
			ВероятныйСпособСложения = -1;
			СтрокаШаблона = Сред(Шаблон, 2);
		Иначе
			ВероятныйСпособСложения = 1;
			СтрокаШаблона = Шаблон;
		КонецЕсли;
		
		// Если шаблон завершается на "*" тогда обрезаем имя области для стравнения
		ПозицияАстериска = Найти(СтрокаШаблона, "*");
		Если ПозицияАстериска > 0 Тогда
			СравниваемоеИмя = Лев(ИмяОбласти, ПозицияАстериска - 1);
			СтрокаШаблона = Лев(СтрокаШаблона, ПозицияАстериска - 1);
		КонецЕсли;
		
		// Если шаблон содержит "?" то в тех же самых позициях в имени области для сравнения производим замену на "?"
		Если Найти(СтрокаШаблона, "?") > 0 Тогда
			Для Позиция = 1 По СтрДлина(СтрокаШаблона) Цикл
				Если Сред(СтрокаШаблона, Позиция, 1) = "?" Тогда
					СтрокаШаблона = Лев(СтрокаШаблона, Позиция - 1) + "?" + Сред(СтрокаШаблона, Позиция + 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяОбласти = СтрокаШаблона Тогда
			Возврат ВероятныйСпособСложения;
		КонецЕсли;
		
	КонецЦикла;

	Возврат СпособСложения;
	
КонецФункции // ПолучитьСпособСложенияПоШаблону()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
&НаКлиенте
Функция СКД(Знач Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
&НаКлиенте
Функция СКК(Знач Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // СКК()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
&НаКлиенте
Функция СКДР(Счет)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
&НаКлиенте
Функция СККР(Счет)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

&НаКлиенте
Функция ДО(Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // ДО()

&НаКлиенте
Функция КО(Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;
	
	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
&НаКлиенте
Функция СНД(Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
&НаКлиенте
Функция СНК(Знач Счет, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		Если мСчет[Счет] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + Счет + " в соответствии счетов");
		КонецЕсли;
		Счет = мСчет[Счет];
	КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);
	КонецЕсли;

	Возврат Итог;

КонецФункции

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
&НаКлиенте
Функция ОБ(СчетД, СчетК, БухИтоги = Неопределено)

	Перем Итог;

	Если ТипЗнч(СчетД) = Тип("Строка") Тогда
		Если мСчет[СчетД] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + СчетД + " в соответствии счетов");
		КонецЕсли;
		СчетД = мСчет[СчетД];
	КонецЕсли;
	
	Если ТипЗнч(СчетК) = Тип("Строка") Тогда
		Если мСчет[СчетК] = Неопределено Тогда
			Предупреждение("Ошибка. Не определен счет " + СчетК + " в соответствии счетов");
		КонецЕсли;
		СчетК = мСчет[СчетК];
	КонецЕсли;

	Если БухИтоги = Неопределено Тогда
		Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	Иначе
		Итог = БухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
	КонецЕсли;

	Возврат Итог;

КонецФункции

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)Экспорт
	
	Перем ТекТабличноеПоле;
	Перем ОписаниеМногострочнойЧасти;
	
	Если СтруктураМногострочныхЧастей.Свойство(ИдГруппы, ОписаниеМногострочнойЧасти) Тогда
		ТекТабличноеПоле = Элементы[ОписаниеМногострочнойЧасти.ИмяПоляТабличногоДокумента];
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

// Создает новую строку многострочного раздела.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяСтраница = Элементы.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = Элементы["ПолеТабличногоДокумента" + ТекущаяСтраница];
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя = ПолучитьИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
	
	ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	
	ТекущийЭлемент = ТекТабличноеПоле;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с именем области многострочной части в таблице
	ИдентификаторМногострочнойЧасти = СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	
	ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	ПолеТабличногоДокумента = Элементы[ОписаниеМногострочнойЧасти.ИмяПоляТабличногоДокумента];
	
	// Если количество строк достигло предела, то добавления не производится.
	КоличествоСтрокВМногострочнойЧасти = ОписаниеМногострочнойЧасти.Состав.Количество();
	Если ЛОЖЬ И ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок <> 0
	   И КоличествоСтрокВМногострочнойЧасти >= ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок Тогда
		Сообщить("Невозможно добавить строку многострочного раздела: достигнуто максимальное количество.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если Найти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ Найти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
	
	Если ПолеТабличногоДокумента.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ПолеТабличногоДокумента.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ПолеТабличногоДокумента.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ПолеТабличногоДокумента.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	// За основу для копирования используется последняя строка многострочного раздела.
	ИмяВерхнегоЭлементаСтроки = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + КоличествоСтрокВМногострочнойЧасти;
	ИмяНижнегоЭлементаСтроки  = ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + КоличествоСтрокВМногострочнойЧасти;
	
	ОбластьВставляемойСтрокиВерх = ПолеТабличногоДокумента.Области[ИмяВерхнегоЭлементаСтроки].Верх;
	ОбластьВставляемойСтрокиНиз  = ПолеТабличногоДокумента.Области[ИмяНижнегоЭлементаСтроки].Низ;
	
	ОбластьВставляемойСтроки = ПолеТабличногоДокумента.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
	
	// Добавляем строку к макету и назначаем имена областям показателей.
	ПолеТабличногоДокумента.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
	Смещение = ВысотаСтроки * КоличествоСтрокВМногострочнойЧасти;
	
	Для Каждого Колонка Из ОписаниеМногострочнойЧасти.Состав.Колонки Цикл
		ОсноваИмениПоказателя = Колонка.Имя;
		ИсходнаяОбластьПоказателя = ПолеТабличногоДокумента.Области[ОсноваИмениПоказателя + "_1"];
		
		ОбластьПоказателяНовойСтроки = ПолеТабличногоДокумента.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
		                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
		ИмяОбластиНовойСтроки = ОсноваИмениПоказателя + "_" + Строка(КоличествоСтрокВМногострочнойЧасти + 1);
		ОбластьПоказателяНовойСтроки.Имя = ИмяОбластиНовойСтроки;
		
		Если ПолеТабличногоДокумента.Области[ИмяОбластиНовойСтроки].СодержитЗначение Тогда
			ОбластьПоказателяНовойСтроки.Значение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Назначаем новую именнованную область многострочной части.
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьДляИменования = ПолеТабличногоДокумента.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ВысотаСтроки, );
		ОбластьДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
	КонецЕсли;
	
	// Зафиксируем увеличение многострочной части в структуре описаний.
	ОписаниеМногострочнойЧасти.Состав.Добавить();
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти);
	
	// Установим первое поле добавленной строки текущим.
	НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
	ОсноваИмениПоказателя = ОписаниеМногострочнойЧасти.Состав.Колонки[0].Имя;
	ИмяОбластиДляФокусаВвода = ОсноваИмениПоказателя + "_" + НомерПоследнейСтроки;
	ПолеТабличногоДокумента.ТекущаяОбласть = ПолеТабличногоДокумента.Области[ИмяОбластиДляФокусаВвода];
	
	Модифицированность = Истина;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти)
	
	Перем Кодификаторы;
	Перем Заголовки;
	
	ПолеТабличногоДокумента = Элементы[СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента];
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб")
				   И СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок)
				   И МаксимальноеКоличествоСтрок <> 0 Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ПолеТабличногоДокумента.Области[Кодификатор.Область + "_" + Инд];
					ОбластьСКодом.Текст = Формат(Кодификатор.Код + Инд - 1, "ЧГ=0");
				КонецЦикла;
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ПолеТабличногоДокумента.Области[Кодификатор.Область + "_" + Инд];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ПолеТабличногоДокумента.Области[Кодификаторы.Область + "_" + Инд];
				ОбластьСКодом.Текст = Формат(Кодификаторы.Код + Инд - 1, "ЧГ=0");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Если в описании структуры встречаются поля с датами, то производится их заполнение
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ПолеТабличногоДокумента.Области[ЗаголовокСтроки.Область + "_" + Инд];
					ОбластьОтчета.Текст = ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПеренумероватьСтрокиИЗаполнитьЗначенияМногострочнойЧасти()

&НаКлиенте
Процедура УдалитьДополнительнуюСтроку()
	
	ТекущаяСтраница = Элементы.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = Элементы["ПолеТабличногоДокумента" + ТекущаяСтраница];
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	ИмяПоказателяБезСчетчика = ПолучитьИмяПоказателяБезСчетчика(ИмяПоказателя);
	
	ПоказательЕстьВСтруктуреМногострочныхЧастей = (СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика] <> Неопределено);
	
	УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя)

	// Идентификатор многострочной части должен совпадать с областью многострочной части в таблице
	ИмяПоказателяБезСчетчика = ПолучитьИмяПоказателяБезСчетчика(ИмяПоказателя);
	ИдентификаторМногострочнойЧасти = СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];

	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	ПолеТабличногоДокумента = Элементы[СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента];

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// Номер строки удаляемой многострочной части определим по имени выделенной ячейки
	НомерУдаляемойСтроки = Число(Сред(ИмяПоказателя, Найти(ИмяПоказателя, "_") + 1));
	ИндексСтрокиТаблицы = НомерУдаляемойСтроки - 1;

	Если СтруктураМногострочнойЧасти.Состав.Количество() > СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Тогда
		
		ПеремещатьФокусВвода = (НомерУдаляемойСтроки = СтруктураМногострочнойЧасти.Состав.Количество());
		
		УдаляемаяОбластьВерх = ПолеТабличногоДокумента.Области[СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + НомерУдаляемойСтроки].Верх;
		УдаляемаяОбластьНиз  = ПолеТабличногоДокумента.Области[СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + НомерУдаляемойСтроки].Низ;
		ВысотаСтроки = УдаляемаяОбластьНиз - УдаляемаяОбластьВерх + 1;
		УдаляемаяОбласть = ПолеТабличногоДокумента.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
		ПолеТабличногоДокумента.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование областей многострочной части.
		Для Инд = НомерУдаляемойСтроки + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
			Для Каждого Колонка Из СтруктураМногострочнойЧасти.Состав.Колонки Цикл
				ОсноваИмениОбласти = Колонка.Имя;
				ПереименуемаяОбласть = ПолеТабличногоДокумента.Области[ОсноваИмениОбласти + "_" + Инд];
				ПереименуемаяОбласть.Имя = ОсноваИмениОбласти + "_" + (Инд - 1);
			КонецЦикла;
		КонецЦикла;
		
		СтруктураМногострочнойЧасти.Состав.Удалить(ИндексСтрокиТаблицы);
		
		Если ПеремещатьФокусВвода Тогда
			// Установим первое поле добавленной строки текущим.
			НомерПоследнейСтроки = СтруктураМногострочнойЧасти.Состав.Количество();
			ОсноваИмениПоказателя = СтруктураМногострочнойЧасти.Состав.Колонки[0].Имя;
			ИмяБудущейТекущейОбласти = ОсноваИмениПоказателя + "_" + НомерПоследнейСтроки;
			ПолеТабличногоДокумента.ТекущаяОбласть = ПолеТабличногоДокумента.Области[ИмяБудущейТекущейОбласти];
		КонецЕсли;
		
	Иначе
		Для Инд = 1 По СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Цикл
			Для Каждого Колонка Из СтруктураМногострочнойЧасти.Состав.Колонки Цикл
				ИмяОчищаемойОбласти = Колонка.Имя + "_" + Инд;
				ОчищаемаяОбласть = ПолеТабличногоДокумента.Области[ИмяОчищаемойОбласти];
				Если ОчищаемаяОбласть.СодержитЗначение Тогда
					Если ТипЗнч(ОчищаемаяОбласть.Значение) = Тип("Строка") Тогда
						ОчищаемаяОбласть.Значение = "";
					Иначе
						ОчищаемаяОбласть.Значение = 0;
					КонецЕсли;
				Иначе
					ОчищаемаяОбласть.Текст = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти);

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	// Подлежат обновлению следующие структуры:
	// - пользовательские настройки вариантов заполнения таблиц.
	
	// Эталонные модели вариантов автозаполнения таблиц по макету состава показателей.
	МакетСоставаПоказателей = Объект.ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		
		ИмяСтраницы = Отчет.Значение.ИмяСтраницы;
		ИмяОбласти = Отчет.Значение.ИмяСекцииПоказателей;
		
		ТекОбласть    = МакетСоставаПоказателей.Области[ИмяОбласти];
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  ); // имя ячейки (код показателя)
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    ); // вариант заполнения ячейки
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   ); // вычисленное по данным ИБ значение ячейки
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   ); // величина автокорректировки значения ячейки
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 ); // примечание к ячейке
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// В предыдущей версии формы по данной странице не были заданы варианты автозаполнения.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// В новой версии формы не предусмотрено задание вариантов автозаполнения для текущей страницы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для Каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							                             ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							                             ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							                               И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла =РеквизитФормыВЗначение("ЭлементМассива", Тип("ТаблицаЗначений")).Скопировать();
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = Элементы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			Элементы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		Элементы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		Элементы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		Элементы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		Элементы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура управляет показом в форме периода построения отчета,
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПоказатьПериод()

	// Период в заголовке отчета
	Если Месяц(мДатаКонцаПериодаОтчета) = 1 Тогда 
		СтрПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		СтрПериодОтчета = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = " Бухгалтерская отчетность ДУ (" + СтрПериодОтчета + ")";
	
	//БАЛАНС
	// Период в заголовке баланса
	мБаланс.Области.ДатаБаланса.Значение = "на " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ДатаКонцаПрошлогоГода 		= Дата(Год(мДатаКонцаПериодаОтчета) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода 	= Дата(Год(мДатаКонцаПериодаОтчета) - 2, 12, 31);
	
	ЗаголовокДатаОтчетная 				= "На " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода 		= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода 	= "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	мБаланс.Области.ДатаОтчетная.Значение 				= ЗаголовокДатаОтчетная;
	мБаланс.Области.ДатаОтчетная2.Значение 				= ЗаголовокДатаОтчетная;
	мБаланс.Области.ДатаКонцаПрошлогоГода.Значение 		= ЗаголовокДатаКонцаПрошлогоГода;
	мБаланс.Области.ДатаКонцаПрошлогоГода2.Значение 	= ЗаголовокДатаКонцаПрошлогоГода;
	мБаланс.Области.ДатаКонцаПозапрошлогоГода.Значение 	= ЗаголовокДатаКонцаПозапрошлогоГода;
	мБаланс.Области.ДатаКонцаПозапрошлогоГода2.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	
	// Период в списке кодов в форме баланса
	мБаланс.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мБаланс.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	ДатаКонцаПериодаОтчета = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мФормаОтчета.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//Заголовки таблиц
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	мФормаОтчета.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	мФормаОтчета.Области.ДатаОтчетногоПериода2.Значение = ЗаголовокДатаОтчетногоПериода;
	
	мФормаОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	мФормаОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
	//ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА
	ДатаКонцаПериодаОтчета 		= мДатаКонцаПериодаОтчета;
	ДатаКонцаПрошлогоГода 		= Дата(Год(мДатаКонцаПериодаОтчета) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода 	= Дата(Год(мДатаКонцаПериодаОтчета) - 2, 12, 31);
	
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	ПолеТаблДокументаОИК.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	ПолеТаблДокументаОИК.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ПолеТаблДокументаОИК.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	ПолеТаблДокументаОИК.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//Заголовки таблиц
	ПолеТаблДокументаОИК.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ПолеТаблДокументаОИК.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ПолеТаблДокументаОИК.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ПолеТаблДокументаОИК.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
	ПолеТаблДокументаОИК.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
	
	ЗаголовокДатаОтчетная 				= "На " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПрошлогоГода 		= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	ЗаголовокДатаКонцаПозапрошлогоГода 	= "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";

	ПолеТаблДокументаОИК.Области.ДатаКорректировокПозапрошлогоГода.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	ПолеТаблДокументаОИК.Области.ДатаКорректировокПрошлогоГода.Значение = ЗаголовокДатаКонцаПрошлогоГода;
	ПолеТаблДокументаОИК.Области.ПериодКорректировокПрошлогоГода.Значение = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
	
	ПолеТаблДокументаОИК.Области.ДатаАктивовПозапрошлогоГода.Значение = ЗаголовокДатаКонцаПозапрошлогоГода;
	ПолеТаблДокументаОИК.Области.ДатаАктивовПрошлогоГода.Значение = ЗаголовокДатаКонцаПрошлогоГода;
	ПолеТаблДокументаОИК.Области.ДатаАктивовПериодаОтчета.Значение = ЗаголовокДатаОтчетная;
	
	//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
	ДатаКонцаПериодаОтчета = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	ПолеТаблДокументаОДДС.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	ПолеТаблДокументаОДДС.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ПолеТаблДокументаОДДС.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	ПолеТаблДокументаОДДС.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//Заголовки таблиц
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	ПолеТаблДокументаОДДС.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	ПолеТаблДокументаОДДС.Области.ДатаОтчетногоПериода2.Значение = ЗаголовокДатаОтчетногоПериода;
	
	ПолеТаблДокументаОДДС.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	ПолеТаблДокументаОДДС.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;

	//ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ ПОЛУЧЕННЫХ СРЕДСТВ
	ДатаКонцаПериодаОтчета = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	мОЦИПС.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в списке кодов в форме отчета
	мОЦИПС.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	мОЦИПС.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	мОЦИПС.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'дд'");

	//Заголовки таблиц
	ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
	ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
	
	мОЦИПС.Области.ДатаОтчетногоПериода.Значение = ЗаголовокДатаОтчетногоПериода;
	
	мОЦИПС.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = ЗаголовокДатаОтчетногоПериодаПрошлогоГода;

	//РАСЧЕТ ОЦЕНКИ СТОИМОСТИ ЧИСТЫХ АКТИВОВ АКЦИОНЕРНОГО ОБЩЕСТВА
	ДатаКонцаПериодаОтчета = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
		СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		СтрПериод = "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;  

	ПериодОтчета = " за " + СтрПериод;

	// Период в заголовке
	//мРасчетАктивов.Области.ПериодОтчета.Значение = ПериодОтчета;
	
КонецПроцедуры // ПоказатьПериод()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетности()

	ЗаполнитьПериодыВРазделахОтчетностиПояснения1();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения2();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения3();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения4();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения5();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения6();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения8();
	ЗаполнитьПериодыВРазделахОтчетностиПояснения9();

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения1()

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ПолеТаблДокументаПояснения1.Области.ЗаПериодОтчетногоГода5100.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТаблДокументаПояснения1.Области.ЗаПериодПредыдущегоГода5110.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТаблДокументаПояснения1.Области.НаОтчетнуюДату12.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТаблДокументаПояснения1.Области.НаКонецПредыдущегоГода12.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТаблДокументаПояснения1.Области.НаКонецГодаПредшествующегоПредыдущему12.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ПолеТаблДокументаПояснения1.Области.НаОтчетнуюДату13.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТаблДокументаПояснения1.Области.НаКонецПредыдущегоГода13.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТаблДокументаПояснения1.Области.НаКонецГодаПредшествующегоПредыдущему13.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ПолеТаблДокументаПояснения1.Области.ЗаПериодОтчетногоГода5140.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТаблДокументаПояснения1.Области.ЗаПериодПредыдущегоГода5150.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТаблДокументаПояснения1.Области.ЗаПериодОтчетногоГода5160.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТаблДокументаПояснения1.Области.ЗаПериодПредыдущегоГода5170.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТаблДокументаПояснения1.Области.ЗаПериодОтчетногоГода5180.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТаблДокументаПояснения1.Области.ЗаПериодПредыдущегоГода5190.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения2()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения2;

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5200.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5210.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5220.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5230.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода23.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода23.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.НаОтчетнуюДату24.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода24.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему24.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения3()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения3;

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5301.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5311.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5305.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5315.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5300.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5310.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.НаОтчетнуюДату32.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода32.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему32.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения4()
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения4;
	
	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];
	
	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5400.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5420.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5401.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5421.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5402.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5422.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5403.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5423.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5404.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5424.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5405.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5425.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5406.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5426.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5407.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5427.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ПолеТабличногоДокумента.Области.НаОтчетнуюДату42.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода42.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему42.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения5()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5501.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5521.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5502.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5522.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5503.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5523.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5504.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5524.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5511.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5531.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5512.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5532.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5513.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5533.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5514.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5534.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5500.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5520.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.НаОтчетнуюДату52.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода52.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему52.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5551.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5571.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5552.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5572.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5553.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5573.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5554.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5574.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5560.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5580.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5561.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5581.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5562.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5582.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5563.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5583.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5564.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5584.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5565.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5585.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5566.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5586.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5550.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5570.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.НаОтчетнуюДату54.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода54.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему54.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения6()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения6;

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода6.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода6.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения8()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения8;

	ЗаголовокНаОтчетнуюДату                        = ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ПолеТабличногоДокумента.Области.НаОтчетнуюДату8.Текст                        = ЗаголовокНаОтчетнуюДату;
	ПолеТабличногоДокумента.Области.НаКонецПредыдущегоГода8.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ПолеТабличногоДокумента.Области.НаКонецГодаПредшествующегоПредыдущему8.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения9()

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения9;

	ЗаголовокЗаПериодОтчетногоГода   = ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода9.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода9.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ПолеТабличногоДокумента.Области.ЗаПериодОтчетногоГода5910.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ПолеТабличногоДокумента.Области.ЗаПериодПредыдущегоГода5920.Текст = ЗаголовокЗаПериодПредыдущегоГода;


КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Объект.Организация  = Неопределено) Или (Объект.Организация = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	Если (Объект.Клиент  = Неопределено) Или (Объект.Клиент = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Контрагенты")) Тогда
		Возврат
	КонецЕсли;
	
	//// Составляем список данных, необходимых для вывода в декларацию
	//Сведения = Новый СписокЗначений;
	//
	//Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	//	Сведения.Добавить("", "ИННЮЛ"); // ИНН
	//	
	//	Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
	//	
	//	Сведения.Добавить("", "ОКПО");
	//	Сведения.Добавить("", "ОКВЭД");
	//	Сведения.Добавить("", "ОснВидДеят");
	//	Сведения.Добавить("", "ОКОПФ");
	//	Сведения.Добавить("", "ОКФС");
	//	Сведения.Добавить("", "ФормСобств");
	//	Сведения.Добавить("", "КодОКОНХ");
	//	
	//	Сведения.Добавить("", "ОргПравФорм");
	//	Сведения.Добавить("", мТипАдреса);
	//	Сведения.Добавить("", "ПолныйАдрЮР");
	//КонецЕсли;
	//
	//Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	//
	//Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, Сведения);

	СведенияОКлиенте = ПолучитьСведенияКлиента();
	
	// Инициализируем переменные
	ИННЮЛ = ""; // ИНН
	НаимЮЛПол = ""; // Полное наименование 
	ОКПО = "";
	ОКВЭД = "";
	ПолныйАдрЮР = "";
	ОснВидДеят = "";
	ФормСобств = "";
	ОКОПФ = "";
	ОКФС = "";
	КодОКОНХ = "";
	ОргПравФорм1 = "";
	ПолныйАдрПочт = "";
	
	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	
	СведенияОКлиенте.Свойство("ИННЮЛ", ИННЮЛ);
	СведенияОКлиенте.Свойство("НаимЮЛПол", НаимЮЛПол);
	СведенияОКлиенте.Свойство("ОКПО", ОКПО);
	СведенияОКлиенте.Свойство("ОКВЭД", ОКВЭД);
	СведенияОКлиенте.Свойство("ОКОПФ", ОКОПФ);
	СведенияОКлиенте.Свойство("ОКФС", ОКФС);
	СведенияОКлиенте.Свойство("ОснВидДеят", ОснВидДеят);
	СведенияОКлиенте.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
	СведенияОКлиенте.Свойство("ФормСобств", ФормСобств);
	СведенияОКлиенте.Свойство("КодОКОНХ", КодОКОНХ);
	СведенияОКлиенте.Свойство("ОргПравФорм", ОргПравФорм1);
	СведенияОКлиенте.Свойство("ПолныйАдрПочт", ПолныйАдрПочт);
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	// Обновим только то, что зависит от даты подписи
	мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
	мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;
	
	мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
	мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
	
	ПолеТаблДокументаОИК.Области.ОргДиректор.Значение  = ФИОРук;
	ПолеТаблДокументаОИК.Области.ОргБухгалтер.Значение = ФИОБух;
	
	ПолеТаблДокументаОДДС.Области.ОргДиректор.Значение  = ФИОРук;
	ПолеТаблДокументаОДДС.Области.ОргБухгалтер.Значение = ФИОБух;
	
	мОЦИПС.Области.ОргДиректор.Значение  = ФИОРук;
	мОЦИПС.Области.ОргБухгалтер.Значение = ФИОБух;
	
	мРасчетАктивов.Области.ОргДиректор.Значение  = ФИОРук;
	мРасчетАктивов.Области.ОргБухгалтер.Значение = ФИОБух;
	
	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	мИННЮЛ = ИННЮЛ;
	
	мБаланс.Области.ОргИНН.Значение = мИННЮЛ;
	мФормаОтчета.Области.ОргИНН.Значение = мИННЮЛ;
	ПолеТаблДокументаОДДС.Области.ОргИНН.Значение = мИННЮЛ;
	мОЦИПС.Области.ОргИНН.Значение = мИННЮЛ;
	ПолеТаблДокументаОИК.Области.ОргИНН.Значение = мИННЮЛ;
	
	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		мБаланс.Области.ОргНазв.Значение = НаимЮЛПол;
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
		ПолеТаблДокументаОДДС.Области.ОргНазв.Значение = НаимЮЛПол;
		мОЦИПС.Области.ОргНазв.Значение = НаимЮЛПол;
		ПолеТаблДокументаОИК.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	// Работаем с ФИО руководителя
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКПО.Значение)) Тогда
		
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Объект.Организация) Тогда
			мБаланс.Области.ОргКодОКПО.Значение  = "";
			мФормаОтчета.Области.ОргКодОКПО.Значение  = "";
			ПолеТаблДокументаОДДС.Области.ОргКодОКПО.Значение = "";
			мОЦИПС.Области.ОргКодОКПО.Значение = "";
			ПолеТаблДокументаОИК.Области.ОргКодОКПО.Значение = "";
		Иначе
			мБаланс.Области.ОргКодОКПО.Значение  = ОКПО;
			мФормаОтчета.Области.ОргКодОКПО.Значение  = ОКПО;
			ПолеТаблДокументаОДДС.Области.ОргКодОКПО.Значение = ОКПО;
			мОЦИПС.Области.ОргКодОКПО.Значение = ОКПО;
			ПолеТаблДокументаОИК.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКВЭД.Значение)) Тогда
		мБаланс.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		мФормаОтчета.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		ПолеТаблДокументаОДДС.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		мОЦИПС.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		ПолеТаблДокументаОИК.Области.ОргКодОКВЭД.Значение = ОКВЭД;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФорма.Значение)) Тогда
		мБаланс.Области.ОргФорма.Значение = ОргПравФорм1;
		мФормаОтчета.Области.ОргФорма.Значение = ОргПравФорм1;
		ПолеТаблДокументаОДДС.Области.ОргФорма.Значение = ОргПравФорм1;
		мОЦИПС.Области.ОргФорма.Значение = ОргПравФорм1;
		ПолеТаблДокументаОИК.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргОтрасль.Значение)) Тогда
		мБаланс.Области.ОргОтрасль.Значение = ОснВидДеят;
		мФормаОтчета.Области.ОргОтрасль.Значение = ОснВидДеят;
		ПолеТаблДокументаОДДС.Области.ОргОтрасль.Значение = ОснВидДеят;
		мОЦИПС.Области.ОргОтрасль.Значение = ОснВидДеят;
		ПолеТаблДокументаОИК.Области.ОргОтрасль.Значение = ОснВидДеят;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКОПФ.Значение)) Тогда
		мБаланс.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		мФормаОтчета.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		ПолеТаблДокументаОДДС.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		мОЦИПС.Области.ОргКодОКОПФ.Значение = ОКОПФ;
		ПолеТаблДокументаОИК.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргКодОКФС.Значение)) Тогда
		мБаланс.Области.ОргКодОКФС.Значение = ОКФС;
		мФормаОтчета.Области.ОргКодОКФС.Значение = ОКФС;
		ПолеТаблДокументаОДДС.Области.ОргКодОКФС.Значение = ОКФС;
		мОЦИПС.Области.ОргКодОКФС.Значение = ОКФС;
		ПолеТаблДокументаОИК.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргФормаСобств.Значение)) Тогда
		мБаланс.Области.ОргФормаСобств.Значение = ФормСобств;
		мФормаОтчета.Области.ОргФормаСобств.Значение = ФормСобств;
		ПолеТаблДокументаОДДС.Области.ОргФормаСобств.Значение = ФормСобств;
		мОЦИПС.Области.ОргФормаСобств.Значение = ФормСобств;
		ПолеТаблДокументаОИК.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мБаланс.Области.ОргПочтАдрес.Значение)) Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолныйАдрПочт) Тогда
			мБаланс.Области.ОргПочтАдрес.Значение = "";
			ЮридическийАдрес = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "ПолныйАдрЮР").ПолныйАдрЮР;
			Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
				мБаланс.Области.ОргПочтАдрес.Значение = ЮридическийАдрес;
				мТипАдреса = "ПолныйАдрЮР";
				мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "АдрЮР").АдрЮР;
			КонецЕсли;
		Иначе
			мБаланс.Области.ОргПочтАдрес.Значение = ПолныйАдрПочт;
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргДиректор.Значение)) Тогда
		мБаланс.Области.ОргДиректор.Значение  = ФИОРук;
		мФормаОтчета.Области.ОргДиректор.Значение  = ФИОРук;
		ПолеТаблДокументаОДДС.Области.ОргДиректор.Значение  = ФИОРук;
		мОЦИПС.Области.ОргДиректор.Значение  = ФИОРук;
		ПолеТаблДокументаОИК.Области.ОргДиректор.Значение  = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(мБаланс.Области.ОргБухгалтер.Значение)) Тогда
		мБаланс.Области.ОргБухгалтер.Значение = ФИОБух;
		мФормаОтчета.Области.ОргБухгалтер.Значение = ФИОБух;
		ПолеТаблДокументаОДДС.Области.ОргБухгалтер.Значение = ФИОБух;
		мОЦИПС.Области.ОргБухгалтер.Значение = ФИОБух;
		ПолеТаблДокументаОИК.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

&НаСервере
Функция ПолучитьСведенияКлиента()
	
	Сведения = Новый Структура;
	
	Если (Объект.Клиент  = Неопределено) Или (Объект.Клиент = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Контрагенты")) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Объект.Клиент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.ОКОПФ,
	|	Контрагенты.КодОКВЭД,
	|	Контрагенты.КодПоОКПО,
	|	Контрагенты.ИНН,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление,
	|	Контрагенты.КодОКОНХ,
	|	Контрагенты.КодОКФС,
	|	КлассификаторОКОПФ.Код КАК КодОКОПФ,
	|	Контрагенты.НаименованиеОКВЭД,
	|	Контрагенты.НаименованиеОКФС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКОПФ КАК КлассификаторОКОПФ
	|		ПО Контрагенты.ОКОПФ = КлассификаторОКОПФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка = &Клиент
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)";
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Сведения.Вставить("ИННЮЛ", Результат.ИНН);	
	Сведения.Вставить("НаимЮЛПол", Результат.НаименованиеПолное);
	Сведения.Вставить("ОКПО", Результат.КодПоОКПО);
	Сведения.Вставить("ОКВЭД", Результат.КодОКВЭД);
	Сведения.Вставить("ОснВидДеят", Результат.НаименованиеОКВЭД);
	Сведения.Вставить("ОКОПФ", Результат.КодОКОПФ);
	Сведения.Вставить("ОКФС", Результат.КодОКФС);
	Сведения.Вставить("ФормСобств", Результат.НаименованиеОКФС);
	Сведения.Вставить("КодОКОНХ", Результат.КодОКОНХ);
	Сведения.Вставить("ОргПравФорм", Результат.ОКОПФ);
	Сведения.Вставить("ПолныйАдрПочт", Результат.Представление);
	Сведения.Вставить("ПолныйАдрЮР", Результат.Представление);
	
	//	Сведения.Добавить("", "ИННЮЛ"); // ИНН
	//	
	//	Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
	//	
	//	Сведения.Добавить("", "ОКПО");
	//	Сведения.Добавить("", "ОКВЭД");
	//	Сведения.Добавить("", "ОснВидДеят");
	//	Сведения.Добавить("", "ОКОПФ");
	//	Сведения.Добавить("", "ОКФС");
	//	Сведения.Добавить("", "ФормСобств");
	//	Сведения.Добавить("", "КодОКОНХ");
	//	
	//	Сведения.Добавить("", "ОргПравФорм");
	//	Сведения.Добавить("", мТипАдреса);
	//	Сведения.Добавить("", "ПолныйАдрЮР");
	
    Возврат Сведения;
	
КонецФункции


// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПроверитьТочность()
	
	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда

		Если Объект.ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Баланс: при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			Объект.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда

		Если Объект.ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			Объект.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда

		Если Объект.ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			Объект.ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Объект.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Объект.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Объект.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;

	ПоказатьКодЕИ();

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = Элементы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + Формат(Инд, "ЧГ=0");
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = мСтрокаФормата;
		Область.ЭлементУправления.КнопкаВыбора = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	//для работы с новым типом многострочных частей вызов процедуры общего модуля
	//заменен на свою процедуру

	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если мБезОткрытияФормы Или мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Элементы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		ИначеЕсли ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Элементы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Элементы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Элементы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					
				КонецЕсли;

				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				ИначеЕсли ВариантЗаполнения = 5 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
	         |Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	Если ЕстьИзмененияВариантыЗаполнения Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Перем ТекущаяОбласть;
	
	//РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы[ТекущаяСтраница].Имя;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = Элементы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;
	
	// Переопределяем название пункта меню "Заполнить отчет <...>"
	КнопкаЗаполнения = Элементы.Кнопки.ЗаполнитьОтчет;
	Если Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Баланс" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить бухгалтерский баланс";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "ФормаОтчета" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить отчет о прибылях и убытках";
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОИК" Тогда
	//	КнопкаЗаполнения.Доступность = Истина;
	//	КнопкаЗаполнения.Текст = "Заполнить отчет об изменениях капитала";
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОДДС" Тогда
	//	КнопкаЗаполнения.Доступность = Истина;
	//	КнопкаЗаполнения.Текст = "Заполнить отчет о движении денежных средств";
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОЦИПС" Тогда
	//	КнопкаЗаполнения.Доступность = Ложь;
	//	КнопкаЗаполнения.Текст = "Заполнить отчет о целевом использовании полученных средств";
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "РасчетАктивов" Тогда
	//	КнопкаЗаполнения.Доступность = Ложь;
	//	КнопкаЗаполнения.Текст = "Заполнить расчет оценки стоимости чистых активов";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения1" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 1 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения2" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 2 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения3" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 3 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения4" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 4 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения5" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 5 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения6" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 6 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения7" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 7 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения8" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 8 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения9" Тогда
		КнопкаЗаполнения.Доступность = Истина;
		КнопкаЗаполнения.Текст = "Заполнить раздел 9 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "ДополнительныеФайлы" Тогда
		КнопкаЗаполнения.Доступность = Ложь;
		КнопкаЗаполнения.Текст = "Автозаполнение сведений о файлах не предусмотрено";
	Иначе
		КнопкаЗаполнения.Доступность = Ложь;
		КнопкаЗаполнения.Текст = "Заполнение отчета не предусмотрено";
	КонецЕсли;
	
	// Переопределяем название пункта меню "Очистить отчет <...>"
	КнопкаЗаполнения = Элементы.Кнопки.ОчиститьОтчет;
	Если Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Баланс" Тогда
		КнопкаЗаполнения.Текст = "Очистить бухгалтерский баланс";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "ФормаОтчета" Тогда
		КнопкаЗаполнения.Текст = "Очистить отчет о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОИК" Тогда
	//	КнопкаЗаполнения.Текст = "Очистить отчет об изменениях капитала";
	//	КнопкаЗаполнения.Доступность = Истина;
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОДДС" Тогда
	//	КнопкаЗаполнения.Текст = "Очистить отчет о движении денежных средств";
	//	КнопкаЗаполнения.Доступность = Истина;
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "ОЦИПС" Тогда
	//	КнопкаЗаполнения.Текст = "Очистить отчет о целевом использовании полученных средств";
	//	КнопкаЗаполнения.Доступность = Истина;
	//ИначеЕсли Элемент.Страницы[ТекущаяСтраница].Имя = "РасчетАктивов" Тогда
	//	КнопкаЗаполнения.Текст = "Очистить расчет оценки стоимости чистых активов";
	//	КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения1" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 1 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения2" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 2 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения3" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 3 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения4" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 4 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения5" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 5 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения6" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 6 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения7" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 7 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения8" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 8 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "Пояснения9" Тогда
		КнопкаЗаполнения.Текст = "Очистить раздел 9 пояснений к бухгалтерскому балансу и отчету о прибылях и убытках";
		КнопкаЗаполнения.Доступность = Истина;
	ИначеЕсли Элемент.ПодчиненныеЭлементы[ТекущаяСтраница].Имя = "ДополнительныеФайлы" Тогда
		КнопкаЗаполнения.Текст = "Очистить сведения о дополнительных файлах";
		КнопкаЗаполнения.Доступность = Истина;
	Иначе
		КнопкаЗаполнения.Текст = "Очистка отчета не предусмотрена";
		КнопкаЗаполнения.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочнойЧасти) // , СтруктураМногострочнойЧасти
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	ПолеТабличногоДокумента = Элементы[СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента];
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	Если ПолеТабличногоДокумента.Области.Найти(ИдентификаторМногострочнойЧасти) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ПолеТабличногоДокумента.Области[ИдентификаторМногострочнойЧасти].Верх;
		ИсходнаяОбластьСтрокНиз  = ПолеТабличногоДокумента.Области[ИдентификаторМногострочнойЧасти].Низ;
		ПолеТабличногоДокумента.Области[ИдентификаторМногострочнойЧасти].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	СтрокВМакете = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	ИзменениеОбластиСтрокПоВысоте = 0;
	
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	Пока СтрокВМакете < КоличествоСтрокВМногострочнойЧасти Цикл
		// За основу для копирования используется последняя строка многострочного раздела в макете.
		ИмяВерхнегоЭлементаСтроки = СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрокВМакете;
		ИмяНижнегоЭлементаСтроки  = СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + СтрокВМакете;
		
		ОбластьВставляемойСтрокиВерх = ПолеТабличногоДокумента.Области[ИмяВерхнегоЭлементаСтроки].Верх;
		ОбластьВставляемойСтрокиНиз  = ПолеТабличногоДокумента.Области[ИмяНижнегоЭлементаСтроки].Низ;
		
		ОбластьВставляемойСтроки = ПолеТабличногоДокумента.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
		
		ПолеТабличногоДокумента.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		
		ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ИзменениеОбластиСтрокПоВысоте = ИзменениеОбластиСтрокПоВысоте + ВысотаСтроки;
		Смещение = ВысотаСтроки * СтрокВМакете;
		
		// Назначаем имена областям показателей на базе первой строки многострочной части.
		Для Каждого Колонка Из СтруктураМногострочнойЧасти.Состав.Колонки Цикл
			ОсноваИмениПоказателя = Колонка.Имя;
			ИсходнаяОбластьПоказателя = ПолеТабличногоДокумента.Области[ОсноваИмениПоказателя + "_1"];
			
			ОбластьПоказателяНовойСтроки = ПолеТабличногоДокумента.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
			                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
			ОбластьПоказателяНовойСтроки.Имя = ОсноваИмениПоказателя + "_" + Строка(СтрокВМакете + 1);
		КонецЦикла;
		
		СтрокВМакете = СтрокВМакете + 1;
		
	КонецЦикла;
	
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьСтрокДляИменования = ПолеТабличногоДокумента.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ИзменениеОбластиСтрокПоВысоте, );
		ОбластьСтрокДляИменования.Имя = ИдентификаторМногострочнойЧасти;
	КонецЕсли;

	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ПостфиксИмениОбласти = "_" + Инд;
		ИндексСтроки = Инд - 1;
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Получить(ИндексСтроки);
		Для Каждого Колонка Из СтруктураМногострочнойЧасти.Состав.Колонки Цикл
			ЗначениеВТаблице = СтрокаМногострочнойЧасти[Колонка.Имя];
			ИмяОбласти = Колонка.Имя + ПостфиксИмениОбласти;
			Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
			Если Область.СодержитЗначение Тогда
				Область.Значение = ЗначениеВТаблице;
			Иначе
				Область.Текст = ЗначениеВТаблице;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти);
	
КонецПроцедуры

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//   ЗаписьВОтчет       - Булево, Истина, осуществлять запись показателей в отчет, Ложь - ничего не делать.
//                        Необходимо для режима консолидации отчета.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя, ЗаписьВОтчет = Ложь)

	// В случае, отчет заполняется с использованием режима консолидации, тогда анализируем флаг ЗаписьВОтчет и мБезКонсолидации.
	Если (НЕ ЗаписьВОтчет) И (НЕ мБезКонсолидации) Тогда
		// Добавим показатель в таблицу итогового расчета при заполнении отчета за несколько организаций.
		НовСтр = мТаблицаИтоговыхПоказателейПриКонсолидации.Добавить();
		НовСтр.ИмяПоказателя = ИмяПоказателя;
		НовСтр.Сумма = ЗначениеПоказателя;

		Возврат;

	КонецЕсли;

	ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Элементы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОчиститьТабличноеПоле(ПолеТабличногоДокумента)
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	
	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если Элементы[СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента] <> ПолеТабличногоДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		// Удаляем пользовательские строки многострочного раздела
		Если СтруктураГруппы.Количество() > 1 Тогда
			
			Для Инд = 2 По СтруктураГруппы.Количество() Цикл
				НомерСтроки = СтруктураГруппы.Количество() - Инд + 2;
				
				УдаляемаяОбластьВерх = ПолеТабличногоДокумента.Области[СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + НомерСтроки].Верх;
				УдаляемаяОбластьНиз  = ПолеТабличногоДокумента.Области[СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + "_" + НомерСтроки].Верх;
				УдаляемаяОбласть = ПолеТабличногоДокумента.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
				
				ПолеТабличногоДокумента.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить();
		
	КонецЦикла;
	
	Для Инд = 0 По ПолеТабличногоДокумента.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ПолеТабличногоДокумента.Области[Инд];
		
		// Ячейки не подлежащие очистке
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОчиститьСтраницуДополнительныхФайлов()
	
	ИмяФайлаПояснительнойЗаписки = "";
	ИмяФайлаАудиторскогоЗаключения = "";
	ИмяФайлаЗаявленияРевизионногоСоюза = "";
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
// Параметры:
//  ОчищаемыйОтчет - строка, задает имя отчета для очистки
//					 если значение содержит пустую строку, то очищаются все отчеты
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура Очистить(ОчищаемыйОтчет = "") Экспорт
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Баланс" Тогда
		ОчиститьТабличноеПоле(мБаланс);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ФормаОтчета" Тогда
		ОчиститьТабличноеПоле(мФормаОтчета);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ОИК" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаОИК);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ОДДС" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаОДДС);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ОЦИПС" Тогда
		ОчиститьТабличноеПоле(мОЦИПС);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "РасчетАктивов" Тогда
		ОчиститьТабличноеПоле(мРасчетАктивов);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения1" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения1);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения2" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения2);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения3" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения3);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения4" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения4);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения5" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения5);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения6" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения6);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения7" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения7);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения8" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения8);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения9" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения9);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "Пояснения9" Тогда
		ОчиститьТабличноеПоле(ПолеТаблДокументаПояснения9);
	КонецЕсли;
	
	Если ПустаяСтрока(ОчищаемыйОтчет) ИЛИ ОчищаемыйОтчет = "ДополнительныеФайлы" Тогда
		ОчиститьСтраницуДополнительныхФайлов();
	КонецЕсли;
	
	Расчет(); // Очистка авторасчитываемых ячеек
	
	// Очищаем расшифровку.
	Если НЕ ПустаяСтрока(ОчищаемыйОтчет) Тогда
		Если ОчищаемыйОтчет <> "ДополнительныеФайлы" Тогда
			Для Каждого ОбластьОтчета Из Элементы["ПолеТабличногоДокумента" + ОчищаемыйОтчет].Области Цикл
				Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					Продолжить;
				КонецЕсли;
				СтрокиРасшифровки = СпП.НайтиСтроки(Новый Структура("ИмяЯчейки", ОбластьОтчета.Имя));
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					СпП.Удалить(СтрокаРасшифровки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СпП.Очистить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // Очистить()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)

	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции // ОтображатьВТомЧисле()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[МногострочнаяЧасть].Состав;
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекущийРаздел = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(МногострочнаяЧасть);
		Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
			Если ЗначениеЗаполнено(ТекущийРаздел.Области[Колонка.Имя + "_1"].Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции // ОтображатьМногострочнуюЧасть()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв1"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв1" Тогда
		СкрытьОбластиПередПечатьюБаланс_2012Кв1(МассивСкрытыхОбластей);
	Иначе
		СкрытьОбластиПередПечатьюБаланс_2011Кв4(МассивСкрытыхОбластей);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СкрытьОбластиПередПечатьюБаланс_2011Кв4(МассивСкрытыхОбластей)
	
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = "П0001011199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11199"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П0001011299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11299"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11301, ДопСтрока11302, ДопСтрока11303, ДопСтрока11304, ДопСтрока11305, ДопСтрока11306, ДопСтрока11307, ДопСтрока11308");
	МногострочнаяЧасть = "П0001011399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11399"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11401, ДопСтрока11402, ДопСтрока11403, ДопСтрока11404");
	МногострочнаяЧасть = "П0001011499";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11499"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501");
	МногострочнаяЧасть = "П0001011599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11599"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001011699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11699"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701, ДопСтрока11702, ДопСтрока11703");
	МногострочнаяЧасть = "П0001011799";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока11799"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105, 
															 |ДопСтрока12106, ДопСтрока12107, ДопСтрока12108, ДопСтрока12109, ДопСтрока12110, 
															 |ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П0001012199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12199"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205, 
															 |ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П0001012299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12299"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305, 
															 |ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310");
	МногострочнаяЧасть = "П0001012399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12399"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405, 
															 |ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П0001012499";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12499"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505, 
															 |ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510, 
															 |ДопСтрока12511");
	МногострочнаяЧасть = "П0001012599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12599"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, ДопСтрока12605, 
															 |ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610");
	МногострочнаяЧасть = "П0001012699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока12699"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13199"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13299"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П0001013499";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13499"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13599"]);
	КонецЕсли;
	
	// Строка 1360
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П0001013699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13699"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013799";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока13799"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П0001014199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14199"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001014299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14299"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001014599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока14599"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105, 
															 |ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110, 
															 |ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П0001015199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15199"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205, 
															 |ДопСтрока15206, ДопСтрока15207, ДопСтрока15208");
	МногострочнаяЧасть = "П0001015299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15299"]);
	КонецЕсли;
	
	// Строка 1530
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П0001015399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15399"]);
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001015599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока15599"]);
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СкрытьОбластиПередПечатьюБаланс_2012Кв1(МассивСкрытыхОбластей)
	
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = "П1001001110";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1110"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П1001001120";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1120"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001130";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1130"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001140";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1140"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501, ДопСтрока11502, ДопСтрока11503, ДопСтрока11504, ДопСтрока11505, ДопСтрока11506, ДопСтрока11507, ДопСтрока11508");
	МногострочнаяЧасть = "П1001001150";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1150"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11601, ДопСтрока11602, ДопСтрока11603, ДопСтрока11604");
	МногострочнаяЧасть = "П1001001160";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1160"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701");
	МногострочнаяЧасть = "П1001001170";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1170"]);
	КонецЕсли;
	
	// Строка 1180
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001180";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1180"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1180"]);
	КонецЕсли;
	
	// Строка 1190
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11901, ДопСтрока11902, ДопСтрока11903");
	МногострочнаяЧасть = "П1001001190";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1190"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1190"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105, 
															 |ДопСтрока12106, ДопСтрока12107, ДопСтрока12108, ДопСтрока12109, ДопСтрока12110, 
															 |ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П1001001210";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1210"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205, 
															 |ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П1001001220";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1220"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305, 
															 |ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310");
	МногострочнаяЧасть = "П1001001230";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1230"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405, 
															 |ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П1001001240";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1240"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505, 
															 |ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510, 
															 |ДопСтрока12511");
	МногострочнаяЧасть = "П1001001250";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1250"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, ДопСтрока12605, 
															 |ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610");
	МногострочнаяЧасть = "П1001001260";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1260"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001310";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1310"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001320";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1320"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П1001001340";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1340"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1350"]);
	КонецЕсли;
	
	// Строка 1360
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001360";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1360"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001370";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1370"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П1001001410";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1410"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001420";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1420"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1450"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105, 
															 |ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110, 
															 |ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П1001001510";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1510"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205, 
															 |ДопСтрока15206, ДопСтрока15207, ДопСтрока15208");
	МногострочнаяЧасть = "П1001001520";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1520"]);
	КонецЕсли;
	
	// Строка 1530
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001530";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1530"]);
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001550";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мБаланс.Области["ДопСтрока1550"]);
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СкрытьОбластиПередПечатьюФормаОтчета()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;

	Если НЕ ИспользуютсяМакетыЕНВД() Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002100";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002200";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002300";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405, 
															 |ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410, 
															 |ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415, 
															 |ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420, 
															 |ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424, ДопСтрока23425");
	МногострочнаяЧасть = "П1001002340";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505, 
															 |ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510, 
															 |ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515, 
															 |ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520, 
															 |ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525, 
															 |ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530, 
															 |ДопСтрока23521, ДопСтрока23532, ДопСтрока23533");
	МногострочнаяЧасть = "П1001002350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002421";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002430";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602");
	МногострочнаяЧасть = "П1001002460";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(мФормаОтчета.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      НаименованиеЛиста - Имя выводимого на печать листа;
//      ОриентацияЛиста - ориентация страницы;
//      ИмяТабличногоПоля - имя табличного поля, который выводится на печать;
//      ИмяОбластиТаблПоля - имя области дабличного документа, выводимой на печать;
//      ВидПечати - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//		ЧтоИскать - ???
//
&НаКлиенте
Процедура ВывестиНаПечатьЛист(Парам1)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Скрываем области макетов отчетов, не предназначенные для вывода
	Если Парам1.ИмяТабличногоПоля = мБаланс.Имя Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли Парам1.ИмяТабличногоПоля = мФормаОтчета.Имя Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюФормаОтчета();
	КонецЕсли;
		
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
	// Восстанавливаем скрытые области после формирования листов
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
КонецПроцедуры

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
&НаКлиенте
Процедура ВывестиНаПечатьЛистОбщая(Форма, СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");

	ИмяРаздела = Сред(ИмяТабличногоПоля, 24);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяРаздела);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
		
		Состояние(Форма.Заголовок + ". Формирование печатной формы " + ИмяЛиста + ". Лист №" + (КоличествоЛистовПоИмениЛиста(Форма.мПечатныеФормы, ИмяЛиста) + 1));
		
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			Форма.мПечатныеФормы.Добавить(Эл, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разбивает табличный документ, соответствующий разделу с именем ИмяРаздела
// на части, ограниченные горизонтальным разделителем страниц, верхней или нижней границами
// табличного документа.
&НаСервере
Функция ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.Элементы["ПолеТабличногоДокумента" + ИмяРаздела];
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции // ПолучитьКартуЛистовРаздела()

// Возвращает список значений, содержащий печатные формы - листы формата A4, готовые к выводу на печать.
// Листы формируются на основании исходного табличного документа, параметры которого и другие настройки
// печати хранятся в структуре СтруктураПараметровЛиста.
// Процедура рассчитана на печать разделов, содержащих одну или несколько многострочных частей.
&НаКлиенте
Функция ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 4 переход(а|ов) на сервер

	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;
	
	ИмяТабличногоПоля = "ПолеТабличногоДокумента" + ИмяРаздела;
	
	ТабличноеПоле = Форма.Элементы[ИмяТабличногоПоля];

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(Форма, ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = Ориентация;
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			//Если Рез = Ложь И Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			//	Продолжить
			//КонецЕсли;
			Если Рез <> Ложь ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		//ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
						//ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					//ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции // ВывестиНаПечатьЛистРаздела()

// Возвращает количество готовых к выводу на печать листов формата A4 для 
// раздела с именем ИмяЛиста. Сфомированные листы хранятся в списке значений мПечатныеФормы
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция КоличествоЛистовПоИмениЛиста(мПечатныеФормы, ИмяЛиста)
	КоличествоВхождений = 0;
	Для Каждого ЭлСп Из мПечатныеФормы Цикл
		Если ЭлСп.Представление = ИмяЛиста Тогда
			КоличествоВхождений = КоличествоВхождений + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоВхождений;
КонецФункции

// Возвращает массив имен многострочных частей табличного поля с именем ИмяТабличногоПоля.
// Поиск многострочных частей в табличном поле ограничивается верхней и нижней координатами - 
// Верх и Низ соответственно.
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция	ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Верх, Низ)
	ТаблДок = Форма.Элементы[ИмяТабличногоПоля];
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И Найти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей_Сервер(СтруктураПараметровЛиста, ИмяЛиста, ИмяТабличногоПоля, ИмяОбластиТаблПоля, ВидПечати, Верх, Низ, ПечатнаяФорма, Форма)

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
	
	ТабличноеПоле = Форма.Элементы[ИмяТабличногоПоля];
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
		КонецЕсли;
			
	КонецЦикла;
КонецФункции
 // ПолучитьКартуМногострочныхСекцийЛиста()

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
&НаКлиенте
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста, ПечатнаяФорма;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;

	ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей_Сервер(СтруктураПараметровЛиста, ИмяЛиста, ИмяТабличногоПоля, ИмяОбластиТаблПоля, ВидПечати, Верх, Низ, ПечатнаяФорма, Форма);		
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции // ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей()

// Возвращает координату нижней строки области с именем ИмяОбласти раздела с именем Раздел.
// Для областей, ограничивающих многострочные части раздела, возвращается координата
// нижней строки многострочной части.
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьНизМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.Элементы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
КонецФункции //ПолучитьНизМногострочнойЧасти()

// Возвращает строки многострочной части в виде табличных документов
// Параметры:
// Форма - объект Форма из которого вызвана печать
// Раздел - имя печатаемого раздела
// ИмяОбласти - имя области многострочной части
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьОбластиМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.Элементы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции // ПолучитьОбластиМногострочнойЧасти()

// Для заданной по номеру НомСтр строки многострочной части, описываемой в элементе 
// списка значений МногострочныеЧасти, формирует и возвращает табличный документ,
// в котором очищены ячейки, содержащие значения и не защищенные от изменения пользователем.
&НаСервере
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции // ПолучитьПустуюСтрокуМногострочнойЧасти()

// Возвращает максимальное количество строк многострочных частей,
// описываемых в структуре МногострочныеЧасти
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Проверяет является ли описываемая в элементе списка значений
// ЭлСпКоорд строка частью одной из многострочных частей, описываемых в 
// структуре МногострочныеЧасти
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Возвращает количество строк в одной "строке многострочной части" макета.
//
// Параметры:
//	ТабличноеПоле - ТабличныйДокумент или ПолеТабличногоДокумента для которого следует определить высоту
//					"строк многострочной части".
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 по 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ОбнулитьФиксированныеЧастиНаЛистах
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбнулитьФиксированныеЧастиНаЛистах

// Для раздела с именем Раздел формирует таблицу значений, в которой перечисляются
// имена и вертикальные координаты областей - групп строк табличного документа, соответствующего
// данному разделу.
&НаСервере
Функция ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.Элементы["ПолеТабличногоДокумента" + Раздел];
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
КонецФункции //ПолучитьКартуИменованныхГруппСтрок()

// Проверяет принадлежность строки табличного документа по номеру, указанному
// в параметре СледСтрока, группе строк ГруппаСтрок табличного документа  
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ЕстьСоответствующаяОбластьГруппСтрок()

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",             ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе", ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);
	
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);
	
	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да
	
	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.МногострочностьВРазделе              = 28;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета"; // Отчет о прибылях и убытках
	СтрокаУровня1.МногострочностьВРазделе              = ?(ИспользуютсяМакетыЕНВД(), 18, 12);
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.МногострочностьВРазделе              = 6;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИПС"; // Отчет о целевом использовании полученных средств
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "РасчетАктивов";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения6";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения7";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения8";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения9";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Функция Печать_Сервер(мДеревоВыбранныхСтраниц, ЧтоИскать, ВидПечати)
	
	мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		ЭтоЗакладкаДополнительныхФайлов = СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы";
		Если ЭтоЗакладкаДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.Строки.Количество() > 0 Тогда
		
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);
				
				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;
				
				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
						
						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета =РеквизитФормыВЗначение("мДеревоВыбранныхСтраниц", Тип("ТаблицаЗначений")).Скопировать();

	мРежимПечати = Ложь;
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
КонецФункции
 // ФормироватьСтруктуруСвойствСтраниц()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Печать_Сервер(мДеревоВыбранныхСтраниц, ЧтоИскать, ВидПечати);

КонецПроцедуры // Печать()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаКлиенте
Функция Сохранить(Автосохранение = Ложь) Экспорт
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = Объект.Ссылка.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = Объект.Ссылка.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Объект.Организация;
	мСохраненныйДок.ДатаПодписи                = Объект.ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = Объект.ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = Объект.ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = ПредопределенноеЗначение("Перечисление.ВидыОтчетности.РегламентированнаяОтчетность");
	мСохраненныйДок.Комментарий                = КомментарийОбщий;
	мСохраненныйДок.Вид                        = Вариант;
	
	мВариант = Вариант;
	
	Если Объект.Организация <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		мСохраненныйДок.КодИМНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КодИМНС");
	КонецЕсли;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из Элементы.ОсновнаяПанель.ПодчиненныеЭлементы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = Элементы.Найти(ИмяТекТабличногоПоля);
		
		Если ТекТабличноеПоле <> Неопределено Тогда
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено); // мСтруктураМногострочныхРазделов в отчете не используется
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", мСохранятьРасшифровку);
	
	Если мСохранятьРасшифровку = Истина Тогда
		СписокСохранения.Вставить("Расшифровка", СпП);
	КонецЕсли;
	
	// Сохраним список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", мГруппаОрганизаций);
	
	//УИК	
	Клиент_ = Новый Структура("Клиент,ДоговорКлиента",Объект.Клиент,Объект.ДоговорКлиента);
	СписокСохранения.Вставить("ДанныеОКлиентеДУ", Клиент_);
	//ёУИК	
	// Сохраним тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", мАдресДляВыгрузки);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ПрименениеЕНВД", ПрименениеЕНВД);
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СоставДополнительныхСтрок);
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СтруктураМногострочныхЧастей);
	
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", ЭтоБалансНекоммерческойОрганизации);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки", ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения", ИмяФайлаАудиторскогоЗаключения);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", ИмяФайлаЗаявленияРевизионногоСоюза);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// сохраняем действующие настройки страниц
	мСохраненныйДок.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	
	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариантовАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Расшифровка;
	Перем СохраненнаяСтруктураМногострочныхЧастей;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Объект.Организация <> мСохраненныйДок.Организация
	   И Объект.Организация <> ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Объект.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Объект.Организация;
	Иначе
		Объект.Организация              = мСохраненныйДок.Организация;
	КонецЕсли;
	
	Объект.ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	Объект.ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	Объект.ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий         = мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаются только те настройки страниц, которые описаны в самом отчете.
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Для Каждого ЭлементДереваНастройкиСтраниц Из ДеревоНастройкиСтраниц.Строки Цикл
		НайденныйЭлементДереваСтраниц = мДеревоСтраницОтчета.Строки.Найти(ЭлементДереваНастройкиСтраниц.ИмяСтраницы, "ИмяСтраницы");
		Если НайденныйЭлементДереваСтраниц <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НайденныйЭлементДереваСтраниц, ЭлементДереваНастройкиСтраниц, , "Представление");
		КонецЕсли;
	КонецЦикла;
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	// Сведения многострочных разделов устаревшего механизма вносятся в описание нового механизма.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Если ТипЗнч(ДанныеМногострочныхРазделов) = Тип("Структура") Тогда
			Для Каждого ЭлементСохраненнойСтруктуры Из ДанныеМногострочныхРазделов Цикл
				Если СтруктураМногострочныхЧастей.Свойство(ЭлементСохраненнойСтруктуры.Ключ, ДанныеМногострочногоРаздела) Тогда
					СтруктураМногострочныхЧастей[ЭлементСохраненнойСтруктуры.Ключ].Состав = ЭлементСохраненнойСтруктуры.Значение.Скопировать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариантовАвтоЗаполнения;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", Расшифровка);
	Если Расшифровка <> Неопределено Тогда
		СпП = Расшифровка;
	КонецЕсли;
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
			ИсправитьРасшифровку(СпП);
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", мСохранятьРасшифровку);
	Если мСохранятьРасшифровку = Неопределено Тогда
		мСохранятьРасшифровку = Истина;
	КонецЕсли;
	Элементы.КнопкаСохранятьРасшифровку.Пометка = мСохранятьРасшифровку;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СписокСохранения.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		Для Каждого ЭлементСохраненнойСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			Если СтруктураМногострочныхЧастей.Свойство(ЭлементСохраненнойСтруктуры.Ключ, ДанныеМногострочногоРаздела) Тогда
				// В текущей реализации таблица служит только для определения количества строк многострочной части.
				СохраненныеДанныеМногострочногоРаздела = ЭлементСохраненнойСтруктуры.Значение.Состав;
				ДанныеМногострочногоРаздела = СтруктураМногострочныхЧастей[ЭлементСохраненнойСтруктуры.Ключ].Состав;
				ДанныеМногострочногоРаздела.Очистить();
				Для Инд = 1 По Макс(СохраненныеДанныеМногострочногоРаздела.Количество(), 1) Цикл
					ДанныеМногострочногоРаздела.Добавить();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ВывестиРазделВТабличныйДокумент(ИмяГруппы);
	КонецЦикла;
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ГруппаОрганизаций", мГруппаОрганизаций);
	Если мГруппаОрганизаций = Неопределено Тогда
		мГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	//УИК	
	ДанныеОКлиентеДУ = Новый Структура;
	СписокСохранения.Свойство("ДанныеОКлиентеДУ", ДанныеОКлиентеДУ);
	Если ДанныеОКлиентеДУ <> Неопределено Тогда
		Объект.Клиент               = ДанныеОКлиентеДУ.Клиент;
		Объект.ДоговорКлиента       = ДанныеОКлиентеДУ.ДоговорКлиента;
	КонецЕсли;
	//ёУИК
	
	СписокСохранения.Свойство("ТипАдреса", мТипАдреса);
	Если мТипАдреса = Неопределено Тогда
		мТипАдреса = "ПолныйАдрПочт";
	ИначеЕсли Найти(мТипАдреса, "Полный") = 0 Тогда
		мТипАдреса = "Полный" + мТипАдреса;
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", мАдресДляВыгрузки);
	Если мАдресДляВыгрузки = Неопределено Тогда
		Если мТипАдреса = "ПолныйАдрЮР" Тогда
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "АдрЮР").АдрЮР;
		Иначе
			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;
	КонецЕсли;
	
	Если Месяц(мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
			мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	// Восстанавливаем сведения о настройке состава дополнительных строк.
	СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СписокСохранения.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		// Используются настройки по умолчанию.
	ИначеЕсли Число(СоставДополнительныхСтрок.Версия) > Число (СохраненныйСоставДополнительныхСтрок.Версия) Тогда
		Если СохраненныйСоставДополнительныхСтрок.Модифицированность Тогда
			ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок);
		Иначе
			// Используются настройки по умолчанию новой версии.
		КонецЕсли;
	Иначе
		СоставДополнительныхСтрок = СохраненныйСоставДополнительныхСтрок;
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокДополнительныхФайлов = Неопределено;
	Если СписокСохранения.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов) И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки       = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения     = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		ИмяФайлаЗаявленияРевизионногоСоюза = СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
	КонецЕсли;
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		// Если страница не определена - пропускаем установку показателей этой страницы
		Если Элементы.Найти(ИмяТекТабличноеПоле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТабличноеПоле   = Элементы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя      = Показатель.Ключ;
			ЗначениеПоказателя = Показатель.Значение;
			
			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	УстановитьФорматВывода();
	
	мДеревоВыбранныхСтраниц =РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ТаблицаЗначений")).Скопировать();
	
	ПоказатьСтраницыОтчета();
	
	ПеренумероватьСтрокиРасшифровки();
	
	Расчет();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ИсправитьРасшифровку(ТаблицаРасшифровки)
	
	МассивСтрокНаУдаление = Новый Массив;
	
	Для Каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
		Если ПустаяСтрока(СтрокаРасшифровки.Раздел) Тогда
			Если НЕ ПустаяСтрока(СтрокаРасшифровки.Страница) Тогда
				СтрокаРасшифровки.Раздел = СтрокаРасшифровки.Страница;
				СтрокаРасшифровки.Страница = Неопределено;
			Иначе
				СтрокаРасшифровки.Раздел = "ФормаОтчета";
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРасшифровки.Сумма = Неопределено Тогда
			МассивСтрокНаУдаление.Добавить(СтрокаРасшифровки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
		ТаблицаРасшифровки.Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок)
	
	// Обновление настроек Бухгалтерского баланса.
	СохраненныйСоставДопСтрокБаланса = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс", СохраненныйСоставДопСтрокБаланса) Тогда
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопстрокБаланса.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденнаяСтрока = СоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти(ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Обновление настроек Отчета о прибылях и убытках. 
	СохраненныйСоставДопСтрокОПУ = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета", СохраненныйСоставДопСтрокОПУ) Тогда
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокОПУ.Строки Цикл
			
			ЭтоФиксированныеДопстроки = ПустаяСтрока(СтрокаУровня1.ТипСостава);
			
			Если ЭтоФиксированныеДопстроки Тогда
				Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
					ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
					НайденнаяСтрока = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти(ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденнаяСтрокаУровня1 = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти(СтрокаУровня1.ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
				Если НайденнаяСтрокаУровня1 <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрокаУровня1, СтрокаУровня1);
					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
						НоваяПользовательскаяСтрока = НайденнаяСтрокаУровня1.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПользовательскаяСтрока, СтрокаУровня2);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, Объект.ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
// Параметры
//  ТабличнаяОбласть - ЭлементыФормы ПолеТабличногоДокумента - позволяет ограничить расчет автовычисляемых показателей
// 					   только одним полем табличного документа.
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура Расчет(ПолеТабличногоДокумента = Неопределено)
	
	// Бухгалтерский баланс.
	Если АвторасчетПоказателей("Баланс")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мБаланс) Тогда
		РасчетБаланс();
	КонецЕсли;
	
	// Отчет о прибылях и убытках.
	Если АвторасчетПоказателей("ФормаОтчета")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мФормаОтчета) Тогда
		РасчетОПУ();
	КонецЕсли;
	
	// Отчет об изменениях капитала.
	Если АвторасчетПоказателей("ОИК")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаОИК) Тогда
		РасчетОИК();
	КонецЕсли;
	
	// Отчет о движении денежных средств.
	Если АвторасчетПоказателей("ОДДС")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаОДДС) Тогда
		РасчетОДДС();
	КонецЕсли;
	
	// Отчет о целевом использовании полученных средств.
	Если АвторасчетПоказателей("ОЦИПС")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мОЦИПС) Тогда
		РасчетОЦИПС();
	КонецЕсли;
	
	// Расчет оценки стоимости чистых активов акционерного общества.
	Если АвторасчетПоказателей("РасчетАктивов")
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = мРасчетАктивов ИЛИ ПолеТабличногоДокумента = мБаланс) Тогда
		РасчетАктивов();
	КонецЕсли;
	
	Если АвторасчетПоказателей("Пояснения3") 
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаПояснения3) Тогда
		РасчетПояснения3();
	КонецЕсли;
	
	Если АвторасчетПоказателей("Пояснения5") 
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5) Тогда
		РасчетПояснения5();
	КонецЕсли;
	
	Если АвторасчетПоказателей("Пояснения6") 
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаПояснения6) Тогда
		РасчетПояснения6();
	КонецЕсли;
	
	Если АвторасчетПоказателей("Пояснения7") 
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаПояснения7) Тогда
		РасчетПояснения7();
	КонецЕсли;
	
	Если АвторасчетПоказателей("Пояснения9") 
	   И (ПолеТабличногоДокумента = Неопределено ИЛИ ПолеТабличногоДокумента = ПолеТаблДокументаПояснения9) Тогда
		РасчетПояснения9();
	КонецЕсли;
	
КонецПроцедуры // Расчет()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетБаланс()
	
	ОкруглятьЗначенияПоказателей = Ложь;
	// Актив.
	
	// Строка 1100.
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв1"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв1" Тогда
		УстановитьСуммуПоказателей(мБаланс, "П000100110004", "П000100111004, П000100112004, П000100113004, П000100114004, П000100115004, П000100116004, П000100117004, П000100118004, П000100119004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110005", "П000100111005, П000100112005, П000100113005, П000100114005, П000100115005, П000100116005, П000100117005, П000100118005, П000100119005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110006", "П000100111006, П000100112006, П000100113006, П000100114006, П000100115006, П000100116006, П000100117006, П000100118006, П000100119006", ОкруглятьЗначенияПоказателей);
	Иначе
		УстановитьСуммуПоказателей(мБаланс, "П000100110004", "П000100111004, П000100112004, П000100113004, П000100114004, П000100115004, П000100116004, П000100117004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110005", "П000100111005, П000100112005, П000100113005, П000100114005, П000100115005, П000100116005, П000100117005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100110006", "П000100111006, П000100112006, П000100113006, П000100114006, П000100115006, П000100116006, П000100117006", ОкруглятьЗначенияПоказателей);
	КонецЕсли;
	
	// Строка 1200.
	УстановитьСуммуПоказателей(мБаланс, "П000100120004", "П000100121004, П000100122004, П000100123004, П000100124004, П000100125004, П000100126004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100120005", "П000100121005, П000100122005, П000100123005, П000100124005, П000100125005, П000100126005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100120006", "П000100121006, П000100122006, П000100123006, П000100124006, П000100125006, П000100126006", ОкруглятьЗначенияПоказателей);
	
	
	// Строка 1600.
	УстановитьСуммуПоказателей(мБаланс, "П000100160004", "П000100110004, П000100120004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100160005", "П000100110005, П000100120005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100160006", "П000100110006, П000100120006", ОкруглятьЗначенияПоказателей);
	
	// Пассив.
	
	// Строка 1300.
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		УстановитьСуммуПоказателей(мБаланс, "П000100130004", "П000100131004, П000100132004, П000100135004, П000100136004, П000100137004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130005", "П000100131005, П000100132005, П000100135005, П000100136005, П000100137005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130006", "П000100131006, П000100132006, П000100135006, П000100136006, П000100137006", ОкруглятьЗначенияПоказателей);
	Иначе
		УстановитьСуммуПоказателей(мБаланс, "П000100130004", "П000100131004, П000100132004, П000100134004, П000100135004, П000100136004, П000100137004", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130005", "П000100131005, П000100132005, П000100134005, П000100135005, П000100136005, П000100137005", ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(мБаланс, "П000100130006", "П000100131006, П000100132006, П000100134006, П000100135006, П000100136006, П000100137006", ОкруглятьЗначенияПоказателей);
	КонецЕсли;
	
	// Строка 1400.
	УстановитьСуммуПоказателей(мБаланс, "П000100140004", "П000100141004, П000100142004, П000100143004, П000100145004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100140005", "П000100141005, П000100142005, П000100143005, П000100145005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100140006", "П000100141006, П000100142006, П000100143006, П000100145006", ОкруглятьЗначенияПоказателей);
	
	// Строка 1500.
	УстановитьСуммуПоказателей(мБаланс, "П000100150004", "П000100151004, П000100152004, П000100153004, П000100154004, П000100155004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100150005", "П000100151005, П000100152005, П000100153005, П000100154005, П000100155005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100150006", "П000100151006, П000100152006, П000100153006, П000100154006, П000100155006", ОкруглятьЗначенияПоказателей);
	
	// Строка 1700.
	УстановитьСуммуПоказателей(мБаланс, "П000100170004", "П000100130004, П000100140004, П000100150004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100170005", "П000100130005, П000100140005, П000100150005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мБаланс, "П000100170006", "П000100130006, П000100140006, П000100150006", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетОПУ()
	
	ОкруглятьЗначенияПоказателей = Истина;
	
	//Сбор данных
	П000100211004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100211004.Значение);
	П000100212004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100212004.Значение);
	П000100221004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100221004.Значение);
	П000100222004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100222004.Значение);
	
	П000100211005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100211005.Значение);
	П000100212005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100212005.Значение);
	П000100221005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100221005.Значение);
	П000100222005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100222005.Значение);
	
	П000100231004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100231004.Значение);
	П000100232004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100232004.Значение);
	П000100233004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100233004.Значение);
	П000100234004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100234004.Значение);
	П000100235004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100235004.Значение);
	
	П000100231005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100231005.Значение);
	П000100232005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100232005.Значение);
	П000100233005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100233005.Значение);
	П000100234005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100234005.Значение);
	П000100235005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100235005.Значение);
	
	П000100241004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100241004.Значение);
	П000100243004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100243004.Значение);
	П000100245004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100245004.Значение);
	П000100246004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100246004.Значение);
	
	П000100241005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100241005.Значение);
	П000100243005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100243005.Значение);
	П000100245005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100245005.Значение);
	П000100246005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100246005.Значение);
	
	П000100240004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100240004.Значение);
	П000100251004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100251004.Значение);
	П000100252004 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100252004.Значение);
	
	П000100240005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100240005.Значение);
	П000100251005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100251005.Значение);
	П000100252005 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000100252005.Значение);
	
	//Расчеты
	П000100210004 = П000100211004 + П000100212004;
	П000100210005 = П000100211005 + П000100212005;
	
	П000100220004 = П000100210004 + П000100221004 + П000100222004;
	П000100220005 = П000100210005 + П000100221005 + П000100222005;
	
	П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
	П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
	
	П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
	П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
	
	П000100250004 = П000100240004 + П000100251004 + П000100252004;
	П000100250005 = П000100240005 + П000100251005 + П000100252005;
	
	//Запишем, что посчитали
	мФормаОтчета.Области.П000100210004.Значение = П000100210004;
	мФормаОтчета.Области.П000100210005.Значение = П000100210005;
	
	мФормаОтчета.Области.П000100220004.Значение = П000100220004;
	мФормаОтчета.Области.П000100220005.Значение = П000100220005;
	
	мФормаОтчета.Области.П000100230004.Значение = П000100230004;
	мФормаОтчета.Области.П000100230005.Значение = П000100230005;
	
	мФормаОтчета.Области.П000100240004.Значение = П000100240004;
	мФормаОтчета.Области.П000100240005.Значение = П000100240005;
	
	мФормаОтчета.Области.П000100250004.Значение = П000100250004;
	мФормаОтчета.Области.П000100250005.Значение = П000100250005;
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
		
		// отключаемые автозаполняемые строки расшифровки
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101") Тогда
			П000102110104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110104.Значение);
			П000102110105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110105.Значение);
		Иначе
			П000102110104 = 0;
			П000102110105 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102") Тогда
			П000102110204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110204.Значение);
			П000102110205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102110205.Значение);
		Иначе
			П000102110204 = 0;
			П000102110205 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201") Тогда
			П000102120104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120104.Значение);
			П000102120105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120105.Значение);
		Иначе
			П000102120104 = 0;
			П000102120105 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202") Тогда
			П000102120204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120204.Значение);
			П000102120205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102120205.Значение);
		Иначе
			П000102120204 = 0;
			П000102120205 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101") Тогда
			П000102210104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210104.Значение);
			П000102210105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210105.Значение);
		Иначе
			П000102210104 = 0;
			П000102210105 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102") Тогда
			П000102210204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210204.Значение);
			П000102210205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102210205.Значение);
		Иначе
			П000102210204 = 0;
			П000102210205 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201") Тогда
			П000102220104 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220104.Значение);
			П000102220105 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220105.Значение);
		Иначе
			П000102220104 = 0;
			П000102220105 = 0;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202") Тогда
			П000102220204 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220204.Значение);
			П000102220205 = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000102220205.Значение);
		Иначе
			П000102220204 = 0;
			П000102220205 = 0;
		КонецЕсли;
		
		// отключаемые расчитываемые строки расшифровки
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001") Тогда
			П000102100104 = П000102110104 + П000102120104;
			П000102100105 = П000102110105 + П000102120105;
		Иначе
			П000102100104 = 0;
			П000102100105 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102100104.Значение = П000102100104;
		мФормаОтчета.Области.П000102100105.Значение = П000102100105;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002") Тогда
			П000102100204 = П000102110204 + П000102120204;
			П000102100205 = П000102110205 + П000102120205;
		Иначе
			П000102100204 = 0;
			П000102100205 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102100204.Значение = П000102100204;
		мФормаОтчета.Области.П000102100205.Значение = П000102100205;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001") Тогда
			П000102200104 = П000102100104 + П000102210104 + П000102220104;
			П000102200105 = П000102100105 + П000102210105 + П000102220105;
		Иначе
			П000102200104 = 0;
			П000102200105 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102200104.Значение = П000102200104;
		мФормаОтчета.Области.П000102200105.Значение = П000102200105;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002") Тогда
			П000102200204 = П000102100204 + П000102210204 + П000102220204;
			П000102200205 = П000102100205 + П000102210205 + П000102220205;
		Иначе
			П000102200204 = 0;
			П000102200205 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102200204.Значение = П000102200204;
		мФормаОтчета.Области.П000102200205.Значение = П000102200205;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001") Тогда
			П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
			П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
		Иначе
			П000102300104 = 0;
			П000102300105 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102300104.Значение = П000102300104;
		мФормаОтчета.Области.П000102300105.Значение = П000102300105;
		
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002") Тогда
			П000102300204 = П000102200204;
			П000102300205 = П000102200205;
		Иначе
			П000102300204 = 0;
			П000102300205 = 0;
		КонецЕсли;
		мФормаОтчета.Области.П000102300204.Значение = П000102300204;
		мФормаОтчета.Области.П000102300205.Значение = П000102300205;
		
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетОИК()
	
	ОкруглятьЗначенияПоказателей = Истина;
	
	// Таблица 1
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100310008", "П000100310003, П000100310004, П000100310005, П000100310006, П000100310007", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321108", "П000100321107", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321208", "П000100321205, П000100321207", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321308", "П000100321305, П000100321307", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321408", "П000100321403, П000100321404, П000100321405", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321608", "П000100321603, П000100321604, П000100321605, П000100321606, П000100321607", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321003", "П000100321403, П000100321503, П000100321603", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321004", "П000100321404, П000100321504, П000100321604", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321005", "П000100321205, П000100321305, П000100321405, П000100321505, П000100321605", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321006", "П000100321606", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321007", "П000100321107, П000100321207, П000100321307, П000100321507, П000100321607", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100321008", "П000100321108, П000100321208, П000100321308, П000100321408, П000100321608", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322108", "П000100322107", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322208", "П000100322205, П000100322207", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322308", "П000100322305, П000100322307", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322408", "П000100322403, П000100322404, П000100322405, П000100322407", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322508", "П000100322503, П000100322504, П000100322505, П000100322507", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322608", "П000100322603, П000100322604, П000100322605, П000100322606, П000100322607", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322708", "П000100322707", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322008", "П000100322003, П000100322004, П000100322005, П000100322006, П000100322007", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100324007", "-П000100324006", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322003", "П000100322403, П000100322503, П000100322603", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322004", "П000100322404, П000100322504, П000100322604", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322005", "П000100322205, П000100322305, П000100322405, П000100322505, П000100322605", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322006", "П000100322606", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322007", "П000100322107, П000100322207, П000100322307, П000100322407, П000100322507, П000100322607, П000100322707", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100322008", "П000100322108, П000100322208, П000100322308, П000100322408, П000100322508, П000100322608, П000100322708", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100320008", "П000100320003, П000100320004, П000100320005, П000100320006, П000100320007", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331108", "П000100331107", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331208", "П000100331205, П000100331207", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331308", "П000100331305, П000100331307", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331408", "П000100331403, П000100331404, П000100331405", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331608", "П000100331603, П000100331604, П000100331605, П000100331606, П000100331607", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331003", "П000100331403, П000100331503, П000100331603", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331004", "П000100331404, П000100331504, П000100331604", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331005", "П000100331205, П000100331305, П000100331405, П000100331505, П000100331605", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331006", "П000100331606", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331007", "П000100331107, П000100331207, П000100331307, П000100331507, П000100331607", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100331008", "П000100331108, П000100331208, П000100331308, П000100331408, П000100331608", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332108", "П000100332107", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332208", "П000100332205, П000100332207", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332308", "П000100332305, П000100332307", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332408", "П000100332403, П000100332404, П000100332405, П000100332407", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332508", "П000100332503, П000100332504, П000100332505, П000100332507", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332608", "П000100332603, П000100332604, П000100332605, П000100332606, П000100332607", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332708", "П000100332707", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332003", "П000100332403, П000100332503, П000100332603", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332004", "П000100332404, П000100332504, П000100332604", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332005", "П000100332205, П000100332305, П000100332405, П000100332505, П000100332605", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332006", "П000100332606", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332007", "П000100332107, П000100332207, П000100332307, П000100332407, П000100332507, П000100332607, П000100332707", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100332008", "П000100332108, П000100332208, П000100332308, П000100332408, П000100332508, П000100332608, П000100332708", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100334007", "-П000100334006", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100330008", "П000100330003, П000100330004, П000100330005, П000100330006, П000100330007", ОкруглятьЗначенияПоказателей);
	
	// Таблица 2
	
	// блок строк +1
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100340105", "П000100340106, -П000100340103, -П000100340104", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100341106", "П000100341103, П000100341104, П000100341105", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100342106", "П000100342103, П000100342104, П000100342105", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350103", "П000100340103, П000100341103, П000100342103", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350104", "П000100340104, П000100341104, П000100342104", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350105", "П000100340105, П000100341105, П000100342105", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350106", "П000100350103, П000100350104, П000100350105", ОкруглятьЗначенияПоказателей);
	
	// многострочный блок +2..N
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей.ДопСтрока3400;
	КоличествоСтрок = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для НомерСтрокиБлока = 1 ПО КоличествоСтрок Цикл
		ПФБ = "_" + НомерСтрокиБлока; // постфикс блока
		
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100340006" + ПФБ, "П100100340003" + ПФБ + ", П100100340004" + ПФБ + ", П100100340005" + ПФБ, ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100341006" + ПФБ, "П100100341003" + ПФБ + ", П100100341004" + ПФБ + ", П100100341005" + ПФБ, ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100342006" + ПФБ, "П100100342003" + ПФБ + ", П100100342004" + ПФБ + ", П100100342005" + ПФБ, ОкруглятьЗначенияПоказателей);
		
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100350003" + ПФБ, "П100100340003" + ПФБ + ", П100100341003" + ПФБ + ", П100100342003" + ПФБ, ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100350004" + ПФБ, "П100100340004" + ПФБ + ", П100100341004" + ПФБ + ", П100100342004" + ПФБ, ОкруглятьЗначенияПоказателей);
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100350005" + ПФБ, "П100100340005" + ПФБ + ", П100100341005" + ПФБ + ", П100100342005" + ПФБ, ОкруглятьЗначенияПоказателей);
		
		УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П100100350006" + ПФБ, "П100100350003" + ПФБ + ", П100100350004" + ПФБ + ", П100100350005" + ПФБ, ОкруглятьЗначенияПоказателей);
	КонецЦикла;
	
	// заглавный блок
	// значения в суммируемых показателях уже прошли стадию округления, если это было необходимо
	П000100341003 = ПолеТаблДокументаОИК.Области.П000100341103.Значение;
	П000100341004 = ПолеТаблДокументаОИК.Области.П000100341104.Значение;
	П000100341005 = ПолеТаблДокументаОИК.Области.П000100341105.Значение;
	
	П000100342003 = ПолеТаблДокументаОИК.Области.П000100342103.Значение;
	П000100342004 = ПолеТаблДокументаОИК.Области.П000100342104.Значение;
	П000100342005 = ПолеТаблДокументаОИК.Области.П000100342105.Значение;
	
	Для НомерСтрокиБлока = 1 ПО КоличествоСтрок Цикл
		ПФБ = "_" + НомерСтрокиБлока; // постфикс блока
		
		П000100341003 = П000100341003 + ПолеТаблДокументаОИК.Области["П100100341003" + ПФБ].Значение;
		П000100341004 = П000100341004 + ПолеТаблДокументаОИК.Области["П100100341004" + ПФБ].Значение;
		П000100341005 = П000100341005 + ПолеТаблДокументаОИК.Области["П100100341005" + ПФБ].Значение;
		
		П000100342003 = П000100342003 + ПолеТаблДокументаОИК.Области["П100100342003" + ПФБ].Значение;
		П000100342004 = П000100342004 + ПолеТаблДокументаОИК.Области["П100100342004" + ПФБ].Значение;
		П000100342005 = П000100342005 + ПолеТаблДокументаОИК.Области["П100100342005" + ПФБ].Значение;
		
	КонецЦикла;
	
	ПолеТаблДокументаОИК.Области.П000100341003.Значение = П000100341003;
	ПолеТаблДокументаОИК.Области.П000100341004.Значение = П000100341004;
	ПолеТаблДокументаОИК.Области.П000100341005.Значение = П000100341005;
	
	ПолеТаблДокументаОИК.Области.П000100342003.Значение = П000100342003;
	ПолеТаблДокументаОИК.Области.П000100342004.Значение = П000100342004;
	ПолеТаблДокументаОИК.Области.П000100342005.Значение = П000100342005;
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100340005", "П000100340006, -П000100340003, -П000100340004", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100341006", "П000100341003, П000100341004, П000100341005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100342006", "П000100342003, П000100342004, П000100342005", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350003", "П000100340003, П000100341003, П000100342003", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350004", "П000100340004, П000100341004, П000100342004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350005", "П000100340005, П000100341005, П000100342005", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОИК, "П000100350006", "П000100350003, П000100350004, П000100350005", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетОДДС()
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100411003", "П000100411103,П000100411203,П000100411303,П100100411003_*,П000100411903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100411004", "П000100411104,П000100411204,П000100411304,П100100411004_*,П000100411904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100412003", "П000100412103,П000100412203,П000100412303,П000100412403,П100100412003_*,П000100412903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100412004", "П000100412104,П000100412204,П000100412304,П000100412404,П100100412004_*,П000100412904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100410003", "П000100411003,П000100412003");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100410004", "П000100411004,П000100412004");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100421003", "П000100421103,П000100421203,П000100421303,П000100421403,П100100421003_*,П000100421903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100421004", "П000100421104,П000100421204,П000100421304,П000100421404,П100100421004_*,П000100421904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100422003", "П000100422103,П000100422203,П000100422303,П000100422403,П100100422003_*,П000100422903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100422004", "П000100422104,П000100422204,П000100422304,П000100422404,П100100422004_*,П000100422904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100420003", "П000100421003,П000100422003");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100420004", "П000100421004,П000100422004");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100431003", "П000100431103,П000100431203,П000100431303,П000100431403,П100100431003_*,П000100431903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100431004", "П000100431104,П000100431204,П000100431304,П000100431404,П100100431004_*,П000100431904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100432003", "П000100432103,П000100432203,П000100432303,П100100432003_*,П000100432903");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100432004", "П000100432104,П000100432204,П000100432304,П100100432004_*,П000100432904");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100430003", "П000100431003,П000100432003");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100430004", "П000100431004,П000100432004");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100440003", "П000100410003,П000100420003,П000100430003");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100440004", "П000100410004,П000100420004,П000100430004");
	
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100450003", "П000100440003,П000100445003,П000100449003");
	УстановитьСуммуПоказателей(ПолеТаблДокументаОДДС, "П000100450004", "П000100440004,П000100445004,П000100449004");
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетОЦИПС()
	
	ОкруглятьЗначенияПоказателей = Ложь;
	
	УстановитьСуммуПоказателей(мОЦИПС, "П000100620004", "П000100621004, П000100621504, П000100622004, П000100623004, П000100624004, П000100625004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100631004", "П000100631104, П000100631204, П000100631304", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100632004", "П000100632104, П000100632204, П000100632304, П000100632404, П000100632504, П000100632604", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100630004", "П000100631004, П000100632004, П000100633004, П000100635004", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100640004", "П000100610004, П000100620004, П000100630004", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(мОЦИПС, "П000100620005", "П000100621005, П000100621505, П000100622005, П000100623005, П000100624005, П000100625005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100631005", "П000100631105, П000100631205, П000100631305", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100632005", "П000100632105, П000100632205, П000100632305, П000100632405, П000100632505, П000100632605", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100630005", "П000100631005, П000100632005, П000100633005, П000100635005", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(мОЦИПС, "П000100640005", "П000100610005, П000100620005, П000100630005", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетАктивов()
	
	// Строка 1.
	мРасчетАктивов.Области["П000100000103"].Значение = мБаланс.Области["П000100111005"].Значение;
	мРасчетАктивов.Области["П000100000104"].Значение = мБаланс.Области["П000100111004"].Значение;
	
	Если мДатаКонцаПериодаОтчета >= '20120101' Тогда
		// Строка 2.
		мРасчетАктивов.Области["П000100000203"].Значение = мБаланс.Области["П000100115005"].Значение;
		мРасчетАктивов.Области["П000100000204"].Значение = мБаланс.Области["П000100115004"].Значение;
		// Строка 3.
		мРасчетАктивов.Области["П000100000303"].Значение = мБаланс.Области["П000100119005"].Значение;
		мРасчетАктивов.Области["П000100000304"].Значение = мБаланс.Области["П000100119004"].Значение;
		// Строка 4.
		мРасчетАктивов.Области["П000100000403"].Значение = мБаланс.Области["П000100116005"].Значение;
		мРасчетАктивов.Области["П000100000404"].Значение = мБаланс.Области["П000100116004"].Значение;
		// Строка 5.
		мРасчетАктивов.Области["П000100000503"].Значение = мБаланс.Области["П000100117005"].Значение
		                                                 + мБаланс.Области["П000100124005"].Значение;
		мРасчетАктивов.Области["П000100000504"].Значение = мБаланс.Области["П000100117004"].Значение
		                                                 + мБаланс.Области["П000100124004"].Значение;
		// Строка 6.
		мРасчетАктивов.Области["П000100000603"].Значение = мБаланс.Области["П000100112005"].Значение
		                                                 + мБаланс.Области["П000100113005"].Значение
		                                                 + мБаланс.Области["П000100114005"].Значение
		                                                 + мБаланс.Области["П000100118005"].Значение;
		мРасчетАктивов.Области["П000100000604"].Значение = мБаланс.Области["П000100112004"].Значение
		                                                 + мБаланс.Области["П000100113004"].Значение
		                                                 + мБаланс.Области["П000100114004"].Значение
		                                                 + мБаланс.Области["П000100118004"].Значение;
	Иначе
		// Строка 2.
		мРасчетАктивов.Области["П000100000203"].Значение = мБаланс.Области["П000100113005"].Значение;
		мРасчетАктивов.Области["П000100000204"].Значение = мБаланс.Области["П000100113004"].Значение;
		// Строка 3.
		мРасчетАктивов.Области["П000100000303"].Значение = мБаланс.Области["П000100117005"].Значение;
		мРасчетАктивов.Области["П000100000304"].Значение = мБаланс.Области["П000100117004"].Значение;
		// Строка 4.
		мРасчетАктивов.Области["П000100000403"].Значение = мБаланс.Области["П000100114005"].Значение;
		мРасчетАктивов.Области["П000100000404"].Значение = мБаланс.Области["П000100114004"].Значение;
		// Строка 5.
		мРасчетАктивов.Области["П000100000503"].Значение = мБаланс.Области["П000100115005"].Значение
		                                                 + мБаланс.Области["П000100124005"].Значение;
		мРасчетАктивов.Области["П000100000504"].Значение = мБаланс.Области["П000100115004"].Значение
		                                                 + мБаланс.Области["П000100124004"].Значение;
		// Строка 6.
		мРасчетАктивов.Области["П000100000603"].Значение = мБаланс.Области["П000100112005"].Значение
		                                                 + мБаланс.Области["П000100116005"].Значение;
		мРасчетАктивов.Области["П000100000604"].Значение = мБаланс.Области["П000100112004"].Значение
		                                                 + мБаланс.Области["П000100116004"].Значение;
	КонецЕсли;
	
	// Строка 7.
	мРасчетАктивов.Области["П000100000703"].Значение = мБаланс.Области["П000100121005"].Значение;
	мРасчетАктивов.Области["П000100000704"].Значение = мБаланс.Области["П000100121004"].Значение;
	// Строка 8.
	мРасчетАктивов.Области["П000100000803"].Значение = мБаланс.Области["П000100122005"].Значение;
	мРасчетАктивов.Области["П000100000804"].Значение = мБаланс.Области["П000100122004"].Значение;
	// Строка 9.
	мРасчетАктивов.Области["П000100000903"].Значение = мБаланс.Области["П000100123005"].Значение;
	мРасчетАктивов.Области["П000100000904"].Значение = мБаланс.Области["П000100123004"].Значение;
	// Строка 10.
	мРасчетАктивов.Области["П000100001003"].Значение = мБаланс.Области["П000100125005"].Значение;
	мРасчетАктивов.Области["П000100001004"].Значение = мБаланс.Области["П000100125004"].Значение;
	// Строка 11.
	мРасчетАктивов.Области["П000100001103"].Значение = мБаланс.Области["П000100126005"].Значение;
	мРасчетАктивов.Области["П000100001104"].Значение = мБаланс.Области["П000100126004"].Значение;
	
	// Строка 12.
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100001203", "П000100000103, П000100000203, П000100000303, П000100000403, П000100000503, П000100000603, П000100000703, П000100000803, П000100000903, П000100001003, П000100001103", Ложь);
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100001204", "П000100000104, П000100000204, П000100000304, П000100000404, П000100000504, П000100000604, П000100000704, П000100000804, П000100000904, П000100001004, П000100001104", Ложь);
	
	// Строка 13.
	мРасчетАктивов.Области["П000100001303"].Значение = мБаланс.Области["П000100141005"].Значение;
	мРасчетАктивов.Области["П000100001304"].Значение = мБаланс.Области["П000100141004"].Значение;
	// Строка 14.
	мРасчетАктивов.Области["П000100001403"].Значение = мБаланс.Области["П000100142005"].Значение;
	мРасчетАктивов.Области["П000100001404"].Значение = мБаланс.Области["П000100142004"].Значение;
	// Строка 15.
	мРасчетАктивов.Области["П000100001503"].Значение = мБаланс.Области["П000100151005"].Значение;
	мРасчетАктивов.Области["П000100001504"].Значение = мБаланс.Области["П000100151004"].Значение;
	// Строка 16.
	мРасчетАктивов.Области["П000100001603"].Значение = мБаланс.Области["П000100152005"].Значение;
	мРасчетАктивов.Области["П000100001604"].Значение = мБаланс.Области["П000100152004"].Значение;
	// Строка 17.
	мРасчетАктивов.Области["П000100001703"].Значение = мБаланс.Области["П000101520705"].Значение;
	мРасчетАктивов.Области["П000100001704"].Значение = мБаланс.Области["П000101520704"].Значение;
	// Строка 18.
	мРасчетАктивов.Области["П000100001803"].Значение = мБаланс.Области["П000100154005"].Значение;
	мРасчетАктивов.Области["П000100001804"].Значение = мБаланс.Области["П000100154004"].Значение;
	// Строка 19.
	мРасчетАктивов.Области["П000100001903"].Значение = мБаланс.Области["П000100155005"].Значение;
	мРасчетАктивов.Области["П000100001904"].Значение = мБаланс.Области["П000100155004"].Значение;
	// Строка 20.
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100002003", "П000100001303, П000100001403, П000100001503, П000100001603, П000100001803, П000100001903", Ложь);
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100002004", "П000100001304, П000100001404, П000100001504, П000100001604, П000100001804, П000100001904", Ложь);
	// Строка 21.
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100002103", "П000100001203, -П000100002003", Ложь);
	УстановитьСуммуПоказателей(мРасчетАктивов, "П000100002104", "П000100001204, -П000100002004", Ложь);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения3()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения3;
	
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530004", "П000100530104, П000100530504", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530005", "П000100530105, П000100530505", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530006", "П000100530106, П000100530506", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530007", "П000100530107, П000100530507", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530008", "П000100530108, П000100530508", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530009", "П000100530109, П000100530509", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530010", "П000100530110, П000100530510", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530011", "П000100530111, П000100530511", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100530012", "П000100530112, П000100530512", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531004", "П000100531104, П000100531504", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531005", "П000100531105, П000100531505", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531006", "П000100531106, П000100531506", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531007", "П000100531107, П000100531507", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531008", "П000100531108, П000100531508", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531009", "П000100531109, П000100531509", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531010", "П000100531110, П000100531510", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531011", "П000100531111, П000100531511", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100531012", "П000100531112, П000100531512", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения5()
	
	РасчетПояснения5Таблица51();
	РасчетПояснения5Таблица52();
	РасчетПояснения5Таблица53();
	РасчетПояснения5Таблица54();
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения5Таблица51()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	
	ПолеТабличногоДокумента.Области["П000100550311"].Значение = -ПолеТабличногоДокумента.Области["П000100550304"].Значение;
	ПолеТабличногоДокумента.Области["П000100552311"].Значение = -ПолеТабличногоДокумента.Области["П000100552304"].Значение;
	ПолеТабличногоДокумента.Области["П000100550411"].Значение = -ПолеТабличногоДокумента.Области["П000100550404"].Значение;
	ПолеТабличногоДокумента.Области["П000100552411"].Значение = -ПолеТабличногоДокумента.Области["П000100552404"].Значение;
	
	Для Инд = 4 По 13 Цикл
		
		Графа = Формат(Инд, "ЧЦ=2; ЧВН=");
		
		Если Графа <> "11" Тогда
			СписокСуммируемыхПоказателей = "П0001005501" + Графа + ", П0001005511" + Графа;
			СуммаПоказателей = ПолучитьСуммуПоказателей(ПолеТабличногоДокумента, СписокСуммируемыхПоказателей, ОкруглятьЗначенияПоказателей);
			ПолеТабличногоДокумента.Области["П0001005500" + Графа].Значение = СуммаПоказателей;
			
			СписокСуммируемыхПоказателей = "П0001005521" + Графа + ", П0001005531" + Графа;
			СуммаПоказателей = ПолучитьСуммуПоказателей(ПолеТабличногоДокумента, СписокСуммируемыхПоказателей, ОкруглятьЗначенияПоказателей);
			ПолеТабличногоДокумента.Области["П0001005520" + Графа].Значение = СуммаПоказателей;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения5Таблица52()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения5Таблица53()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	
	Для Инд = 4 По 10 Цикл
		
		Графа = Формат(Инд, "ЧЦ=2; ЧВН=");
		
		Если Графа <> "09" Тогда
			СписокСуммируемыхГраф = "П0001005551" + Графа + ", П0001005560" + Графа;
			СуммаПоказателей = ПолучитьСуммуПоказателей(ПолеТабличногоДокумента, СписокСуммируемыхГраф, ОкруглятьЗначенияПоказателей);
			ПолеТабличногоДокумента.Области["П0001005550" + Графа].Значение = СуммаПоказателей;
			
			СписокСуммируемыхГраф = "П0001005571" + Графа + ", П0001005580" + Графа;
			СуммаПоказателей = ПолучитьСуммуПоказателей(ПолеТабличногоДокумента, СписокСуммируемыхГраф, ОкруглятьЗначенияПоказателей);
			ПолеТабличногоДокумента.Области["П0001005570" + Графа].Значение = СуммаПоказателей;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения5Таблица54()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения6()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения6;
	
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100566003", "П000100561003, П000100562003, П000100563003, П000100564003, П000100565003", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100566004", "П000100561004, П000100562004, П000100563004, П000100564004, П000100565004", ОкруглятьЗначенияПоказателей);
	
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100560003", "П000100566003, -П000100567003, П000100568003", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100560004", "П000100566004, -П000100567004, П000100568004", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения7()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения7;
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей.ДопСтрока5700;
	КоличествоСтрок = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для НомерСтрокиБлока = 1 ПО КоличествоСтрок Цикл
		ПостфиксСтроки = "_" + НомерСтрокиБлока;
		УстановитьСуммуПоказателей(ПолеТабличногоДокумента,
		                           "П100100570007" + ПостфиксСтроки,
		                           "П100100570003" + ПостфиксСтроки + ", П100100570004" + ПостфиксСтроки + ", П100100570005" + ПостфиксСтроки + ", П100100570006" + ПостфиксСтроки,
		                           ОкруглятьЗначенияПоказателей);
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура РасчетПояснения9()
	
	ОкруглятьЗначенияПоказателей = Истина;
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения9;
	
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100590003", "П000100590103, П000100590503", ОкруглятьЗначенияПоказателей);
	УстановитьСуммуПоказателей(ПолеТабличногоДокумента, "П000100590004", "П000100590104, П000100590504", ОкруглятьЗначенияПоказателей);
	
КонецПроцедуры

// ОбработчикИзменения
//
// Параметры
//	ПолеТабличногоДокумента - Элемент формы ПолеТабличногоДокумента - позволяет ограничить область обработки
// 							  одним полем табличного документа
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбработчикИзменения(ПолеТабличногоДокумента = Неопределено)
	
	Расчет(ПолеТабличногоДокумента);
	ОбновитьПараметрыАвтозаполненияЯчейки();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОбработчикИзменения

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьНазванияОрганизацийСтрокой()
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	Если мБезКонсолидации Тогда
		Возврат Результат;
	Иначе
		Для каждого Зап Из мГруппаОрганизаций Цикл
			Результат = Результат + "; " + Зап.Значение.Наименование;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗаполнитьАвто_Сервер(мТаблицаИтоговыхПоказателейПриКонсолидации, СписокОрганизаций, ТаблДанныхДопСтрокОбщ) 

	мТаблицаИтоговыхПоказателейПриКонсолидации.Очистить();

	ТаблДанныхДопСтрок = Новый ТаблицаЗначений();
	ТаблДанныхДопСтрок.Колонки.Добавить("Наименование");
	ТаблДанныхДопСтрок.Колонки.Добавить("НачОстаток");
	ТаблДанныхДопСтрок.Колонки.Добавить("КонОстаток");

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	ТаблДанныхДопСтрокОбщ = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблДанныхДопСтрок);
КонецФункции


&НаСервере
Функция ЗаполнитьАвто_Сервер_1(Орг, ЗаполняемыйОтчет, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, ЗаполнятьГодПредыдущий, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, ЗаполнятьГодПредшествующийПредыдущему)
		
		мОргРасшифровка = Орг.Значение;
		
		// Бухгалтерский итоги по счетам.
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		
		// Бухгалтерские итоги по аналитике.
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		// Заполнение баланса.
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Баланс" Тогда
			ЗаполнитьАвтоБаланс("04", ЗаголовокДатаОтчетная, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
			
			Если ЗаполнятьГодПредыдущий Тогда
				мДатаНачалаПериодаПрошлогоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
				мДатаКонцаПериодаПрошлогоГода = КонецГода(мДатаНачалаПериодаПрошлогоГода);
				
				ЗаполнитьАвтоБаланс("05", ЗаголовокДатаКонцаПрошлогоГода, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
			КонецЕсли;
			
			Если ЗаполнятьГодПредшествующийПредыдущему Тогда
				мДатаНачалаПериодаГодаПредшествующегоПрошлому = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
				мДатаКонцаПериодаГодаПредшествующегоПрошлому = КонецГода(мДатаНачалаПериодаГодаПредшествующегоПрошлому);
				
				ЗаполнитьАвтоБаланс("06", ЗаголовокДатаКонцаПозапрошлогоГода, мДатаНачалаПериодаГодаПредшествующегоПрошлому, мДатаКонцаПериодаГодаПредшествующегоПрошлому);
			КонецЕсли;
			
		КонецЕсли;
КонецФункции


// Процедура выполняет заполнение бухгалтерской отчетности автоматически по данным ИБ.
//
&НаКлиенте
Процедура ЗаполнитьАвто(ЗаполняемыйОтчет = "") Экспорт
	
	Перем ТаблДанныхДопСтрокОбщ, мТаблицаИтоговыхПоказателейПриКонсолидации, СписокОрганизаций, мДатаНачалаПериодаОтчета, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода;
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоГодовойОтчет = (КонецДня(мДатаКонцаПериодаОтчета) = КонецГода(мДатаКонцаПериодаОтчета));
	
	// Удаляем пользовательские строки и очищаем заполненные показатели
	Очистить(ЗаполняемыйОтчет);
	
	ЗаполнятьГодПредыдущий = Истина;
	ЗаполнятьГодПредшествующийПредыдущему  = Истина;

	Если ФлажокВнешДанные Тогда
		
		ПериодЗагрузкиДанных = 0;
		ОтчетныйГодЗагрузкиДанных = 0;
		
		СтруктураДанныхОтчета = ИмпортироватьДанныеОтчета();
		Если СтруктураДанныхОтчета = Неопределено Тогда
			Сообщить("Не удалось загрузить данные.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ЗагрузитьДанныеВОтчет(СтруктураДанныхОтчета);
		ОпределитьПериодЗагружаемыхДанных();
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Предупреждение("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	ЗаполнитьАвто_Сервер(мТаблицаИтоговыхПоказателейПриКонсолидации, СписокОрганизаций, ТаблДанныхДопСтрокОбщ);

	Для каждого Орг Из СписокОрганизаций Цикл
		
		ЗаполнитьАвто_Сервер_1(Орг, ЗаполняемыйОтчет, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, ЗаполнятьГодПредыдущий, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, ЗаполнятьГодПредшествующийПредыдущему);
		
		// Заполнение отчета о прибылях и убытках.
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "ФормаОтчета" Тогда
			ЗаполнитьАвтоФормаОтчета();
		КонецЕсли;
		
		// Заполнение отчета об изменениях капитала.
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "ОИК" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("ОИК") Тогда
				ЗаполнитьАвтоОИК();
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение отчета о движении денежных средств.
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "ОДДС" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("ОДДС") Тогда
				ДатаКонцаПредыдущегоПериода = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
				Если НачалоМесяца(мДатаКонцаПериодаОтчета) = мДатаНачалаПериодаОтчета Тогда
					СтрПериод           = "За " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
					СтрПериодПрошлыйГод = "За " + Формат(ДатаКонцаПредыдущегоПериода, "ДФ = 'ММММ гггг'") + "г.";
				Иначе
					СтрПериод           = "За " + "Январь - " + Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
					СтрПериодПрошлыйГод = "За " + "Январь - " + Формат(ДатаКонцаПредыдущегоПериода, "ДФ = 'ММММ гггг'") + "г.";
				КонецЕсли;
				
				НаименованиеГрафы = СтрПериод;
				ЗаполнитьАвтоОДДС("03", НаименованиеГрафы, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
				
				Если ИСТИНА ИЛИ ЗаполнятьГодПредыдущий Тогда
					мДатаНачалаПериодаПрошлогоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
					мДатаКонцаПериодаПрошлогоГода = КонецГода(мДатаНачалаПериодаПрошлогоГода);
					НаименованиеГрафы = СтрПериодПрошлыйГод;
					ЗаполнитьАвтоОДДС("04", НаименованиеГрафы, мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения1" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения1") Тогда
				ЗаполнитьАвтоПояснения1();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения2" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения2") Тогда
				ЗаполнитьАвтоПояснения2();
			КонецЕсли;
		КонецЕсли;
		
		//УИК
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения3" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения3") Тогда
				ЗаполнитьАвтоПояснения3();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения4" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения4") Тогда
				ЗаполнитьАвтоПояснения4();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения5" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения5") Тогда
				ЗаполнитьАвтоПояснения5();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения6" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения6") Тогда
				ЗаполнитьАвтоПояснения6();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения7" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения7") Тогда
				ЗаполнитьАвтоПояснения7();
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗаполняемыйОтчет) ИЛИ ЗаполняемыйОтчет = "Пояснения8" Тогда
			Если ЭтоГодовойОтчет ИЛИ СтраницаОтчетаВидима("Пояснения8") Тогда
				ЗаполнитьАвтоПояснения8();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ мБезКонсолидации Тогда
			// Если обрабатывается последняя организация из списка, тогда, выводим данные на лист, если таблица общая не пустая.
			Если (СписокОрганизаций.Индекс(Орг) + 1 = СписокОрганизаций.Количество()) И (ТаблДанныхДопСтрокОбщ.Количество() > 0) Тогда
				// Создаем и заполняем дополнительные строки.
				// Сгруппируем данные в таблице.
				ТаблДанныхДопСтрокОбщ.Свернуть("Наименование", "НачОстаток, КонОстаток");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// В случае, если отчет был консолидирован, то сложим все его показатели в таблице, а затем выведем их на лист.
	Если НЕ мБезКонсолидации Тогда
		мТаблицаИтоговыхПоказателейПриКонсолидации.Свернуть("ИмяПоказателя", "Сумма");
		Для каждого Пок Из мТаблицаИтоговыхПоказателейПриКонсолидации Цикл
			УстановитьЗначениеПоказателя(Пок.ИмяПоказателя, Пок.Сумма, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Расчет();
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СтраницаОтчетаВидима(ИмяСтраницыОтчета)
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = мДеревоВыбранныхСтраниц.Строки.Найти(ИмяСтраницыОтчета, "ИмяСтраницы");
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура выполняет заполнение отдельной графы бухгалтерского баланса по данным ИБ за заданный период
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//
//  ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
&НаКлиенте
Процедура ЗаполнитьАвтоБаланс(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
	
	// Бухгалтерские итоги по счетам, без аналитики.
	// Используются при заполнении всех разделов.
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", НачалоПериодаОтчета, КонецПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	Если СтруктураОтчета.Баланс.ИдентификаторАвтозаполнения = "Баланс_2012Кв1"
	 ИЛИ СтруктураОтчета.Баланс.ИдентификаторАвтозаполнения = "БалансНКО_2012Кв1" Тогда
		ЗаполнитьАвтоБалансРаздел1_2012Кв1(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	Иначе
		ЗаполнитьАвтоБалансРаздел1(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	КонецЕсли;
	
	ЗаполнитьАвтоБалансРаздел2(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	
	ЗаполнитьАвтоБалансРаздел3(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	
	ЗаполнитьАвтоБалансРаздел4(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	
	ЗаполнитьАвтоБалансРаздел5(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета);
	
КонецПроцедуры // ЗаполнитьАвтоБаланс()

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел1(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Вспомогательные обороты между счетами.
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["99.02.4"], , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОБ_99_02_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	ОБ_77__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	
	ОБ_99_02_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	ОБ_09__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	
	РезделенноеСальдоСчета_02_01 = ПолучитьРазделенноеСальдоСчета_02_01(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	СтруктураСКД_97       = ПолучитьРазделенноеСальдоСчета_97(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_2 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.2"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_9 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.9"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	// строка 1110 "Нематериальные активы"
	СКД_04_01 = СКД("04.01");
	СКК_05    = СКК("05");
	СКД_08_05 = СКД("08.05");
	
	П000100111004 = СКД_04_01 - СКК_05 + СКД_08_05;
	УстановитьЗначениеПоказателя("П0001001110" + Графа, П000100111004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "Строка 1110 ""Нематериальные активы"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "-", "!СКК", -СКК_05  , мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "+", "!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1110
	
	// строка 11101 "Нематериальные активы в организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101110104 = СКД_04_01 - СКК_05;
		УстановитьЗначениеПоказателя("П0001011101" + Графа, П000101110104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "Строка 11101 ""Нематериальные активы в организации"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "","-","!СКК", -СКК_05, мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11102 "Приобретение нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101110204 = СКД_08_05;
		УстановитьЗначениеПоказателя("П0001011102" + Графа, П000101110204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011102" + Графа,"Строка 11102 ""Приобретение нематериальных активов"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1120 "Результаты исследований и разработок"
	П000100112004_04_02 = СКД("04.02");
	П000100112004_08_08 = СКД("08.08");
	
	П000100112004 = П000100112004_04_02 + П000100112004_08_08;
	УстановитьЗначениеПоказателя("П0001001120" + Графа, П000100112004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа, "Строка 1120 ""Результаты исследований и разработок"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа,"","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1120
	
	// строка 11201 "Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101120104 = П000100112004_04_02;
		УстановитьЗначениеПоказателя("П0001011201" + Графа, П000101120104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011201" + Графа,"Строка 11201 ""Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11202 "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101120204 = П000100112004_08_08;
		УстановитьЗначениеПоказателя("П0001011202" + Графа, П000101120204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011202" + Графа,"Строка 11202 ""Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	СтруктураСКД_97 = ПолучитьРазделенноеСальдоСчета_97(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	НомерСтроки = "1130";
	НаименованиеСтроки = "Основные средства";
	
	СКД_01 = СКД("01");
	СКК_02_01 = СКК("02.01");
	П000100113004_01_01 = СКД("01.01");
	П000100113004_01_08 = СКД("01.08");
	П000100113004_02_01 = СКК("02.01");
	П000100113004_02_01__01_01 = 0; // Амортизация ОС, учитываемых на счете 01.01
	П000100113004_02_01__01_08 = 0; // Амортизация ОС, учитываемых на счете 01.08
	П000100113004_07 	= СКД("07");
	П000100113004_08_01 = СКД("08.01");
	П000100113004_08_02 = СКД("08.02");
	П000100113004_08_03 = СКД("08.03");
	П000100113004_08_04 = СКД("08.04");
	
	П000100113004_02_01__01_01 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_01;
	П000100113004_02_01__01_08 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_08;
	
	Если ЭтоБалансДляАУ Тогда
		П000100113004_01_11 = СКД("01.11");
		П000100113004_08_14 = СКД("08.14");
		П000100113004_02_01__01_11 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_11;
	КонецЕсли;
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ОсновныеСредства");
	СКД_97_ПоВидуАктива       = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	ЗначениеПоказателя = СКД_01 - СКК_02_01
	                   + П000100113004_07 
	                   + П000100113004_08_01 + П000100113004_08_02 + П000100113004_08_03 + П000100113004_08_04;
	Если ЭтоБалансДляАУ Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + П000100113004_08_14;
	КонецЕсли;
	ЗначениеПоказателя = ЗначениеПоказателя + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_01, Счет("01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "-", "!СКК", -СКК_02_01, Счет("02.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_07, мСчет["07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_01, мСчет["08.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_02, мСчет["08.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_03, мСчет["08.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_04, мСчет["08.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Если ЭтоБалансДляАУ Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "!СКД", П000100113004_08_14, мСчет["08.14"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001130" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1130
	
	// строка 11301 "Основные средства в организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130104 = П000100113004_01_01 - П000100113004_02_01__01_01;
		Если ЭтоБалансДляАУ Тогда
			П000101130104 = П000101130104 + П000100113004_01_11 - П000100113004_02_01__01_11;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001011301" + Графа, П000101130104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "Строка 11301 ""Основные средства в организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_01_01, мСчет["01.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС в организации", -П000100113004_02_01__01_01, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "+", "!СКД", П000100113004_01_11, мСчет["01.11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011301" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС, полученных или приобретенных в рамках целевого финансирования", -П000100113004_02_01__01_11, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	// строка 11302 "Объекты недвижимости, права собственности на которые не зарегистрированы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130204 = П000100113004_01_08 - П000100113004_02_01__01_08;
		УстановитьЗначениеПоказателя("П0001011302" + Графа, П000101130204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011302" + Графа, "Строка 11302 ""Объекты недвижимости, права собственности на которые не зарегистрированы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_01_08, мСчет["01.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011302" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части объектов недвижимости на которые не зарегистрированы права собственности", -П000100113004_02_01__01_08, мСчет["02.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11303 "Оборудование к установке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130304 = П000100113004_07;
		УстановитьЗначениеПоказателя("П0001011303" + Графа, П000101130304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011303" + Графа, "Строка 11303 ""Оборудование к установке"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_07, мСчет["07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11304 "Приобретение земельных участков"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130404 = П000100113004_08_01;
		УстановитьЗначениеПоказателя("П0001011304" + Графа, П000101130404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011304" + Графа, "Строка 11304 ""Приобретение земельных участков"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_01, мСчет["08.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11305 "Приобретение объектов природопользования"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130504 = П000100113004_08_02;
		УстановитьЗначениеПоказателя("П0001011305" + Графа, П000101130504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011305" + Графа, "Строка 11305 ""Приобретение объектов природопользования"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_02, мСчет["08.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11306 "Строительство объектов основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11306", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130604 = П000100113004_08_03;
		УстановитьЗначениеПоказателя("П0001011306" + Графа, П000101130604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011306" + Графа, "Строка 11306 ""Строительство объектов основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_03, мСчет["08.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11307 "Приобретение объектов основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11307", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101130704 = П000100113004_08_04;
		Если ЭтоБалансДляАУ Тогда
			П000101130704 = П000101130704 + П000100113004_08_14;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001011307" + Графа, П000101130704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011307" + Графа, "Строка 11307 ""Приобретение объектов основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100113004_08_04, мСчет["08.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011307" + Графа, "", "+", "!СКД", П000100113004_08_14, мСчет["08.14"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	// Строка 11308
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11308", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя("П0001011308" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011308" + Графа, "Строка 11308 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	// строка 1140 "Доходные вложения в материальные ценности"
	П000100114004_02_02 = СКК("02.02");
	П000100114004_02_02__03_01 = 0; // Амортизация ОС, учитываемых на счете 03.01
	П000100114004_02_02__03_02 = 0; // Амортизация ОС, учитываемых на счете 03.02
	П000100114004_02_02__03_03 = 0; // Амортизация ОС, учитываемых на счете 03.03
	П000100114004_02_02__03_04 = 0; // Амортизация ОС, учитываемых на счете 03.04
	П000100114004_03 	= СКД("03");
	П000100114004_03_01 = СКД("03.01");
	П000100114004_03_02 = СКД("03.02");
	П000100114004_03_03 = СКД("03.03");
	П000100114004_03_04 = СКД("03.04");
	
	РезделенноеСальдоСчета_02_02 = ПолучитьРазделенноеСальдоСчета_02_02(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	П000100114004_02_02__03_01 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_01;
	П000100114004_02_02__03_02 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_02;
	П000100114004_02_02__03_03 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_03;
	П000100114004_02_02__03_04 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_04;
	
	П000100114004 = П000100114004_03 - П000100114004_02_02;
	УстановитьЗначениеПоказателя("П0001001140" + Графа, П000100114004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001140" + Графа, "Строка 1140 ""Доходные вложения в материальные ценности"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03, мСчет["03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001140" + Графа, "", "-", "!СКК", -П000100114004_02_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1140
	
	// строка 11401 "Материальные ценности в организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101140104 = П000100114004_03_01 - П000100114004_02_02__03_01;
		УстановитьЗначениеПоказателя("П0001011401" + Графа, П000101140104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011401" + Графа, "Строка 11401 ""Материальные ценности в организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_01, мСчет["03.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011401" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.01", -П000100114004_02_02__03_01, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11402 "Материальные ценности предоставленные во временное владение и пользование"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101140204 = П000100114004_03_02 - П000100114004_02_02__03_02;
		УстановитьЗначениеПоказателя("П0001011402" + Графа, П000101140204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011402" + Графа, "Строка 11402 ""Материальные ценности предоставленные во временное владение и пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_02, мСчет["03.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011402" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.02", -П000100114004_02_02__03_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11403 "Материальные ценности предоставленные во временное пользование"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101140304 = П000100114004_03_03 - П000100114004_02_02__03_03;
		УстановитьЗначениеПоказателя("П0001011403" + Графа, П000101140304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011403" + Графа, "Строка 11403 ""Материальные ценности предоставленные во временное пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_03, мСчет["03.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011403" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.03", -П000100114004_02_02__03_03, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11404 "Прочие доходные вложения"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101140404 = П000100114004_03_04 - П000100114004_02_02__03_04;
		УстановитьЗначениеПоказателя("П0001011404" + Графа, П000101140404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011404" + Графа, "Строка 11404 ""Прочие доходные вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100114004_03_04, мСчет["03.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011404" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.04", -П000100114004_02_02__03_04, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1150 "Финансовые вложения"
	П000100115004_58_01_1 = СКД("58.01.1");
	
	П000100115004 = П000100115004_58_01_1;
	УстановитьЗначениеПоказателя("П0001001150" + Графа, П000100115004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001150" + Графа, "Строка 1150 ""Финансовые вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100115004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1150
	
	// строка 11501 "Паи"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101150104 = П000100115004_58_01_1;
		УстановитьЗначениеПоказателя("П0001011501" + Графа, П000101150104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011501" + Графа, "Строка 11501 ""Паи"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100115004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1160 "Отложенные налоговые активы"
	СКД_09 = СКД("09");
	
	П000100116004 = СКД_09 - ОБ_09__99_02_4 + ОБ_99_02_4__09;
	УстановитьЗначениеПоказателя("П0001001160" + Графа, П000100116004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "Строка 1160 ""Отложенные налоговые активы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_09, мСчет["09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "", "-", "!ОБ", -ОБ_09__99_02_4, мСчет["09"], мСчет["99.02.4"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "", "+", "!ОБ",  ОБ_99_02_4__09, мСчет["99.02.4"], мСчет["09"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	НомерСтроки = "1170";
	НаименованиеСтроки = "Прочие внеоборотные активы";
	СКД_08_06 = СКД("08.06");
	СКД_08_07 = СКД("08.07");
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы");
	СКД_97_ПоВидуАктива = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	ЗначениеПоказателя = СКД_08_06 + СКД_08_07 
	                   + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки+ """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_06, Счет("08.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_08_07, Счет("08.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1170
	
	// строка 11701 "Перевод молодняка животных в основное стадо"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11701", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101170104 = СКД_08_06;
		УстановитьЗначениеПоказателя("П0001011701" + Графа, П000101170104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011701" + Графа, "Строка 11701 ""Перевод молодняка животных в основное стадо"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_06, мСчет["08.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11702 "Приобретение взрослых животных"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11702", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101170204 = СКД_08_07;
		УстановитьЗначениеПоказателя("П0001011702" + Графа, П000101170204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011702" + Графа, "Строка 11702 ""Приобретение взрослых животных"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_07, мСчет["08.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	НомерСтроки = "11703";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11703", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя("П0001011703" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "Строка 11703 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел1_2012Кв1(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Вспомогательные обороты между счетами.
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["99.02.4"], , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОБ_99_02_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	ОБ_77__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	
	ОБ_99_02_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	ОБ_09__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	
	РезделенноеСальдоСчета_02_01 = ПолучитьРазделенноеСальдоСчета_02_01(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	СтруктураСКД_97       = ПолучитьРазделенноеСальдоСчета_97(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_2 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.2"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_9 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.9"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	// строка 1110 "Нематериальные активы"
	СКД_04_01 = СКД("04.01");
	СКК_05    = СКК("05");
	СКД_08_05 = СКД("08.05");
	
	П000100111004 = СКД_04_01 - СКК_05 + СКД_08_05;
	УстановитьЗначениеПоказателя("П0001001110" + Графа, П000100111004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "Строка 1110 ""Нематериальные активы"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "-", "!СКК", -СКК_05  , мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001110" + Графа, "", "+", "!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1110
	
	// строка 11101 "Нематериальные активы в организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101110104 = СКД_04_01 - СКК_05;
		УстановитьЗначениеПоказателя("П0001011101" + Графа, П000101110104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "Строка 11101 ""Нематериальные активы в организации"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_04_01, мСчет["04.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011101" + Графа, "","-","!СКК", -СКК_05, мСчет["05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11102 "Приобретение нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101110204 = СКД_08_05;
		УстановитьЗначениеПоказателя("П0001011102" + Графа, П000101110204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011102" + Графа,"Строка 11102 ""Приобретение нематериальных активов"", графа """ + ЗаголовокГрафы + """","+","!СКД", СКД_08_05, мСчет["08.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1120 "Результаты исследований и разработок"
	П000100112004_04_02 = СКД("04.02");
	П000100112004_08_08 = СКД("08.08");
	
	П000100112004 = П000100112004_04_02 + П000100112004_08_08;
	УстановитьЗначениеПоказателя("П0001001120" + Графа, П000100112004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа, "Строка 1120 ""Результаты исследований и разработок"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001120" + Графа,"","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1120
	
	// строка 11201 "Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101120104 = П000100112004_04_02;
		УстановитьЗначениеПоказателя("П0001011201" + Графа, П000101120104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011201" + Графа,"Строка 11201 ""Расходы на научно-исследовательские, опытно-констуркторские и технологические работы"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_04_02, мСчет["04.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11202 "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101120204 = П000100112004_08_08;
		УстановитьЗначениеПоказателя("П0001011202" + Графа, П000101120204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011202" + Графа,"Строка 11202 ""Выполнение научно-исследовательских, опытно-конструкторских и технологических работ"", графа """ + ЗаголовокГрафы + """","+","!СКД", П000100112004_08_08, мСчет["08.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	СтруктураСКД_97 = ПолучитьРазделенноеСальдоСчета_97(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	
	НомерСтроки = "1150";
	НаименованиеСтроки = "Основные средства";
	ИмяПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	СКД_01    = СКД("01");
	СКК_02_01 = СКК("02.01");
	СКД_01_01 = СКД("01.01");
	СКД_01_08 = СКД("01.08");
	СКД_07    = СКД("07"); // П000100115004_07
	СКД_08_01 = СКД("08.01"); // П000100115004_08_01
	СКД_08_02 = СКД("08.02"); // П000100115004_08_02
	СКД_08_03 = СКД("08.03"); // П000100115004_08_03
	СКД_08_04 = СКД("08.04"); // П000100115004_08_04
	
	СКК_02_01__01_01 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_01; // Амортизация ОС, учитываемых на счете 01.01
	СКК_02_01__01_08 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_08; // Амортизация ОС, учитываемых на счете 01.08
	
	Если ЭтоБалансДляАУ Тогда
		СКД_01_11 = СКД("01.11");
		СКД_08_14 = СКД("08.14");
		СКК_02_01__01_11 = РезделенноеСальдоСчета_02_01.СКК_02_01__01_11; // Амортизация ОС, учитываемых на счете 01.11
	КонецЕсли;
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ОсновныеСредства");
	СКД_97_ПоВидуАктива       = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	ЗначениеПоказателя = СКД_01 - СКК_02_01
	                   + СКД_07 
	                   + СКД_08_01 + СКД_08_02 + СКД_08_03 + СКД_08_04
	                   + ?(ЭтоБалансДляАУ, СКД_08_14, 0)
	                   + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	
	УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_01, Счет("01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "-", "!СКК", -СКК_02_01, Счет("02.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_07, Счет("07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_01, Счет("08.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_02, Счет("08.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_03, Счет("08.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_04, Счет("08.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Если ЭтоБалансДляАУ Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_14, Счет("08.14"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	НомерСтроки = "11501";
	НаименованиеСтроки = "Основные средства в организации";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_01_01 - СКК_02_01__01_01
		                   + ?(ЭтоБалансДляАУ, СКД_01_11 - СКК_02_01__01_11, 0);
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_01_01, Счет("01.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС в организации", -СКК_02_01__01_01, Счет("02.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_01_11, Счет("01.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части ОС, полученных или приобретенных в рамках целевого финансирования", -СКК_02_01__01_11, Счет("02.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	
	НомерСтроки = "11502";
	НаименованиеСтроки = "Объекты недвижимости, права собственности на которые не зарегистрированы";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11502", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_01_08 - СКК_02_01__01_08;
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_01_08, Счет("01.08"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "-", "Сальдо на конец периода по кредиту счета 02.01 в части объектов недвижимости на которые не зарегистрированы права собственности", -СКК_02_01__01_08, Счет("02.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "11503";
	НаименованиеСтроки = "Оборудование к установке";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11503", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_07;
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_07, Счет("07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "11504";
	НаименованиеСтроки = "Приобретение земельных участков";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11504", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_08_01;
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_08_01, Счет("08.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "11505";
	НаименованиеСтроки = "Приобретение объектов природопользования";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11505", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_08_02;
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_08_02, Счет("08.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "11506";
	НаименованиеСтроки = "Строительство объектов основных средств";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11506", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_08_03;
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_08_03, Счет("08.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "11507";
	НаименованиеСтроки = "Приобретение объектов основных средств";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11507", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_08_04
		                   + ?(ЭтоБалансДляАУ, СКД_08_14, 0);
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "!СКД", СКД_08_04, Счет("08.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "!СКД", СКД_08_14, Счет("08.14"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	
	НомерСтроки = "11508";
	НаименованиеСтроки = "Расходы будущих периодов";
	ИмяПоказателя = "П00010" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11508", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		
		УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, ЗаголовокРасшифровки, "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	// строка 1160 "Доходные вложения в материальные ценности"
	П000100116004_02_02 = СКК("02.02");
	П000100116004_02_02__03_01 = 0; // Амортизация ОС, учитываемых на счете 03.01
	П000100116004_02_02__03_02 = 0; // Амортизация ОС, учитываемых на счете 03.02
	П000100116004_02_02__03_03 = 0; // Амортизация ОС, учитываемых на счете 03.03
	П000100116004_02_02__03_04 = 0; // Амортизация ОС, учитываемых на счете 03.04
	П000100116004_03 	= СКД("03");
	П000100116004_03_01 = СКД("03.01");
	П000100116004_03_02 = СКД("03.02");
	П000100116004_03_03 = СКД("03.03");
	П000100116004_03_04 = СКД("03.04");
	
	РезделенноеСальдоСчета_02_02 = ПолучитьРазделенноеСальдоСчета_02_02(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	П000100116004_02_02__03_01 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_01;
	П000100116004_02_02__03_02 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_02;
	П000100116004_02_02__03_03 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_03;
	П000100116004_02_02__03_04 = РезделенноеСальдоСчета_02_02.СКК_02_02__03_04;
	
	П000100116004 = П000100116004_03 - П000100116004_02_02;
	УстановитьЗначениеПоказателя("П0001001160" + Графа, П000100116004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "Строка 1160 ""Доходные вложения в материальные ценности"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100116004_03, мСчет["03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001160" + Графа, "", "-", "!СКК", -П000100116004_02_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1160
	
	// строка 11601 "Материальные ценности в организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101160104 = П000100116004_03_01 - П000100116004_02_02__03_01;
		УстановитьЗначениеПоказателя("П0001011601" + Графа, П000101160104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011601" + Графа, "Строка 11601 ""Материальные ценности в организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100116004_03_01, мСчет["03.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011601" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.01", -П000100116004_02_02__03_01, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11602 "Материальные ценности предоставленные во временное владение и пользование"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101160204 = П000100116004_03_02 - П000100116004_02_02__03_02;
		УстановитьЗначениеПоказателя("П0001011602" + Графа, П000101160204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011602" + Графа, "Строка 11602 ""Материальные ценности предоставленные во временное владение и пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100116004_03_02, мСчет["03.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011602" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.02", -П000100116004_02_02__03_02, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11603 "Материальные ценности предоставленные во временное пользование"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11603", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101160304 = П000100116004_03_03 - П000100116004_02_02__03_03;
		УстановитьЗначениеПоказателя("П0001011603" + Графа, П000101160304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011603" + Графа, "Строка 11603 ""Материальные ценности предоставленные во временное пользование"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100116004_03_03, мСчет["03.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011603" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.03", -П000100116004_02_02__03_03, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11604 "Прочие доходные вложения"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11604", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101160404 = П000100116004_03_04 - П000100116004_02_02__03_04;
		УстановитьЗначениеПоказателя("П0001011604" + Графа, П000101160404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011604" + Графа, "Строка 11604 ""Прочие доходные вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100116004_03_04, мСчет["03.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011604" + Графа, "", "-", "Сальдо на конец периода по кредиту счета 02.02 в части объектов по счету 03.04", -П000100116004_02_02__03_04, мСчет["02.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	// строка 1170 "Финансовые вложения"
	П000100117004_58_01_1 = СКД("58.01.1");
	
	П000100117004 = П000100117004_58_01_1;
	УстановитьЗначениеПоказателя("П0001001170" + Графа, П000100117004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001170" + Графа, "Строка 1170 ""Финансовые вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100117004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1170
	
	// строка 11701 "Паи"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11701", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101170104 = П000100117004_58_01_1;
		УстановитьЗначениеПоказателя("П0001011701" + Графа, П000101170104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011701" + Графа, "Строка 11701 ""Паи"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100117004_58_01_1, мСчет["58.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	// строка 1180 "Отложенные налоговые активы"
	СКД_09 = СКД("09");
	
	П000100118004 = СКД_09 - ОБ_09__99_02_4 + ОБ_99_02_4__09;
	УстановитьЗначениеПоказателя("П0001001180" + Графа, П000100118004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001180" + Графа, "Строка 1180 ""Отложенные налоговые активы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_09, мСчет["09"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001180" + Графа, "", "-", "!ОБ", -ОБ_09__99_02_4, мСчет["09"], мСчет["99.02.4"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001180" + Графа, "", "+", "!ОБ",  ОБ_99_02_4__09, мСчет["99.02.4"], мСчет["09"], НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	НомерСтроки = "1190";
	НаименованиеСтроки = "Прочие внеоборотные активы";
	СКД_08_06 = СКД("08.06");
	СКД_08_07 = СКД("08.07");
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы");
	СКД_97_ПоВидуАктива = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	ЗначениеПоказателя = СКД_08_06 + СКД_08_07 
	                   + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки+ """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_06, Счет("08.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_08_07, Счет("08.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1190
	
	// строка 11901 "Перевод молодняка животных в основное стадо"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11901", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101190104 = СКД_08_06;
		УстановитьЗначениеПоказателя("П0001011901" + Графа, П000101190104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011901" + Графа, "Строка 11901 ""Перевод молодняка животных в основное стадо"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_06, мСчет["08.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 11902 "Приобретение взрослых животных"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11902", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101190204 = СКД_08_07;
		УстановитьЗначениеПоказателя("П0001011902" + Графа, П000101190204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001011902" + Графа, "Строка 11902 ""Приобретение взрослых животных"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_08_07, мСчет["08.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	НомерСтроки = "11903";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока11903", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя("П0001011903" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "Строка 11903 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П00010" + НомерСтроки + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел2(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 5 переход(а|ов) на сервер

	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	РезделенноеСальдоСчета_02_01 = ПолучитьРазделенноеСальдоСчета_02_01(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	СтруктураСКД_97       = ПолучитьРазделенноеСальдоСчета_97(НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_2 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.2"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	СтруктураСКДР_76_01_9 = ПолучитьРазделенноеСальдоСчета_76(Счет("76.01.9"), НачалоПериодаОтчета, КонецПериодаОтчета, мОргРасшифровка);
	
	
	НомерСтроки = "1210";
	НаименованиеСтроки = "Запасы";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	СКД_10    = СКД("10");
	СКД_11    = СКД("11");
	СКК_14_01 = СКК("14.01");
	СКК_14_02 = СКК("14.02");
	СКК_14_03 = СКК("14.03");
	СКК_14_04 = СКК("14.04");
	СКД_15_01 = СКД("15.01");
	СКД_15_02 = СКД("15.02");
	СКК_16_01 = СКК("16.01");
	СКД_16_01 = СКД("16.01");
	СКК_16_02 = СКК("16.02");
	СКД_16_02 = СКД("16.02");
	СКД_20    = СКД("20");
	СКД_21    = СКД("21");
	СКД_23    = СКД("23");
	СКД_28    = СКД("28");
	СКД_29    = СКД("29");
	СКД_41    = СКД("41");
	СКК_42    = СКК("42");
	СКД_43    = СКД("43");
	СКД_44    = СКД("44");
	СКД_45    = СКД("45");
	СКД_46    = СКД("46");
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.Запасы");
	СКД_97_ПоВидуАктива = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	ЗначениеПоказателя = СКД_10 - СКК_14_01 + СКД_15_01 + СКД_16_01 - СКК_16_01 + СКД_11 + СКД_20 + СКД_21 + СКД_23 + СКД_29 + СКД_44 + СКД_46 - СКК_14_04 + СКД_43 - СКК_14_03 + СКД_41 - СКК_14_02 + СКД_15_02 + СКД_16_02 - СКК_16_02 - СКК_42 + СКД_45 + СКД_28
	                   + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СКД", СКД_10, мСчет["10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_14_01, мСчет["14.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_15_01, мСчет["15.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_11, мСчет["11"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_20, мСчет["20"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_21, мСчет["21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_23, мСчет["23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_29, мСчет["29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_44, мСчет["44"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_46, мСчет["46"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_14_04, мСчет["14.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_43, мСчет["43"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_14_03, мСчет["14.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_41, мСчет["41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_14_02, мСчет["14.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_15_02, мСчет["15.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_42, мСчет["42"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_45, мСчет["45"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_28, мСчет["28"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1210
	
	// строка 12101 "Материалы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210104 = СКД_10 - СКК_14_01 + СКД_15_01 + СКД_16_01 - СКК_16_01;
		УстановитьЗначениеПоказателя("П0001012101" + Графа, П000101210104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "Строка 12101 ""Материалы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, мСчет["10"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "-", "!СКК", -СКК_14_01, мСчет["14.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "+", "!СКД", СКД_15_01, мСчет["15.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "+", "!СКД", СКД_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012101" + Графа, "", "-", "!СКК", -СКК_16_01, мСчет["16.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12102 "Брак в производстве"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210204 = СКД_28;
		УстановитьЗначениеПоказателя("П0001012102" + Графа, П000101210204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012102" + Графа, "Строка 12102 ""Брак в производстве"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_28, мСчет["28"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12103 "Товары отгруженные"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12103", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210304 = СКД_45;
		УстановитьЗначениеПоказателя("П0001012103" + Графа, П000101210304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012103" + Графа, "Строка 12103 ""Товары отгруженные"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_45, мСчет["45"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12104 "Товары"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12104", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210404 = СКД_41 - СКК_14_02 + СКД_15_02 + СКД_16_02 - СКК_16_02 - СКК_42;
		УстановитьЗначениеПоказателя("П0001012104" + Графа, П000101210404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "Строка 12104 ""Товары"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_41, мСчет["41"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_14_02, мСчет["14.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "+", "!СКД", СКД_15_02, мСчет["15.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "+", "!СКД", СКД_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_16_02, мСчет["16.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012104" + Графа, "", "-", "!СКК", -СКК_42, 	мСчет["42"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12105 "Готовая продукция"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12105", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210504 = СКД_43 - СКК_14_03;
		УстановитьЗначениеПоказателя("П0001012105" + Графа, П000101210504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012105" + Графа, "Строка 12105 ""Готовая продукция"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_43, мСчет["43"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012105" + Графа, "", "-", "!СКК", -СКК_14_03, мСчет["14.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12106 "Расходы на продажу"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12106", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210604 = СКД_44;
		УстановитьЗначениеПоказателя("П0001012106" + Графа, П000101210604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012106" + Графа, "Строка 12106 ""Расходы на продажу"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_44, мСчет["44"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12107 "Выполненные этапы по незавершенным работам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12107", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210704 = СКД_46;
		УстановитьЗначениеПоказателя("П0001012107" + Графа, П000101210704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012107" + Графа, "Строка 12107 ""Выполненные этапы по незавершенным работам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_46, мСчет["46"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12108 "Основное производство"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12108", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210804 = СКД_20 - СКК_14_04;
		УстановитьЗначениеПоказателя("П0001012108" + Графа, П000101210804);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012108" + Графа, "Строка 12108 ""Основное производство"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_20, мСчет["20"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012108" + Графа, "", "-", "!СКК", -СКК_14_04, мСчет["14.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12109 "Полуфабрикаты собственного производства"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12109", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101210904 = СКД_21;
		УстановитьЗначениеПоказателя("П0001012109" + Графа, П000101210904);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012109" + Графа, "Строка 12109 ""Полуфабрикаты собственного производства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_21, мСчет["21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12110 "Вспомогательные производства"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12110", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101211004 = СКД_23;
		УстановитьЗначениеПоказателя("П0001012110" + Графа, П000101211004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012110" + Графа, "Строка 12110 ""Вспомогательные производства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_23, мСчет["23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12111 "Обслуживающие производства и хозяйства"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12111", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101211104 = СКД_29;
		УстановитьЗначениеПоказателя("П0001012111" + Графа, П000101211104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012111" + Графа, "Строка 12111 ""Обслуживающие производства и хозяйства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_29, мСчет["29"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	НомерСтроки = "12112";
	НаименованиеСтроки = "Расходы будущих периодов";
	ИмяОбластиПоказателя = "П00010" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12112", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
		// строка 1220 "Налог на добавленную стоимость по приобретенным ценностям"
	СКД_19 = СКД("19");
	СКД_19_01 = СКД("19.01");
	СКД_19_02 = СКД("19.02");
	СКД_19_03 = СКД("19.03");
	СКД_19_04 = СКД("19.04");
	СКД_19_05 = СКД("19.05");
	СКД_19_06 = СКД("19.06");
	СКД_19_07 = СКД("19.07");
	СКД_19_08 = СКД("19.08");
	
	П000100122004 = СКД_19 - СКД_19_06;
	УстановитьЗначениеПоказателя("П0001001220" + Графа, П000100122004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001220" + Графа, "Строка 1220 ""Налог на добавленную стоимость по приобретенным ценностям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19, мСчет["19"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001220" + Графа, "", "-", "!СКД", -СКД_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1220
	
	// строка 12201 "НДС по приобретенным ОС"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220104 = СКД_19_01;
		УстановитьЗначениеПоказателя("П0001012201" + Графа, П000101220104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012201" + Графа, "Строка 12201 ""НДС по приобретенным ОС"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_01, мСчет["19.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12202 "НДС по приобретенным НМА"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220204 = СКД_19_02;
		УстановитьЗначениеПоказателя("П0001012202" + Графа, П000101220204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012202" + Графа, "Строка 12202 ""НДС по приобретенным НМА"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_02, мСчет["19.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12203 "НДС по приобретенным материально-производственным запасам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220304 = СКД_19_03;
		УстановитьЗначениеПоказателя("П0001012203" + Графа, П000101220304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012203" + Графа, "Строка 12203 ""НДС по приобретенным материально-производственным запасам"", графа """ + ЗаголовокДатаОтчетная + """", "+", "!СКД", СКД_19_03, мСчет["19.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12204 "НДС по приобретенным услугам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12204", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220404 = СКД_19_04;
		УстановитьЗначениеПоказателя("П0001012204" + Графа, П000101220404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012204" + Графа, "Строка 12204 ""НДС по приобретенным услугам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_04, мСчет["19.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12205 "НДС, уплаченный при ввозе товаров на территорию РФ"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12205", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220504 = СКД_19_05;
		УстановитьЗначениеПоказателя("П0001012205" + Графа, П000101220504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012205" + Графа, "Строка 12205 ""НДС, уплаченный при ввозе товаров на территорию РФ"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_05, мСчет["19.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12206 "НДС по товарам, реализованным по ставке 0% (экспорт)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12206", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220604 = СКД_19_07;
		УстановитьЗначениеПоказателя("П0001012206" + Графа, П000101220604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012206" + Графа, "Строка 12206 ""НДС по товарам, реализованным по ставке 0% (экспорт)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_07, мСчет["19.07"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12207 "НДС при строительстве ОС"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12207", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101220704 = СКД_19_08;
		УстановитьЗначениеПоказателя("П0001012207" + Графа, П000101220704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012207" + Графа, "Строка 12207 ""НДС при строительстве ОС"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_19_08, мСчет["19.08"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	

	НомерСтроки = "1230";
	НаименованиеСтроки = "Дебиторская задолженность";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	СКД_60_02   = СКД("60.02");
	СКД_60_22   = СКД("60.22");
	СКД_60_32   = СКД("60.32");
	СКД_62_03   = СКД("62.03");
	СКК_63      = СКК("63");
	СКД_68_04_2 = СКД("68.04.2");
	СКДР_69_13  = СКДР("69.13");
	СКД_73      = СКД("73");
	СКД_75_01   = СКД("75.01");
	СКД_76_02   = СКД("76.02");
	СКД_76_03   = СКД("76.03");
	СКД_76_22   = СКД("76.22");
	СКД_76_32   = СКД("76.32");
	СКД_79      = СКД("79");
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ДебиторскаяЗадолженность");
	СКД_97_ПоВидуАктива = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
	СчетаУчетаРасчетов = Новый Массив;
	СчетаУчетаРасчетов.Добавить(Счет("60.01"));
	СчетаУчетаРасчетов.Добавить(Счет("60.21"));
	СчетаУчетаРасчетов.Добавить(Счет("60.31"));
	СчетаУчетаРасчетов.Добавить(Счет("62.01"));
	СчетаУчетаРасчетов.Добавить(Счет("62.21"));
	СчетаУчетаРасчетов.Добавить(Счет("62.31"));
	
	// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
	ВидыСубконтоДляРасчета = Новый Массив;
	ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ИтогиРС = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
	
	// На активных счетах учета расчетов с покупателями и заказчиками, на которых
	// допускается учет авансов, может возникать ситуация, когда полученный аванс
	// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
	// остаток надо извлечь и затем прибавить к кредиторской  задолженности, которая
	// образовалась на счетах учета полученных авансов.
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	СКДР_62_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.01"]);
	СКДР_62_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.21"]);
	СКДР_62_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["62.31"]);
	
	// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
	// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
	// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
	// надо извлечь и затем прибавить к дебиторской задолженности, которая 
	// образовалась на счетах учета выплаченных авансов.
	
	СКДР_60_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.01"]);
	СКДР_60_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.21"]);
	СКДР_60_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", мСчет["60.31"]);
	
	СчетаРазворачиваемыеПоРаботникам = Новый Массив;
	СчетаРазворачиваемыеПоРаботникам.Добавить(Счет("70"));
	СчетаРазворачиваемыеПоРаботникам.Добавить(Счет("71"));
	
	Если ЭтоБалансДляУПП_КА Тогда
		Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации;
	Иначе
		Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	КонецЕсли;
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоРаботникам, Субконто_РаботникиОрганизаций, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СКДР_70_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет("70"));
	СКДР_71_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт",  "Счет", Счет("71"));
	
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет = Новый Массив;
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет.Добавить(Счет("68"));
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет.Добавить(Счет("69"));
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоВидамПлатежейВБюджет, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	СКДР_68_01_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.01"));
	СКДР_68_02_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.02"));
	СКДР_68_03_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.03"));
	СКДР_68_07_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.07"));
	СКДР_68_08_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.08"));
	СКДР_68_09_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.09"));
	СКДР_68_11_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.11"));
	СКДР_68_12_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.12"));
	
	СКДР_69_01_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.01"));
	СКДР_69_02_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.02.1"));
	СКДР_69_02_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.02.2"));
	СКДР_69_02_3_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.02.3"));
	СКДР_69_02_4_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.02.4"));
	СКДР_69_03_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.03.1"));
	СКДР_69_03_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.03.2"));
	СКДР_69_04_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.04"));
	СКДР_69_05_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.05.1"));
	СКДР_69_05_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.05.2"));
	СКДР_69_11_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.11"));
	СКДР_69_12_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("69.12"));
	
	СчетаРазворачиваемыеПоВидамПлатежейУровням = Новый Массив;
	СчетаРазворачиваемыеПоВидамПлатежейУровням.Добавить(Счет("68.04.1"));
	СчетаРазворачиваемыеПоВидамПлатежейУровням.Добавить(Счет("68.10"));
	
	СубконтоПоВидамПлатежейУровням = Новый Массив;
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоВидамПлатежейУровням, СубконтоПоВидамПлатежейУровням, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СКДР_68_04_1_ВидыПлатежейУровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.04.1"));
	СКДР_68_10_ВидыПлатежейУровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("68.10"));
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["76"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СКДР_76_01_1_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.01.1"));
	СКДР_76_05_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.05"));
	СКДР_76_06_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.06"));
	СКДР_76_09_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.09"));
	СКДР_76_21_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.21"));
	СКДР_76_25_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.25"));
	СКДР_76_26_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.26"));
	СКДР_76_29_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.29"));
	СКДР_76_35_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.35"));
	СКДР_76_36_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.36"));
	СКДР_76_39_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.39"));
	СКДР_76_41_Контрагенты   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.41"));
	Если ЭтоБалансДляАУ Тогда
		СКДР_76_51_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.51"));
		СКДР_76_52_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.52"));
	КонецЕсли;
	
	ЗначениеПоказателя = СКД_60_02 + СКДР_60_01_КонтрагентыДоговоры
	                   + СКД_60_22 + СКДР_60_21_КонтрагентыДоговоры
	                   + СКД_60_32 + СКДР_60_31_КонтрагентыДоговоры
	                   + СКД_62_03
	                   + СКДР_62_01_КонтрагентыДоговоры + СКДР_62_21_КонтрагентыДоговоры + СКДР_62_31_КонтрагентыДоговоры - СКК_63
	                   + СКД_79 
	                   + СКДР_68_01_ВидыПлатежей + СКДР_68_02_ВидыПлатежей + СКДР_68_03_ВидыПлатежей
	                   + СКДР_68_04_1_ВидыПлатежейУровни + СКД_68_04_2
	                   + СКДР_68_07_ВидыПлатежей + СКДР_68_08_ВидыПлатежей + СКДР_68_09_ВидыПлатежей
	                   + СКДР_68_10_ВидыПлатежейУровни
	                   + СКДР_68_11_ВидыПлатежей + СКДР_68_12_ВидыПлатежей
	                   + СКДР_69_01_ВидыПлатежей
	                   + СКДР_69_02_1_ВидыПлатежей + СКДР_69_02_2_ВидыПлатежей + СКДР_69_02_3_ВидыПлатежей + СКДР_69_02_4_ВидыПлатежей
	                   + СКДР_69_03_1_ВидыПлатежей + СКДР_69_03_2_ВидыПлатежей
	                   + СКДР_69_04_ВидыПлатежей
	                   + СКДР_69_05_1_ВидыПлатежей + СКДР_69_05_2_ВидыПлатежей
	                   + СКДР_69_11_ВидыПлатежей + СКДР_69_12_ВидыПлатежей
	                   + СКДР_69_13
	                   + СКДР_70_Работники
	                   + СКДР_71_Работники
	                   + СКД_73
	                   + СКД_75_01
	                   + СКДР_76_01_1_Контрагенты + СКДР_76_21_Контрагенты + СКД_76_02 + СКД_76_22 + СКД_76_03 + СКД_76_32 + СКДР_76_05_Контрагенты
	                   + СКДР_76_25_Контрагенты + СКДР_76_35_Контрагенты + СКДР_76_09_Контрагенты + СКДР_76_29_Контрагенты + СКДР_76_39_Контрагенты
	                   + СКДР_76_41_Контрагенты + СКДР_76_06_Контрагенты + СКДР_76_26_Контрагенты + СКДР_76_36_Контрагенты
	                   + СКД_97_ПоВидуАктива
	                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
	
	Если ЭтоБалансДляАУ Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + СКДР_76_51_Контрагенты + СКДР_76_52_Контрагенты;
	КонецЕсли;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СКД", СКД_60_02, мСчет["60.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_60_22, мСчет["60.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_60_32, мСчет["60.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_62_03, Счет("62.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКК", -СКК_63, мСчет["63"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_79, мСчет["79"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_01_ВидыПлатежей, Счет("68.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.02, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_02_ВидыПлатежей, Счет("68.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.03, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_03_ВидыПлатежей, Счет("68.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.04.1, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СКДР_68_04_1_ВидыПлатежейУровни, Счет("68.04.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_68_04_2, Счет("68.04.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.07, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_07_ВидыПлатежей, Счет("68.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.08, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_08_ВидыПлатежей, Счет("68.08"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.09, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_09_ВидыПлатежей, Счет("68.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.10, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СКДР_68_10_ВидыПлатежейУровни, Счет("68.10"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_11_ВидыПлатежей, Счет("68.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_12_ВидыПлатежей, Счет("68.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_01_ВидыПлатежей, Счет("69.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_1_ВидыПлатежей, Счет("69.02.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_2_ВидыПлатежей, Счет("69.02.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.3, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_3_ВидыПлатежей, Счет("69.02.3"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.4, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_4_ВидыПлатежей, Счет("69.02.4"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.03.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_03_1_ВидыПлатежей, Счет("69.03.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.03.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_03_2_ВидыПлатежей, Счет("69.03.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.04, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_04_ВидыПлатежей, Счет("69.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.05.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_05_1_ВидыПлатежей, Счет("69.05.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.05.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_05_2_ВидыПлатежей, Счет("69.05.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_11_ВидыПлатежей, Счет("69.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_12_ВидыПлатежей, Счет("69.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКДР", СКДР_69_13, Счет("69.13"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 70, развернутое по субконто ""Работники организации""", СКДР_70_Работники, Счет("70"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", СКДР_71_Работники, Счет("71"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_73, мСчет["73"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_75_01, мСчет["75.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.1, развернутое по субконто ""Контрагенты""", СКДР_76_01_1_Контрагенты, Счет("76.01.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", СКДР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_76_02, мСчет["76.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_76_22, мСчет["76.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_76_32, мСчет["76.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", СКДР_76_05_Контрагенты, Счет("76.05"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", СКДР_76_25_Контрагенты, Счет("76.25"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", СКДР_76_35_Контрагенты, Счет("76.35"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", СКДР_76_09_Контрагенты, Счет("76.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", СКДР_76_29_Контрагенты, Счет("76.29"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", СКДР_76_39_Контрагенты, Счет("76.39"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.41, развернутое по субконто ""Контрагенты""", СКДР_76_41_Контрагенты, Счет("76.41"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", СКДР_76_06_Контрагенты, Счет("76.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", СКДР_76_26_Контрагенты, Счет("76.26"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", СКДР_76_36_Контрагенты, Счет("76.36"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Если ЭтоБалансДляАУ Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", СКДР_76_51_Контрагенты, Счет("76.51"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", СКДР_76_52_Контрагенты, Счет("76.52"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	// дополнительные строки к строке 1230
	
	// строка 12301 "Расчеты с поставщиками и подрядчиками"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230104 = СКД_60_02 + СКДР_60_01_КонтрагентыДоговоры + СКД_60_22 + СКДР_60_21_КонтрагентыДоговоры + СКД_60_32 + СКДР_60_31_КонтрагентыДоговоры;
		УстановитьЗначениеПоказателя("П0001012301" + Графа, П000101230104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "Строка 12301 ""Расчеты с поставщиками и подрядчиками"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_60_02, мСчет["60.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "!СКД", СКД_60_22, мСчет["60.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "!СКД", СКД_60_32, мСчет["60.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012301" + Графа, "", "+", "Сальдо отрицательное на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12302 "Расчеты с покупателями и заказчиками"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230204 = СКД_62_03 + СКДР_62_01_КонтрагентыДоговоры + СКДР_62_21_КонтрагентыДоговоры + СКДР_62_31_КонтрагентыДоговоры - СКК_63;
		УстановитьЗначениеПоказателя("П0001012302" + Графа, П000101230204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "Строка 12302 ""Расчеты с покупателями и заказчиками"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_62_03, Счет("62.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_01_КонтрагентыДоговоры, Счет("62.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_21_КонтрагентыДоговоры, Счет("62.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "+", "Сальдо на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СКДР_62_31_КонтрагентыДоговоры, Счет("62.31"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012302" + Графа, "", "-", "!СКК", -СКК_63, мСчет["63"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12303 "Расчеты по налогам и сборам"
	ИмяОбластиПоказателя = "П0001012303" + Графа;
	НаименованиеРасшифровки = "Строка 12303 ""Расчеты по налогам и сборам"", графа """ + ЗаголовокГрафы + """";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКДР_68_01_ВидыПлатежей + СКДР_68_02_ВидыПлатежей + СКДР_68_03_ВидыПлатежей
		                   + СКДР_68_04_1_ВидыПлатежейУровни + СКД_68_04_2
		                   + СКДР_68_07_ВидыПлатежей + СКДР_68_08_ВидыПлатежей + СКДР_68_09_ВидыПлатежей
		                   + СКДР_68_10_ВидыПлатежейУровни
		                   + СКДР_68_11_ВидыПлатежей + СКДР_68_12_ВидыПлатежей;
		
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 68.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_01_ВидыПлатежей, Счет("68.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.02, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_02_ВидыПлатежей, Счет("68.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.03, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_03_ВидыПлатежей, Счет("68.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.04.1, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СКДР_68_04_1_ВидыПлатежейУровни, Счет("68.04.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", СКД_68_04_2, Счет("68.04.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.07, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_07_ВидыПлатежей, Счет("68.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.08, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_08_ВидыПлатежей, Счет("68.08"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.09, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_09_ВидыПлатежей, Счет("68.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.10, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СКДР_68_10_ВидыПлатежейУровни, Счет("68.10"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_11_ВидыПлатежей, Счет("68.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 68.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_68_12_ВидыПлатежей, Счет("68.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12304 "Расчеты по социальному страхованию и обеспечению"
	ИмяОбластиПоказателя = "П0001012304" + Графа;
	НаименованиеРасшифровки = "Строка 12304 ""Расчеты по социальному страхованию и обеспечению"", графа """ + ЗаголовокГрафы + """";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКДР_69_01_ВидыПлатежей
		                   + СКДР_69_02_1_ВидыПлатежей + СКДР_69_02_2_ВидыПлатежей + СКДР_69_02_3_ВидыПлатежей + СКДР_69_02_4_ВидыПлатежей
		                   + СКДР_69_03_1_ВидыПлатежей + СКДР_69_03_2_ВидыПлатежей
		                   + СКДР_69_04_ВидыПлатежей
		                   + СКДР_69_05_1_ВидыПлатежей + СКДР_69_05_2_ВидыПлатежей
		                   + СКДР_69_11_ВидыПлатежей + СКДР_69_12_ВидыПлатежей
		                   + СКДР_69_13;
		
		УстановитьЗначениеПоказателя("П0001012304" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 69.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_01_ВидыПлатежей, Счет("69.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_1_ВидыПлатежей, Счет("69.02.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_2_ВидыПлатежей, Счет("69.02.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.3, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_3_ВидыПлатежей, Счет("69.02.3"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.02.4, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_02_4_ВидыПлатежей, Счет("69.02.4"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.03.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_03_1_ВидыПлатежей, Счет("69.03.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.03.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_03_2_ВидыПлатежей, Счет("69.03.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.04, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_04_ВидыПлатежей, Счет("69.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.05.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_05_1_ВидыПлатежей, Счет("69.05.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.05.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_05_2_ВидыПлатежей, Счет("69.05.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_11_ВидыПлатежей, Счет("69.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 69.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СКДР_69_12_ВидыПлатежей, Счет("69.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКДР", СКДР_69_13, Счет("69.13"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	НомерСтроки = "12310";
	НаименованиеСтроки = "Расчеты с персоналом по оплате труда";
	ИмяОбластиПоказателя = "П00010" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12310", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКДР_70_Работники;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 70, развернутое по субконто ""Работники организации""", СКДР_70_Работники, Счет("71"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12305 "Расчеты с подотчетными лицами"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230504 = СКДР_71_Работники;
		УстановитьЗначениеПоказателя("П0001012305" + Графа, П000101230504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012305" + Графа, "Строка 12305 ""Расчеты с подотчетными лицами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 71, развернутое по субконто ""Работники организации""", СКДР_71_Работники, мСчет["71"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12306 "Расчеты с персоналом по прочим операциям"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12306", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230604 = СКД_73;
		УстановитьЗначениеПоказателя("П0001012306" + Графа, П000101230604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012306" + Графа, "Строка 12306 ""Расчеты с персоналом по прочим операциям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_73, мСчет["73"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12307 "Расчеты по вкладам в уставный (складочный) капитал"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12307", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230704 = СКД_75_01;
		УстановитьЗначениеПоказателя("П0001012307" + Графа, П000101230704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012307" + Графа, "Строка 12307 ""Расчеты по вкладам в уставный (складочный) капитал"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_75_01, мСчет["75.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12308 "Расчеты с разными дебиторами и кредиторами"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12308", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101230804 = СКДР_76_01_1_Контрагенты + СКДР_76_21_Контрагенты + СКД_76_02 + СКД_76_22 + СКД_76_03 + СКД_76_32 + СКДР_76_05_Контрагенты 
		              + СКДР_76_25_Контрагенты + СКДР_76_35_Контрагенты + СКДР_76_09_Контрагенты + СКДР_76_29_Контрагенты + СКДР_76_39_Контрагенты 
		              + СКДР_76_41_Контрагенты + СКДР_76_06_Контрагенты + СКДР_76_26_Контрагенты + СКДР_76_36_Контрагенты;
		Если ЭтоБалансДляАУ Тогда
			П000101230804 = П000101230804 + СКДР_76_51_Контрагенты + СКДР_76_52_Контрагенты;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001012308" + Графа, П000101230804);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "Строка 12308 ""Расчеты с разными дебиторами и кредиторами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по дебету счета 76.01.1, развернутое по субконто ""Контрагенты""", СКДР_76_01_1_Контрагенты, мСчет["76.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.21, развернутое по субконто ""Контрагенты""", СКДР_76_21_Контрагенты, мСчет["76.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_02, мСчет["76.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_22, мСчет["76.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "!СКД", СКД_76_32, мСчет["76.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.05, развернутое по субконто ""Контрагенты""", СКДР_76_05_Контрагенты, Счет("76.05"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.25, развернутое по субконто ""Контрагенты""", СКДР_76_25_Контрагенты, Счет("76.25"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.35, развернутое по субконто ""Контрагенты""", СКДР_76_35_Контрагенты, Счет("76.35"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.09, развернутое по субконто ""Контрагенты""", СКДР_76_09_Контрагенты, Счет("76.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.29, развернутое по субконто ""Контрагенты""", СКДР_76_29_Контрагенты, Счет("76.29"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.39, развернутое по субконто ""Контрагенты""", СКДР_76_39_Контрагенты, Счет("76.39"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.41, развернутое по субконто ""Контрагенты""", СКДР_76_41_Контрагенты, Счет("76.41"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.06, развернутое по субконто ""Контрагенты""", СКДР_76_06_Контрагенты, Счет("76.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.26, развернутое по субконто ""Контрагенты""", СКДР_76_26_Контрагенты, Счет("76.26"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.36, развернутое по субконто ""Контрагенты""", СКДР_76_36_Контрагенты, Счет("76.36"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.51, развернутое по субконто ""Контрагенты""", СКДР_76_51_Контрагенты, Счет("76.51"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012308" + Графа, "", "+", "Сальдо на конец периода по дебету счета 76.52, развернутое по субконто ""Контрагенты""", СКДР_76_52_Контрагенты, Счет("76.52"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	НомерСтроки = "12309";
	НаименованиеСтроки = "Расходы будущих периодов";
	ИмяОбластиПоказателя = "П00010" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12309", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1240 "Финансовые вложения"
	П000100124004_55_03 	= СКД("55.03");
	П000100124004_55_23 	= СКД("55.23");
	П000100124004_58_01_2 	= СКД("58.01.2");
	П000100124004_58_02 	= СКД("58.02");
	П000100124004_58_03 	= СКД("58.03");
	П000100124004_58_04 	= СКД("58.04");
	П000100124004_58_05 	= СКД("58.05");
	П000100124004_59 		= СКК("59");
	
	П000100124004 = П000100124004_58_01_2 + П000100124004_58_02 - П000100124004_59 + П000100124004_58_03 + П000100124004_58_04 + П000100124004_58_05 + П000100124004_55_03 + П000100124004_55_23;
	УстановитьЗначениеПоказателя("П0001001240" + Графа, П000100124004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "Строка 1240 ""Финансовые вложения"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_01_2, мСчет["58.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_02, мСчет["58.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "-", "!СКК", -П000100124004_59, мСчет["59"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_03, мСчет["58.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_04, мСчет["58.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_58_05, мСчет["58.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_55_03, мСчет["55.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001240" + Графа, "", "+", "!СКД", П000100124004_55_23, мСчет["55.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1240
	
	// строка 12401 "Акции"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240104 = П000100124004_58_01_2;
		УстановитьЗначениеПоказателя("П0001012401" + Графа, П000101240104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012401" + Графа, "Строка 12401 ""Акции"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_01_2, мСчет["58.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12402 "Долговые ценные бумаги"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240204 = П000100124004_58_02 - П000100124004_59;
		УстановитьЗначениеПоказателя("П0001012402" + Графа, П000101240204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012402" + Графа, "Строка 12402 ""Долговые ценные бумаги"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_02, мСчет["58.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012402" + Графа, "", "-", "!СКК", -П000100124004_59, мСчет["59"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12403 "Предоставленные займы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240304 = П000100124004_58_03;
		УстановитьЗначениеПоказателя("П0001012403" + Графа, П000101240304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012403" + Графа, "Строка 12403 ""Предоставленные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_03, мСчет["58.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12404 "Вклады по договору простого товарищества"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240404 = П000100124004_58_04;
		УстановитьЗначениеПоказателя("П0001012404" + Графа, П000101240404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012404" + Графа, "Строка 12404 ""Вклады по договору простого товарищества"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_04, мСчет["58.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12405 "Приобретенные права в рамках оказания финансовых услуг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12405", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240504 = П000100124004_58_05;
		УстановитьЗначениеПоказателя("П0001012405" + Графа, П000101240504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012405" + Графа, "Строка 12405 ""Приобретенные права в рамках оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_58_05, мСчет["58.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12406 "Депозитные счета"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12406", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240604 = П000100124004_55_03;
		УстановитьЗначениеПоказателя("П0001012406" + Графа, П000101240604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012406" + Графа, "Строка 12406 ""Депозитные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_55_03, мСчет["55.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12407 "Депозитные счета (в валюте)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12407", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101240704 = П000100124004_55_23;
		УстановитьЗначениеПоказателя("П0001012407" + Графа, П000101240704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012407" + Графа, "Строка 12407 ""Депозитные счета (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100124004_55_23, мСчет["55.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1250 "Денежные средства"
	П000100125004_50_01 = СКД("50.01");
	П000100125004_50_02 = СКД("50.02");
	П000100125004_50_21 = СКД("50.21");
	П000100125004_51 	= СКД("51");
	П000100125004_52 	= СКД("52");
	П000100125004_55_01 = СКД("55.01");
	П000100125004_55_02 = СКД("55.02");
	П000100125004_55_04 = СКД("55.04");
	П000100125004_55_21 = СКД("55.21");
	П000100125004_55_24 = СКД("55.24");
	П000100125004_57 	= СКД("57");
	
	П000100125004 = П000100125004_50_01 + П000100125004_50_02 + П000100125004_50_21 + П000100125004_51 + П000100125004_52 
	              + П000100125004_55_01 + П000100125004_55_02 + П000100125004_55_04 + П000100125004_55_21 + П000100125004_55_24
	              + П000100125004_57;
	УстановитьЗначениеПоказателя("П0001001250" + Графа, П000100125004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "Строка 1250 ""Денежные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_01, мСчет["50.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_50_02, мСчет["50.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_50_21, мСчет["50.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_51, мСчет["51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_52, мСчет["52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_01, мСчет["55.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_02, мСчет["55.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_04, мСчет["55.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_21, мСчет["55.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_55_24, мСчет["55.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001250" + Графа, "", "+", "!СКД", П000100125004_57, мСчет["57"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1250
	
	// строка 12501 "Касса организации"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250104 = П000100125004_50_01;
		УстановитьЗначениеПоказателя("П0001012501" + Графа, П000101250104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012501" + Графа, "Строка 12501 ""Касса организации"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_01, мСчет["50.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12502 "Операционная касса"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12502", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250204 = П000100125004_50_02;
		УстановитьЗначениеПоказателя("П0001012502" + Графа, П000101250204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012502" + Графа, "Строка 12502 ""Операционная касса"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_02, мСчет["50.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12503 "Касса организации (в валюте)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12503", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250304 = П000100125004_50_21;
		УстановитьЗначениеПоказателя("П0001012503" + Графа, П000101250304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012503" + Графа, "Строка 12503 ""Касса организации (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_50_21, мСчет["50.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12504 "Расчетные счета"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12504", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250404 = П000100125004_51;
		УстановитьЗначениеПоказателя("П0001012504" + Графа, П000101250404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012504" + Графа, "Строка 12504 ""Расчетные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_51, мСчет["51"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12505 "Валютные счета"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12505", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250504 = П000100125004_52;
		УстановитьЗначениеПоказателя("П0001012505" + Графа, П000101250504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012505" + Графа, "Строка 12505 ""Валютные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_52, мСчет["52"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12506 "Аккредитивы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12506", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250604 = П000100125004_55_01;
		УстановитьЗначениеПоказателя("П0001012506" + Графа, П000101250604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012506" + Графа, "Строка 12506 ""Аккредитивы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_01, мСчет["55.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12507 "Чековые книжки"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12507", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250704 = П000100125004_55_02;
		УстановитьЗначениеПоказателя("П0001012507" + Графа, П000101250704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012507" + Графа, "Строка 12507 ""Чековые книжки"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_02, мСчет["55.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12508 "Прочие специальные счета"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12508", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250804 = П000100125004_55_04;
		УстановитьЗначениеПоказателя("П0001012508" + Графа, П000101250804);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012508" + Графа, "Строка 12508 ""Прочие специальные счета"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_04, мСчет["55.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12509 "Аккредитивы (в валюте)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12509", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101250904 = П000100125004_55_21;
		УстановитьЗначениеПоказателя("П0001012509" + Графа, П000101250904);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012509" + Графа, "Строка 12509 ""Аккредитивы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_21, мСчет["55.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12510 "Прочие специальные счета (в валюте)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12510", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101251004 = П000100125004_55_24;
		УстановитьЗначениеПоказателя("П0001012510" + Графа, П000101251004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012510" + Графа, "Строка 12510 ""Прочие специальные счета (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_55_24, мСчет["55.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12511 "Переводы в пути"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12511", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101251104 = П000100125004_57;
		УстановитьЗначениеПоказателя("П0001012511" + Графа, П000101251104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012511" + Графа, "Строка 12511 ""Переводы в пути"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100125004_57, мСчет["57"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "1260";
	НаименованиеСтроки = "Прочие оборотные активы";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	П000100126004_19_06 = СКД("19.06");
	П000100126004_50_03 = СКД("50.03");
	П000100126004_50_23 = СКД("50.23");
	П000100126004_68_22 = СКД("68.22");
	П000100126004_76_АВ = СКД("76.АВ");
	П000100126004_76_НА = СКД("76.НА");
	П000100126004_76_ОТ = СКД("76.ОТ");
	П000100126004_94 	= СКД("94");
	П000100126004_96 	= СКД("96");
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы");
	СКД_97_ПоВидуАктива = СтруктураСКД_97[ВидАктиваРБП];
	СКДР_76_01_2_ПоВидуАктива = СтруктураСКДР_76_01_2[ВидАктиваРБП];
	СКДР_76_01_9_ПоВидуАктива = СтруктураСКДР_76_01_9[ВидАктиваРБП];
	
	П000100126004 = П000100126004_19_06 + П000100126004_50_03 + П000100126004_50_23 + П000100126004_68_22 + П000100126004_76_АВ + П000100126004_76_ОТ + П000100126004_76_НА + П000100126004_94
	              + СКД_97_ПоВидуАктива
	              + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива
	              + П000100126004_96;
	УстановитьЗначениеПоказателя("П0001001260" + Графа, П000100126004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СКД", П000100126004_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_50_03, мСчет["50.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_50_23, мСчет["50.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_76_АВ, мСчет["76.АВ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_76_ОТ, мСчет["76.ОТ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_94, мСчет["94"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКД", П000100126004_96, мСчет["96"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1260
	
	// строка 12601 "Акцизы по оплаченным материальным ценностям"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260104 = П000100126004_19_06;
		УстановитьЗначениеПоказателя("П0001012601" + Графа, П000101260104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012601" + Графа, "Строка 12601 ""Акцизы по оплаченным материальным ценностям"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_19_06, мСчет["19.06"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12602 "Денежные документы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260204 = П000100126004_50_03;
		УстановитьЗначениеПоказателя("П0001012602" + Графа, П000101260204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012602" + Графа, "Строка 12602 ""Денежные документы"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_50_03, мСчет["50.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12603 "Денежные документы (в валюте)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12603", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260304 = П000100126004_50_23;
		УстановитьЗначениеПоказателя("П0001012603" + Графа, П000101260304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012603" + Графа, "Строка 12603 ""Денежные документы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_50_23, мСчет["50.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12604 "НДС по экспорту к возмещению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12604", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260404 = П000100126004_68_22;
		УстановитьЗначениеПоказателя("П0001012604" + Графа, П000101260404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012604" + Графа, "Строка 12604 ""НДС по экспорту к возмещению"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12605 "НДС по авансам и предоплатам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12605", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260504 = П000100126004_76_АВ;
		УстановитьЗначениеПоказателя("П0001012605" + Графа, П000101260504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012605" + Графа, "Строка 12605 ""НДС по авансам и предоплатам"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_АВ, мСчет["76.АВ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12606 "НДС, начисленный по отгрузке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12606", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260604 = П000100126004_76_ОТ;
		УстановитьЗначениеПоказателя("П0001012606" + Графа, П000101260604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012606" + Графа, "Строка 12606 ""НДС, начисленный по отгрузке"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_ОТ, мСчет["76.ОТ"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12607 "Расчеты по НДС при исполнении обязанностей налогового агента"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12607", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260704 = П000100126004_76_НА;
		УстановитьЗначениеПоказателя("П0001012607" + Графа, П000101260704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012607" + Графа, "Строка 12607 ""Расчеты по НДС при исполнении обязанностей налогового агента"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	НомерСтроки = "12608";
	НаименованиеСтроки = "Расходы будущих периодов";
	ИмяОбластиПоказателя = "П00010" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка "+ НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12608", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СКД_97_ПоВидуАктива
		                   + СКДР_76_01_2_ПоВидуАктива + СКДР_76_01_9_ПоВидуАктива;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКД_97_ПоВидуАктива, Счет("97"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.2, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_2_ПоВидуАктива, Счет("76.01.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по дебету счета 76.01.9, развернутое по субконто ""Контрагенты"" /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/", СКДР_76_01_9_ПоВидуАктива, Счет("76.01.9"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12609 "Недостачи и потери от порчи ценностей"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12609", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101260904 = П000100126004_94;
		УстановитьЗначениеПоказателя("П0001012609" + Графа, П000101260904);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012609" + Графа, "Строка 12609 ""Недостачи и потери от порчи ценностей"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_94, мСчет["94"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 12610 "Оценочные обязательства"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока12610", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101261004 = П000100126004_96;
		УстановитьЗначениеПоказателя("П0001012610" + Графа, П000101261004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001012610" + Графа, "Строка 12610 ""Расходы будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКД", П000100126004_96, мСчет["96"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел3(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	НомерСтроки = "1310";
	НаименованиеСтроки = ?(ЭтоБалансНекоммерческойОрганизации,
	                       "Паевой фонд",
	                       "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)");
	
	СКК_80 = СКК("80");
	
	ЗначениеПоказателя = СКК_80;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_80, Счет("80"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	НомерСтроки = "1320";
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		НаименованиеСтроки = "Целевой капитал";
		// Ручной ввод.
	Иначе
		НаименованиеСтроки = "Собственные акции, выкупленные у акционеров";
		
		СКД_81 = СКД("81");
		
		ЗначениеПоказателя = СКД_81;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", -СКД_81, Счет("81"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1340 "Переоценка внеоборотных активов"
	Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
		П000100134004_83_01   = СКК("83.01");
		П000100134004_83_01_1 = СКК("83.01.1");
		П000100134004_83_01_2 = СКК("83.01.2");
		П000100134004_83_01_3 = СКК("83.01.3");
		
		П000100134004 = П000100134004_83_01;
		УстановитьЗначениеПоказателя("П0001001340" + Графа, П000100134004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001340" + Графа, "Строка 1340 ""Переоценка внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		// дополнительные строки к строке 1340
		
		// строка 13401 "Переоценка основных средств"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340104 = П000100134004_83_01_1;
			УстановитьЗначениеПоказателя("П0001013401" + Графа, П000101340104);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013401" + Графа, "Строка 13401 ""Переоценка основных средств"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_1, мСчет["83.01.1"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 13402 "Переоценка НМА"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340204 = П000100134004_83_01_2;
			УстановитьЗначениеПоказателя("П0001013402" + Графа, П000101340204);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013402" + Графа, "Строка 13402 ""Переоценка НМА"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_2, мСчет["83.01.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 13403 "Переоценка прочих внеоборотных активов"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101340304 = П000100134004_83_01_3;
			УстановитьЗначениеПоказателя("П0001013403" + Графа, П000101340304);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013403" + Графа, "Строка 13403 ""Переоценка прочих внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100134004_83_01_3, мСчет["83.01.3"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтроки = "1350";
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		НаименованиеСтроки = "Целевые средства";
		
		СКК_86 = СКК("86");
		СКК_84 = СКК("84");
		СКД_84 = СКД("84");
		СКК_99 = СКК("99");
		СКД_99 = СКД("99");
		
		ЗначениеПоказателя = СКК_86 + СКК_84 - СКД_84 + СКК_99 - СКД_99;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_86, Счет("86"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКК",  СКК_84, Счет("84"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКД", -СКД_84, Счет("84"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКК",  СКК_99, Счет("99"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКД", -СКД_99, Счет("99"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Иначе
		НаименованиеСтроки = "Добавочный капитал (без переоценки)";
		
		СКК_83    = СКК("83");
		СКК_83_01 = СКК("83.01");
		
		ЗначениеПоказателя = СКК_83 - СКК_83_01;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_83, Счет("83"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_83_01, Счет("83.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "1360";
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		НаименованиеСтроки = "Фонд недвижимого и особо ценного движимого имущества";
		
		СКК_83 = СКК("83");
		
		ЗначениеПоказателя = СКК_83;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_83, Счет("83"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
	Иначе
		НаименованиеСтроки = "Резервный капитал";
		
		СКК_82    = СКК("82");
		СКК_82_01 = СКК("82.01");
		СКК_82_02 = СКК("82.02");
		
		ЗначениеПоказателя = СКК_82;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_82, Счет("82"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		// строка 13601 "Резервы, образованные в соответствии с законодательством"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101360104 = СКК_82_01;
			УстановитьЗначениеПоказателя("П0001013601" + Графа, П000101360104);
		
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013601" + Графа, "Строка 13601 ""Резервы, образованные в соответствии с законодательством"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_82_01, Счет("82.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
		// строка 13602 "Резервы, образованные в соответствии с учредительными документами"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока13602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101360204 = СКК_82_02;
			УстановитьЗначениеПоказателя("П0001013602" + Графа, П000101360204);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001013602" + Графа, "Строка 13602 ""Резервы, образованные в соответствии с учредительными документами"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_82_02, Счет("82.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		
	КонецЕсли;
	
	
	// строка 1370 "Нераспределенная прибыль (непокрытый убыток)"
	НомерСтроки = "1370";
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		НаименованиеСтроки = "Резервный и иные целевые фонды";
		
		СКК_82 = СКК("82");
		
		ЗначениеПоказателя = СКК_82;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_82, Счет("82"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
	Иначе
		НаименованиеСтроки = "Нераспределенная прибыль (непокрытый убыток)";
		
		СКК_84 = СКК("84");
		СКД_84 = СКД("84");
		СКК_99 = СКК("99");
		СКД_99 = СКД("99");
		
		ЗначениеПоказателя = СКК_84 - СКД_84 + СКК_99 - СКД_99;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_84, Счет("84"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКД", -СКД_84, Счет("84"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКК",  СКК_99, Счет("99"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКД", -СКД_99, Счет("99"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел4(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Вспомогательные обороты между счетами.
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["99.02.4"], , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОБ_99_02_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	ОБ_77__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	
	ОБ_99_02_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	ОБ_09__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	
	// строка 1410 "Заемные средства"
	СКК_67_01 = СКК("67.01");
	СКК_67_03 = СКК("67.03");
	СКК_67_21 = СКК("67.21");
	СКК_67_23 = СКК("67.23");

	П000100141004 = СКК_67_01 + СКК_67_21 + СКК_67_03 + СКК_67_23;
	УстановитьЗначениеПоказателя("П0001001410" + Графа, П000100141004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "Строка 1410 ""Заемные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_01, мСчет["67.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_21, мСчет["67.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_03, мСчет["67.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001410" + Графа, "", "+", "!СКК", СКК_67_23, мСчет["67.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// дополнительные строки к строке 1410

	// строка 14101 "Долгосрочные кредиты"
	П000101410104 = СКК_67_01;
	УстановитьЗначениеПоказателя("П0001014101" + Графа, П000101410104);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014101" + Графа, "Строка 14101 ""Долгосрочные кредиты"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_01, мСчет["67.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 14102 "Долгосрочные займы"
	П000101410204 = СКК_67_03;
	УстановитьЗначениеПоказателя("П0001014102" + Графа, П000101410204);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014102" + Графа, "Строка 14102 ""Долгосрочные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_03, мСчет["67.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 14103 "Долгосрочные кредиты (в валюте)"
	П000101410304 = СКК_67_21;
	УстановитьЗначениеПоказателя("П0001014103" + Графа, П000101410304);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014103" + Графа, "Строка 14103 ""Долгосрочные кредиты (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_21, мСчет["67.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 14104 "Долгосрочные займы (в валюте)"
	П000101410404 = СКК_67_23;
	УстановитьЗначениеПоказателя("П0001014104" + Графа, П000101410404);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001014104" + Графа, "Строка 14104 ""Долгосрочные займы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_23, мСчет["67.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 1420 "Отложенные налоговые обязательства"
	СКК_77 = СКК("77");
	
	П000100142004 = СКК_77 - ОБ_99_02_4__77 + ОБ_77__99_02_4;
	УстановитьЗначениеПоказателя("П0001001420" + Графа, П000100142004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "Строка 1420 ""Отложенные налоговые обязательства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_77, мСчет["77"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "", "-", "!ОБ", -ОБ_99_02_4__77, Счет("99.02.4"), Счет("77"), НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001420" + Графа, "", "+", "!ОБ", ОБ_77__99_02_4, Счет("77"), Счет("99.02.4"), НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоБалансРаздел5(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 5 переход(а|ов) на сервер

	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	
	// Счета учета расчетов, на которых допустим учет авансов, - для расчета развернутого сальдо
	СчетаУчетаРасчетов = Новый Массив;
	СчетаУчетаРасчетов.Добавить(Счет("60.01"));
	СчетаУчетаРасчетов.Добавить(Счет("60.21"));
	СчетаУчетаРасчетов.Добавить(Счет("60.31"));
	СчетаУчетаРасчетов.Добавить(Счет("62.01"));
	СчетаУчетаРасчетов.Добавить(Счет("62.21"));
	СчетаУчетаРасчетов.Добавить(Счет("62.31"));
	
	// Виды субконто для расчета развернутого сальдо по счетам учета расчетов
	ВидыСубконтоДляРасчета = Новый Массив;
	ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Вспомогательные обороты между счетами.
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["99.02.4"], , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОБ_99_02_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	ОБ_77__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["77"]);
	
	ОБ_99_02_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	ОБ_09__99_02_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", мСчет["99.02.4"], мСчет["09"]);
	
	// строка 1510 "Заемные средства"
	СКК_66 = СКК("66");
	СКК_66_01 = СКК("66.01");
	СКК_66_02 = СКК("66.02");
	СКК_66_03 = СКК("66.03");
	СКК_66_04 = СКК("66.04");
	СКК_66_21 = СКК("66.21");
	СКК_66_22 = СКК("66.22");
	СКК_66_23 = СКК("66.23");
	СКК_66_24 = СКК("66.24");
	СКК_67_02 = СКК("67.02");
	СКК_67_04 = СКК("67.04");
	СКК_67_22 = СКК("67.22");
	СКК_67_24 = СКК("67.24");

	П000100151004 = СКК_66 + СКК_67_02 + СКК_67_04 + СКК_67_22 + СКК_67_24;
	УстановитьЗначениеПоказателя("П0001001510" + Графа, П000100151004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "Строка 1510 ""Заемные средства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66, мСчет["66"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_02, мСчет["67.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_04, мСчет["67.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_22, мСчет["67.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001510" + Графа, "", "+", "!СКК", СКК_67_24, мСчет["67.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// дополнительные строки к строке 1510

	// строка 15101 "Краткосрочные кредиты"
	П000101510104 = СКК_66_01;
	УстановитьЗначениеПоказателя("П0001015101" + Графа, П000101510104);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015101" + Графа, "Строка 15101 ""Краткосрочные кредиты"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_01, мСчет["66.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15102 "Краткосрочные займы"
	П000101510204 = СКК_66_03;
	УстановитьЗначениеПоказателя("П0001015102" + Графа, П000101510204);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015102" + Графа, "Строка 15102 ""Краткосрочные займы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_03, мСчет["66.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15103 "Проценты по краткосрочным кредитам"
	П000101510304 = СКК_66_02;
	УстановитьЗначениеПоказателя("П0001015103" + Графа, П000101510304);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015103" + Графа, "Строка 15103 ""Проценты по краткосрочным кредитам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_02, мСчет["66.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15104 "Проценты по долгосрочным кредитам"
	П000101510404 = СКК_67_02;
	УстановитьЗначениеПоказателя("П0001015104" + Графа, П000101510404);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015104" + Графа, "Строка 15104 ""Проценты по долгосрочным кредитам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_02, мСчет["67.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15105 "Проценты по краткосрочным займам"
	П000101510504 = СКК_66_04;
	УстановитьЗначениеПоказателя("П0001015105" + Графа, П000101510504);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015105" + Графа, "Строка 15105 ""Проценты по краткосрочным займам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_04, мСчет["66.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15106 "Проценты по долгосрочным займам"
	П000101510604 = СКК_67_04;
	УстановитьЗначениеПоказателя("П0001015106" + Графа, П000101510604);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015106" + Графа, "Строка 15106 ""Проценты по долгосрочным займам"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_04, мСчет["67.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15107 "Краткосрочные кредиты (в валюте)"
	П000101510704 = СКК_66_21;
	УстановитьЗначениеПоказателя("П0001015107" + Графа, П000101510704);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015107" + Графа, "Строка 15107 ""Краткосрочные кредиты (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_21, мСчет["66.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15108 "Краткосрочные займы (в валюте)"
	П000101510804 = СКК_66_23;
	УстановитьЗначениеПоказателя("П0001015108" + Графа, П000101510804);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015108" + Графа, "Строка 15108 ""Краткосрочные займы (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_23, мСчет["66.23"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15109 "Проценты по краткосрочным кредитам (в валюте)"
	П000101510904 = СКК_66_22;
	УстановитьЗначениеПоказателя("П0001015109" + Графа, П000101510904);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015109" + Графа, "Строка 15109 ""Проценты по краткосрочным кредитам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_22, мСчет["66.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");

	// строка 15110 "Проценты по долгосрочным кредитам (в валюте)"
	П000101511004 = СКК_67_22;
	УстановитьЗначениеПоказателя("П0001015110" + Графа, П000101511004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015110" + Графа, "Строка 15110 ""Проценты по долгосрочным кредитам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_22, мСчет["67.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// строка 15111 "Проценты по краткосрочным займам (в валюте)"
	П000101511104 = СКК_66_24;
	УстановитьЗначениеПоказателя("П0001015111" + Графа, П000101511104);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015111" + Графа, "Строка 15111 ""Проценты по краткосрочным займам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_66_24, мСчет["66.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// строка 15112 "Проценты по долгосрочным займам (в валюте)"
	П000101511204 = СКК_67_24;
	УстановитьЗначениеПоказателя("П0001015112" + Графа, П000101511204);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015112" + Графа, "Строка 15112 ""Проценты по долгосрочным займам (в валюте)"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_67_24, мСчет["67.24"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	
	// строка 1520 "Кредиторская задолженность"
	ИмяОбластиПоказателя = "П0001001520" + Графа;
	ИтогиРС = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
	
	// На активных счетах учета расчетов с покупателями и заказчиками, на которых
	// допускается учет авансов, может возникать ситуация, когда полученный аванс
	// "уводит" остаток в минус, то есть в кредит. В этом случае этот отрицательый
	// остаток надо извлечь и затем прибавить к кредиторской  задолженности, которая
	// образовалась на счетах учета полученных авансов.
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, Субконто2", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаУчетаРасчетов, ВидыСубконтоДляРасчета, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	// Отрицательное сальдо счета 62, учитывается в кредиторской задолженности (1520)
	СККР_62_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.01"]);
	СККР_62_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.21"]);
	СККР_62_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["62.31"]);
	
	// На пассивных счетах учета расчетов с поставщиками и подрядчиками, на которых допускается 
	// учет авансов, может возникать ситуация, когда выплаченный аванс "уводит" 
	// остаток в минус, то есть в дебет. В этом случае этот отрицательый кредитовый остаток 
	// надо извлечь и затем прибавить к дебиторской задолженности, которая 
	// образовалась на счетах учета выплаченных авансов.
	
	СККР_60_01_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.01"]);
	СККР_60_21_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.21"]);
	СККР_60_31_КонтрагентыДоговоры = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", мСчет["60.31"]);
	
	
	СчетаРазворачиваемыеПоРаботникам = Новый Массив;
	СчетаРазворачиваемыеПоРаботникам.Добавить(Счет("70"));
	СчетаРазворачиваемыеПоРаботникам.Добавить(Счет("71"));
	
	Если ЭтоБалансДляУПП_КА Тогда
		Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации;
	Иначе
		Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	КонецЕсли;
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоРаботникам, Субконто_РаботникиОрганизаций, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СККР_70_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет("70"));
	СККР_71_Работники = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт",  "Счет", Счет("71"));
	
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет = Новый Массив;
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет.Добавить(Счет("68"));
	СчетаРазворачиваемыеПоВидамПлатежейВБюджет.Добавить(Счет("69"));
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоВидамПлатежейВБюджет, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	СККР_68_01_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.01"));
	СККР_68_02_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.02"));
	СККР_68_03_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.03"));
	СККР_68_07_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.07"));
	СККР_68_08_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.08"));
	СККР_68_09_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.09"));
	СККР_68_11_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.11"));
	СККР_68_12_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.12"));
	
	СККР_69_01_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.01"));
	СККР_69_02_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.02.1"));
	СККР_69_02_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.02.2"));
	СККР_69_02_3_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.02.3"));
	СККР_69_02_4_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.02.4"));
	СККР_69_03_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.03.1"));
	СККР_69_03_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.03.2"));
	СККР_69_04_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.04"));
	СККР_69_05_1_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.05.1"));
	СККР_69_05_2_ВидыПлатежей = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.05.2"));
	СККР_69_11_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.11"));
	СККР_69_12_ВидыПлатежей   = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("69.12"));
	
	СчетаРазворачиваемыеПоВидамПлатежейУровням = Новый Массив;
	СчетаРазворачиваемыеПоВидамПлатежейУровням.Добавить(Счет("68.04.1"));
	СчетаРазворачиваемыеПоВидамПлатежейУровням.Добавить(Счет("68.10"));
	
	СубконтоПоВидамПлатежейУровням = Новый Массив;
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаРазворачиваемыеПоВидамПлатежейУровням, СубконтоПоВидамПлатежейУровням, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СККР_68_04_1_ВидыПлатежейУровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.04.1"));
	СККР_68_10_ВидыПлатежейУровни = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("68.10"));
	
	// Развернем итоги по субсчетам счета 76 по контрагентам
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["76"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	СККР_76_01_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.01"));
	СККР_76_05_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.05"));
	СККР_76_06_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.06"));
	СККР_76_09_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.09"));
	СККР_76_21_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.21"));
	СККР_76_25_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.25"));
	СККР_76_26_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.26"));
	СККР_76_29_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.29"));
	СККР_76_35_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.35"));
	СККР_76_36_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.36"));
	СККР_76_39_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.39"));
	СККР_76_41_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.41"));
	Если ЭтоБалансДляАУ Тогда
		СКДР_76_51_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.51"));
		СКДР_76_52_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет("76.52"));
		СККР_76_51_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.51"));
		СККР_76_52_Контрагенты = мБухИтогиРС.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет("76.52"));
	КонецЕсли;
	
	СКК_60_03   = СКК("60.03");
	СКК_62_02   = СКК("62.02");
	СКК_62_22   = СКК("62.22");
	СКК_62_32   = СКК("62.32");
	СКК_68_04_2 = СКК("68.04.2");
	СКК_68_22   = СКК("68.22");
	СКК_68_32   = СКК("68.32");
	СККР_69_13  = СККР("69.13");
	СКК_75_01   = СКК("75.01");
	СКК_75_02   = СКК("75.02");
	СКК_76_03   = СКК("76.03");
	СКК_76_04   = СКК("76.04");
	СКК_76_Н    = СКК("76.Н");
	СКК_79      = СКК("79");
	
	ЗначениеПоказателя = СККР_60_01_КонтрагентыДоговоры + СККР_60_21_КонтрагентыДоговоры + СККР_60_31_КонтрагентыДоговоры + СКК_60_03
	                   + СКК_62_02 + СККР_62_01_КонтрагентыДоговоры + СКК_62_22 + СККР_62_21_КонтрагентыДоговоры + СКК_62_32 + СККР_62_31_КонтрагентыДоговоры
	                   + СККР_68_01_ВидыПлатежей + СККР_68_02_ВидыПлатежей + СККР_68_03_ВидыПлатежей
	                   + СККР_68_04_1_ВидыПлатежейУровни + СКК_68_04_2
	                   + СККР_68_07_ВидыПлатежей + СККР_68_08_ВидыПлатежей + СККР_68_09_ВидыПлатежей 
	                   + СККР_68_10_ВидыПлатежейУровни
	                   + СККР_68_11_ВидыПлатежей + СККР_68_12_ВидыПлатежей
	                   + СКК_68_22 + СКК_68_32
	                   + СККР_69_01_ВидыПлатежей
	                   + СККР_69_02_1_ВидыПлатежей + СККР_69_02_2_ВидыПлатежей + СККР_69_02_3_ВидыПлатежей + СККР_69_02_4_ВидыПлатежей
	                   + СККР_69_03_1_ВидыПлатежей + СККР_69_03_2_ВидыПлатежей
	                   + СККР_69_04_ВидыПлатежей
	                   + СККР_69_05_1_ВидыПлатежей + СККР_69_05_2_ВидыПлатежей
	                   + СККР_69_11_ВидыПлатежей + СККР_69_12_ВидыПлатежей
	                   + СККР_69_13
	                   + СККР_70_Работники
	                   + СККР_71_Работники
	                   + СКК_75_02
	                   + СКК_79
	                   + СККР_76_05_Контрагенты + СККР_76_25_Контрагенты + СККР_76_35_Контрагенты
	                   + СККР_76_06_Контрагенты + СККР_76_26_Контрагенты + СККР_76_36_Контрагенты
	                   + СККР_76_01_Контрагенты + СККР_76_21_Контрагенты + СКК_76_03 + СКК_76_04
	                   + СККР_76_09_Контрагенты + СККР_76_29_Контрагенты + СККР_76_39_Контрагенты
	                   + СККР_76_41_Контрагенты + СКК_76_Н;
	
	Если ЭтоБалансДляАУ Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + СККР_76_51_Контрагенты + СККР_76_52_Контрагенты;
	КонецЕсли;
	УстановитьЗначениеПоказателя("П0001001520" + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "Строка 1520 ""Кредиторская задолженность"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_60_03, мСчет["60.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_62_02, мСчет["62.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_62_22, мСчет["62.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_62_32, мСчет["62.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_01_ВидыПлатежей, Счет("68.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.02, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_02_ВидыПлатежей, Счет("68.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.03, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_03_ВидыПлатежей, Счет("68.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.04.1, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СККР_68_04_1_ВидыПлатежейУровни, Счет("68.04.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.07, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_07_ВидыПлатежей, Счет("68.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.08, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_08_ВидыПлатежей, Счет("68.08"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.09, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_09_ВидыПлатежей, Счет("68.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.10, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СККР_68_10_ВидыПлатежейУровни, Счет("68.10"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_11_ВидыПлатежей, Счет("68.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_12_ВидыПлатежей, Счет("68.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_01_ВидыПлатежей, Счет("69.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_1_ВидыПлатежей, Счет("69.02.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_2_ВидыПлатежей, Счет("69.02.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.3, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_3_ВидыПлатежей, Счет("69.02.3"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.4, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_4_ВидыПлатежей, Счет("69.02.4"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.03.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_03_1_ВидыПлатежей, Счет("69.03.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.03.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_03_2_ВидыПлатежей, Счет("69.03.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.04, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_04_ВидыПлатежей, Счет("69.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.05.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_05_1_ВидыПлатежей, Счет("69.05.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.05.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_05_2_ВидыПлатежей, Счет("69.05.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_11_ВидыПлатежей, Счет("69.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_12_ВидыПлатежей, Счет("69.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СККР", СККР_69_13, Счет("69.13"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 70, развернутое по субконто ""Работники организации""", СККР_70_Работники, Счет("70"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", СККР_71_Работники, Счет("71"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_75_02, мСчет["75.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_79, мСчет["79"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", СККР_76_05_Контрагенты, Счет("76.05"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", СККР_76_25_Контрагенты, Счет("76.25"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", СККР_76_35_Контрагенты, Счет("76.35"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", СККР_76_06_Контрагенты, Счет("76.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", СККР_76_26_Контрагенты, Счет("76.26"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", СККР_76_36_Контрагенты, Счет("76.36"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", СККР_76_01_Контрагенты, Счет("76.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", СККР_76_21_Контрагенты, Счет("76.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_76_04, мСчет["76.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", СККР_76_09_Контрагенты, Счет("76.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", СККР_76_29_Контрагенты, Счет("76.29"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", СККР_76_39_Контрагенты, Счет("76.39"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.41, развернутое по субконто ""Контрагенты""", СККР_76_41_Контрагенты, Счет("76.41"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Если ЭтоБалансДляАУ Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", СККР_76_51_Контрагенты, Счет("76.51"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", СККР_76_52_Контрагенты, Счет("76.52"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_76_Н, мСчет["76.Н"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// дополнительные строки к строке 1520
	
	// строка 15201 "Расчеты с поставщиками и подрядчиками"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520104 = СККР_60_01_КонтрагентыДоговоры + СККР_60_21_КонтрагентыДоговоры + СККР_60_31_КонтрагентыДоговоры + СКК_60_03;
		УстановитьЗначениеПоказателя("П0001015201" + Графа, П000101520104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "Строка 15201 ""Расчеты с поставщиками и подрядчиками"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 60.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_01_КонтрагентыДоговоры, мСчет["60.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_21_КонтрагентыДоговоры, мСчет["60.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 60.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_60_31_КонтрагентыДоговоры, мСчет["60.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015201" + Графа, "", "+", "!СКК", СКК_60_03, мСчет["60.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15202 "Расчеты с покупателями и заказчиками"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520204 = СКК_62_02 + СККР_62_01_КонтрагентыДоговоры + СКК_62_22 + СККР_62_21_КонтрагентыДоговоры + СКК_62_32 + СККР_62_31_КонтрагентыДоговоры;
		УстановитьЗначениеПоказателя("П0001015202" + Графа, П000101520204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "Строка 15202 ""Расчеты с покупателями и заказчиками"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_62_02, мСчет["62.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.01, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_01_КонтрагентыДоговоры, мСчет["62.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "!СКК", СКК_62_22, мСчет["62.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.21, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_21_КонтрагентыДоговоры, мСчет["62.21"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "!СКК", СКК_62_32, мСчет["62.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015202" + Графа, "", "+", "Сальдо отрицательное на конец периода по дебету счета 62.31, развернутое по субконто ""Контрагенты"", ""Договоры""", СККР_62_31_КонтрагентыДоговоры, мСчет["62.31"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15203 "Расчеты по налогам и сборам"
	ИмяОбластиПоказателя = "П0001015203" + Графа;
	НаименованиеРасшифровки = "Строка 15203 ""Расчеты по налогам и сборам"", графа """ + ЗаголовокГрафы + """";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СККР_68_01_ВидыПлатежей + СККР_68_02_ВидыПлатежей + СККР_68_03_ВидыПлатежей
		                   + СККР_68_04_1_ВидыПлатежейУровни + СКК_68_04_2
		                   + СККР_68_07_ВидыПлатежей + СККР_68_08_ВидыПлатежей + СККР_68_09_ВидыПлатежей
		                   + СККР_68_10_ВидыПлатежейУровни
		                   + СККР_68_11_ВидыПлатежей + СККР_68_12_ВидыПлатежей
		                   + СКК_68_22 + СКК_68_32;
		
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по кредиту счета 68.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_01_ВидыПлатежей, Счет("68.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.02, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_02_ВидыПлатежей, Счет("68.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.03, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_03_ВидыПлатежей, Счет("68.03"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.04.1, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СККР_68_04_1_ВидыПлатежейУровни, Счет("68.04.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_04_2, мСчет["68.04.2"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.07, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_07_ВидыПлатежей, Счет("68.07"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.08, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_08_ВидыПлатежей, Счет("68.08"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.09, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_09_ВидыПлатежей, Счет("68.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.10, развернутое по субконто ""Виды платежей в бюджет (фонды)"", ""Уровни бюджетов""", СККР_68_10_ВидыПлатежейУровни, Счет("68.10"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_11_ВидыПлатежей, Счет("68.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 68.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_68_12_ВидыПлатежей, Счет("68.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_22, мСчет["68.22"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_68_32, мСчет["68.32"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15204 "Расчеты по социальному страхованию и обеспечению"
	ИмяОбластиПоказателя = "П0001015204" + Графа;
	НаименованиеРасшифровки = "Строка 15204 ""Расчеты по социальному страхованию и обеспечению"", графа """ + ЗаголовокГрафы + """";
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15204", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = СККР_69_01_ВидыПлатежей
		                   + СККР_69_02_1_ВидыПлатежей + СККР_69_02_2_ВидыПлатежей + СККР_69_02_3_ВидыПлатежей + СККР_69_02_4_ВидыПлатежей
		                   + СККР_69_03_1_ВидыПлатежей + СККР_69_03_2_ВидыПлатежей
		                   + СККР_69_04_ВидыПлатежей
		                   + СККР_69_05_1_ВидыПлатежей + СККР_69_05_2_ВидыПлатежей
		                   + СККР_69_11_ВидыПлатежей + СККР_69_12_ВидыПлатежей
		                   + СККР_69_13;
		
		УстановитьЗначениеПоказателя("П0001015204" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "Сальдо на конец периода по кредиту счета 69.01, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_01_ВидыПлатежей, Счет("69.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_1_ВидыПлатежей, Счет("69.02.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_2_ВидыПлатежей, Счет("69.02.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.3, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_3_ВидыПлатежей, Счет("69.02.3"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.02.4, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_02_4_ВидыПлатежей, Счет("69.02.4"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.03.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_03_1_ВидыПлатежей, Счет("69.03.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.03.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_03_2_ВидыПлатежей, Счет("69.03.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.04, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_04_ВидыПлатежей, Счет("69.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.05.1, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_05_1_ВидыПлатежей, Счет("69.05.1"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.05.2, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_05_2_ВидыПлатежей, Счет("69.05.2"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.11, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_11_ВидыПлатежей, Счет("69.11"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "Сальдо на конец периода по кредиту счета 69.12, развернутое по субконто ""Виды платежей в бюджет (фонды)""", СККР_69_12_ВидыПлатежей, Счет("69.12"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СККР", СККР_69_13, Счет("69.13"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15205 "Расчеты с персоналом по оплате труда"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15205", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520504 = СККР_70_Работники;
		УстановитьЗначениеПоказателя("П0001015205" + Графа, П000101520504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015205" + Графа, "Строка 15205 ""Расчеты с персоналом по оплате труда"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 70, развернутое по субконто ""Работники организации""", СККР_70_Работники, Счет("70"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15206 "Расчеты с подотчетными лицами"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15206", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520604 = СККР_71_Работники;
		УстановитьЗначениеПоказателя("П0001015206" + Графа, П000101520604);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015206" + Графа, "Строка 15206 ""Расчеты с подотчетными лицами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 71, развернутое по субконто ""Работники организации""", СККР_71_Работники, Счет("71"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15207 "Задолженность участникам (учредителям) по выплате доходов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15207", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520704 = СКК_75_02;
		УстановитьЗначениеПоказателя("П0001015207" + Графа, П000101520704);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015207" + Графа, "Строка 15207 ""Задолженность участникам (учредителям) по выплате доходов"", графа """ + ЗаголовокДатаОтчетная + """", "+", "!СКК", СКК_75_02, мСчет["75.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15208 "Расчеты с разными дебиторами и кредиторами"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15208", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101520804 = СККР_76_05_Контрагенты + СККР_76_25_Контрагенты + СККР_76_35_Контрагенты
		              + СККР_76_06_Контрагенты + СККР_76_26_Контрагенты + СККР_76_36_Контрагенты
		              + СККР_76_01_Контрагенты + СККР_76_21_Контрагенты + СКК_76_03 + СКК_76_04
		              + СККР_76_09_Контрагенты + СККР_76_29_Контрагенты + СККР_76_39_Контрагенты
		              + СККР_76_41_Контрагенты + СКК_76_Н;
		Если ЭтоБалансДляАУ Тогда
			П000101520804 = П000101520804 + СККР_76_51_Контрагенты + СККР_76_52_Контрагенты;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П0001015208" + Графа, П000101520804);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "Строка 15208 ""Расчеты с разными дебиторами и кредиторами"", графа """ + ЗаголовокГрафы + """", "+", "Сальдо на конец периода по кредиту счета 76.05, развернутое по субконто ""Контрагенты""", СККР_76_05_Контрагенты, мСчет["76.05"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.25, развернутое по субконто ""Контрагенты""", СККР_76_25_Контрагенты, Счет("76.25"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.35, развернутое по субконто ""Контрагенты""", СККР_76_35_Контрагенты, Счет("76.35"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.06, развернутое по субконто ""Контрагенты""", СККР_76_06_Контрагенты, Счет("76.06"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.26, развернутое по субконто ""Контрагенты""", СККР_76_26_Контрагенты, Счет("76.26"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.36, развернутое по субконто ""Контрагенты""", СККР_76_36_Контрагенты, Счет("76.36"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.01, развернутое по субконто ""Контрагенты""", СККР_76_01_Контрагенты, Счет("76.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.21, развернутое по субконто ""Контрагенты""", СККР_76_21_Контрагенты, Счет("76.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_03, мСчет["76.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_04, мСчет["76.04"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.09, развернутое по субконто ""Контрагенты""", СККР_76_09_Контрагенты, Счет("76.09"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.29, развернутое по субконто ""Контрагенты""", СККР_76_29_Контрагенты, Счет("76.29"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.39, развернутое по субконто ""Контрагенты""", СККР_76_39_Контрагенты, Счет("76.39"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.41, развернутое по субконто ""Контрагенты""", СККР_76_41_Контрагенты, Счет("76.41"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		Если ЭтоБалансДляАУ Тогда
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.51, развернутое по субконто ""Контрагенты""", СККР_76_51_Контрагенты, Счет("76.51"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "Сальдо на конец периода по кредиту счета 76.52, развернутое по субконто ""Контрагенты""", СККР_76_52_Контрагенты, Счет("76.52"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015208" + Графа, "", "+", "!СКК", СКК_76_Н, мСчет["76.Н"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	
	НомерСтроки = "1530";
	НаименованиеСтроки = "Доходы будущих периодов";
	
	СКК_86    = СКК("86");
	СКК_98    = СКК("98");
	СКК_98_01 = СКК("98.01");
	СКК_98_02 = СКК("98.02");
	СКК_98_03 = СКК("98.03");
	СКК_98_04 = СКК("98.04");
	
	Если ЭтоБалансНекоммерческойОрганизации Тогда
		ЗначениеПоказателя = СКК_98;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_98, Счет("98"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	Иначе
		ЗначениеПоказателя = СКК_86 + СКК_98;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_86, Счет("86"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001530" + Графа, "", "+", "!СКК", СКК_98, Счет("98"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		
		// строка 15301 "Целевое финансирование"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			П000101530104 = СКК_86;
			УстановитьЗначениеПоказателя("П0001015301" + Графа, П000101530104);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015301" + Графа, "Строка 15301 ""Целевое финансирование"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_86, мСчет["86"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
		КонецЕсли;
	КонецЕсли;
	
	// строка 15302 "Доходы, полученные в счет будущих периодов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101530204 = СКК_98_01;
		УстановитьЗначениеПоказателя("П0001015302" + Графа, П000101530204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015302" + Графа, "Строка 15302 ""Доходы, полученные в счет будущих периодов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_98_01, мСчет["98.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15303 "Безвозмездные поступления"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15303", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101530304 = СКК_98_02;
		УстановитьЗначениеПоказателя("П0001015303" + Графа, П000101530304);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015303" + Графа, "Строка 15303 ""Безвозмездные поступления"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_98_02, мСчет["98.02"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15304 "Предстоящие поступления по недостачам, выявленным за прошлые годы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15304", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101530404 = СКК_98_03;
		УстановитьЗначениеПоказателя("П0001015304" + Графа, П000101530404);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015304" + Графа, "Строка 15304 ""Предстоящие поступления по недостачам, выявленным за прошлые годы"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_98_03, мСчет["98.03"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 15305 "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока15305", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П000101530504 = СКК_98_04;
		УстановитьЗначениеПоказателя("П0001015305" + Графа, П000101530504);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001015305" + Графа, "Строка 15305 ""Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_98_04, Счет("98.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	КонецЕсли;
	
	// строка 1540 "Резервы предстоящих расходов"
	
	СКК_96 = СКК("96");
	
	П000100154004 = СКК_96;
	УстановитьЗначениеПоказателя("П0001001540" + Графа, П000100154004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001540" + Графа, "Строка 1540 ""Резервы предстоящих расходов"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_96, Счет("96"), , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
	// строка 1550 "Прочие обязательства"
	П000100155004_76_ВА = СКК("76.ВА");
	П000100155004_76_НА = СКК("76.НА");
	
	П000100155004 = П000100155004_76_ВА + П000100155004_76_НА;
	УстановитьЗначениеПоказателя("П0001001550" + Графа, П000100155004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001550" + Графа, "Строка 1550 ""Прочие обязательства"", графа """ + ЗаголовокГрафы + """", "+", "!СКК", П000100155004_76_ВА, мСчет["76.ВА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001001550" + Графа, "", "+", "!СКК", П000100155004_76_НА, мСчет["76.НА"], , НачалоПериодаОтчета, КонецПериодаОтчета, "Баланс");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_02_01_Сервер(Запрос, ЭтоБалансДляАУ, НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;

	Если ЭтоБалансДляАУ Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
		               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
		               |ПОМЕСТИТЬ ВТ_Сальдо_01_01
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет01_01, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
		               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
		               |ПОМЕСТИТЬ ВТ_Сальдо_01_08
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет01_08, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
		               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
		               |ПОМЕСТИТЬ ВТ_Сальдо_01_11
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет01_11, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ВТ_Сальдо_01_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |			ТОГДА 0
		               |		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		               |	КОНЕЦ КАК СКК_02_01__01_01,
		               |	ВЫБОР
		               |		КОГДА ВТ_Сальдо_01_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |				И (НЕ ВТ_Сальдо_01_08.СуммаКонечныйОстатокДт ЕСТЬ NULL )
		               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СКК_02_01__01_08,
		               |	ВЫБОР
		               |		КОГДА ВТ_Сальдо_01_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |				И ВТ_Сальдо_01_08.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |				И (НЕ ВТ_Сальдо_01_11.СуммаКонечныйОстатокДт ЕСТЬ NULL )
		               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СКК_02_01__01_11
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет02_01, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_01_01 КАК ВТ_Сальдо_01_01
		               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_01_01.ОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_01_08 КАК ВТ_Сальдо_01_08
		               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_01_08.ОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_01_11 КАК ВТ_Сальдо_01_11
		               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_01_11.ОС
		               |ИТОГИ
		               |	СУММА(СКК_02_01__01_01),
		               |	СУММА(СКК_02_01__01_08),
		               |	СУММА(СКК_02_01__01_11)
		               |ПО
		               |	ОБЩИЕ";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
		               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
		               |ПОМЕСТИТЬ ВТ_Сальдо_01_01
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет01_01, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
		               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
		               |ПОМЕСТИТЬ ВТ_Сальдо_01_08
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет01_08, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ВТ_Сальдо_01_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |			ТОГДА 0
		               |		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		               |	КОНЕЦ КАК СКК_02_01__01_01,
		               |	ВЫБОР
		               |		КОГДА ВТ_Сальдо_01_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
		               |				И (НЕ ВТ_Сальдо_01_08.СуммаКонечныйОстатокДт ЕСТЬ NULL )
		               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СКК_02_01__01_08
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет02_01, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_01_01 КАК ВТ_Сальдо_01_01
		               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_01_01.ОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_01_08 КАК ВТ_Сальдо_01_08
		               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_01_08.ОС
		               |ИТОГИ
		               |	СУММА(СКК_02_01__01_01),
		               |	СУММА(СКК_02_01__01_08)
		               |ПО
		               |	ОБЩИЕ";
	КонецЕсли;

	Запрос.УстановитьПараметр("НачПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_02_01_Сервер_1(Запрос, ЭтоБалансДляАУ)

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("СКК_02_01__01_01", 0);
	ВозвращаемоеЗначение.Вставить("СКК_02_01__01_08", 0);
	Если ЭтоБалансДляАУ Тогда
		ВозвращаемоеЗначение.Вставить("СКК_02_01__01_11", 0);
	КонецЕсли;

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
КонецФункции


&НаКлиенте
Функция ПолучитьРазделенноеСальдоСчета_02_01(НачалоПериода, КонецПериода, Организация)
	Перем Запрос, ЭтоБалансДляАУ;

	ПолучитьРазделенноеСальдоСчета_02_01_Сервер(Запрос, ЭтоБалансДляАУ, НачалоПериода, КонецПериода);
	Запрос.УстановитьПараметр("Счет01_01", Счет("01.01"));
	Запрос.УстановитьПараметр("Счет01_08", Счет("01.08"));
	Запрос.УстановитьПараметр("Счет02_01", Счет("02.01"));
	Если ЭтоБалансДляАУ Тогда
		Запрос.УстановитьПараметр("Счет01_11", Счет("01.11"));
	КонецЕсли;

	ПолучитьРазделенноеСальдоСчета_02_01_Сервер_1(Запрос, ЭтоБалансДляАУ);

КонецФункции

&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_02_02_Сервер(Запрос, НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	               |ПОМЕСТИТЬ ВТ_Сальдо_03_01
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет03_01, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	               |ПОМЕСТИТЬ ВТ_Сальдо_03_02
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет03_02, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	               |ПОМЕСТИТЬ ВТ_Сальдо_03_03
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет03_03, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	               |ПОМЕСТИТЬ ВТ_Сальдо_03_04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет03_04, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ВТ_Сальдо_03_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |	КОНЕЦ КАК СКК_02_02__03_01,
	               |	ВЫБОР
	               |		КОГДА ВТ_Сальдо_03_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И (НЕ ВТ_Сальдо_03_02.СуммаКонечныйОстатокДт ЕСТЬ NULL )
	               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СКК_02_02__03_02,
	               |	ВЫБОР
	               |		КОГДА ВТ_Сальдо_03_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И ВТ_Сальдо_03_02.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И (НЕ ВТ_Сальдо_03_03.СуммаКонечныйОстатокДт ЕСТЬ NULL )
	               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СКК_02_02__03_03,
	               |	ВЫБОР
	               |		КОГДА ВТ_Сальдо_03_01.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И ВТ_Сальдо_03_02.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И ВТ_Сальдо_03_03.СуммаКонечныйОстатокДт ЕСТЬ NULL 
	               |				И (НЕ ВТ_Сальдо_03_04.СуммаКонечныйОстатокДт ЕСТЬ NULL )
	               |			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СКК_02_02__03_04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет = &Счет02_02, &ВидыСубконто, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_03_01 КАК ВТ_Сальдо_03_01
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_03_01.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_03_02 КАК ВТ_Сальдо_03_02
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_03_02.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_03_03 КАК ВТ_Сальдо_03_03
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_03_03.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сальдо_03_04 КАК ВТ_Сальдо_03_04
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_Сальдо_03_04.ОС
	               |ИТОГИ
	               |	СУММА(СКК_02_02__03_01),
	               |	СУММА(СКК_02_02__03_02),
	               |	СУММА(СКК_02_02__03_03),
	               |	СУММА(СКК_02_02__03_04)
	               |ПО
	               |	ОБЩИЕ";

	Запрос.УстановитьПараметр("НачПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_02_02_Сервер_1(Запрос)

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("СКК_02_02__03_01", 0);
	ВозвращаемоеЗначение.Вставить("СКК_02_02__03_02", 0);
	ВозвращаемоеЗначение.Вставить("СКК_02_02__03_03", 0);
	ВозвращаемоеЗначение.Вставить("СКК_02_02__03_04", 0);

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
КонецФункции


&НаКлиенте
Функция ПолучитьРазделенноеСальдоСчета_02_02(НачалоПериода, КонецПериода, Организация)
	Перем Запрос;

	ПолучитьРазделенноеСальдоСчета_02_02_Сервер(Запрос, НачалоПериода, КонецПериода);
	Запрос.УстановитьПараметр("Счет03_01", Счет("03.01"));
	Запрос.УстановитьПараметр("Счет03_02", Счет("03.02"));
	Запрос.УстановитьПараметр("Счет03_03", Счет("03.03"));
	Запрос.УстановитьПараметр("Счет03_04", Счет("03.04"));
	Запрос.УстановитьПараметр("Счет02_02", Счет("02.02"));

	ПолучитьРазделенноеСальдоСчета_02_02_Сервер_1(Запрос);

КонецФункции

&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_97_Сервер(СтруктураСальдо97, Запрос, НачалоПериода, КонецПериода)
	
	СтруктураСальдо97 = Новый Соответствие;
	Для Каждого ВидАктиваРБП Из Перечисления.ВидыАктивовДляРБП Цикл
		СтруктураСальдо97.Вставить(ВидАктиваРБП, 0);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходыБудущихПериодов.Ссылка КАК РБП,
	               |	ВЫБОР
	               |		КОГДА РасходыБудущихПериодов.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
	               |		ИНАЧЕ РасходыБудущихПериодов.ВидАктива
	               |	КОНЕЦ КАК ВидАктива
	               |ПОМЕСТИТЬ ВТ_ВидыАктивовРБП
	               |ИЗ
	               |	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ВидыАктивовРБП.ВидАктива, ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)) КАК ВидАктиваРБП,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет В ИЕРАРХИИ (&СчетаРБП), &ВидСубконтоРБП, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыАктивовРБП КАК ВТ_ВидыАктивовРБП
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ВидыАктивовРБП.РБП
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВТ_ВидыАктивовРБП.ВидАктива, ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы))";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_97_Сервер_1(Запрос, СтруктураСальдо97)
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСальдо97.Вставить(Выборка.ВидАктиваРБП, Выборка.СуммаКонечныйОстатокДт);
	КонецЦикла;
	
	Возврат СтруктураСальдо97;
КонецФункции


&НаКлиенте
Функция ПолучитьРазделенноеСальдоСчета_97(НачалоПериода, КонецПериода, Организация)
	Перем СтруктураСальдо97, Запрос;
	
	ПолучитьРазделенноеСальдоСчета_97_Сервер(СтруктураСальдо97, Запрос, НачалоПериода, КонецПериода);
	Запрос.УстановитьПараметр("СчетаРБП", Счет("97"));
	
	ПолучитьРазделенноеСальдоСчета_97_Сервер_1(Запрос, СтруктураСальдо97);
	
КонецФункции

&НаСервере
Функция ПолучитьРазделенноеСальдоСчета_76(Субсчет, НачалоПериода, КонецПериода, Организация)
	
	СтруктураСальдо = Новый Соответствие;
	Для Каждого ВидАктиваРБП Из Перечисления.ВидыАктивовДляРБП Цикл
		СтруктураСальдо.Вставить(ВидАктиваРБП, 0);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходыБудущихПериодов.Ссылка КАК РБП,
	               |	ВЫБОР
	               |		КОГДА РасходыБудущихПериодов.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
	               |		ИНАЧЕ РасходыБудущихПериодов.ВидАктива
	               |	КОНЕЦ КАК ВидАктива
	               |ПОМЕСТИТЬ ВТ_ВидыАктивовРБП
	               |ИЗ
	               |	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ВидыАктивовРБП.ВидАктива, ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)) КАК ВидАктиваРБП,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &СчетРБП, , Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыАктивовРБП КАК ВТ_ВидыАктивовРБП
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ВидыАктивовРБП.РБП
	               |ИТОГИ
	               |	СУММА(СуммаКонечныйРазвернутыйОстатокДт)
	               |ПО
	               |	ВидАктиваРБП";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СчетРБП", Субсчет);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		СтруктураСальдо.Вставить(Выборка.ВидАктиваРБП, Выборка.СуммаКонечныйРазвернутыйОстатокДт);
	КонецЦикла;
	
	Возврат СтруктураСальдо;
	
КонецФункции

// Процедура выполняет заполнение отчета об прибылях и убытках
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
&НаКлиенте
Процедура ЗаполнитьАвтоФормаОтчета()
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 48 переход(а|ов) на сервер

	
	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	
	// объект для хранения результатов запроса к бухитогам за предшествующий период
	БухИтогиПред = Обработки.БухгалтерскиеИтоги.Создать();
	
	// вспомогательные даты предыдущих периодов
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета = мДатаКонцаПериодаОтчета;
	ДатаНачалаПериодаПредшествующегоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредшествующегоГода = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	Итоги = "КонечныйОстатокДт, ОборотДт, ОборотКт, КорОборотДт";
	БухИтогиПред.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	// Заполнение доп.строк с учетом настройки состава
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);	
	
	// Получаем все необходымые данные для вывода подстрок
	// обороты по счетам по аналитике "Номенклатурная группа"
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.01")); // Обороты по субсчетам получаются автоматически
	СчетаОборотов.Добавить(Счет("90.03"));
	СчетаОборотов.Добавить(Счет("90.04"));
	СчетаОборотов.Добавить(Счет("90.05"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя по ЕНВД в основном периоде для определения множества выводимых строк
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_Пред", 	ОписаниеТиповЧисло15); // величина в аналогичном периоде предшествующего года
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_1_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_1_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("КО_90_01_2_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_03_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_03_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_04_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_04_Пред", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_05_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_05_Пред", 	ОписаниеТиповЧисло15);
	
	// строки 2110 или строки 21101, 21102
	Если ИспользуютсяМакетыЕНВД() Тогда
		КО_90_01_1_Отч = КО("90.01.1");
		ДО_90_03_Отч   = ДО("90.03");
		ДО_90_04_Отч   = ДО("90.04");
		ДО_90_05_Отч   = ДО("90.05");
		
		П000102110104 = КО_90_01_1_Отч - ДО_90_03_Отч - ДО_90_04_Отч - ДО_90_05_Отч;
		УстановитьЗначениеПоказателя("П000102110104", П000102110104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "Выручка по деятельности с основной системой налогообложения, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_1_Отч, Счет("90.01.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_03_Отч, Счет("90.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_04_Отч, Счет("90.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110104", "", "-", "!ДО", ДО_90_05_Отч, Счет("90.05"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		КО_90_01_1_Пред = КО("90.01.1", БухИтогиПред);
		ДО_90_03_Пред   = ДО("90.03", БухИтогиПред);
		ДО_90_04_Пред   = ДО("90.04", БухИтогиПред);
		ДО_90_05_Пред   = ДО("90.05", БухИтогиПред);
		
		П000102110105 = КО_90_01_1_Пред - ДО_90_03_Пред - ДО_90_04_Пред - ДО_90_05_Пред;
		УстановитьЗначениеПоказателя("П000102110105", П000102110105);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "Выручка по деятельности с основной системой налогообложения, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_1_Пред, Счет("90.01.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_03_Пред, Счет("90.03"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_04_Пред, Счет("90.04"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110105", "", "-", "!ДО", ДО_90_05_Пред, Счет("90.05"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		КО_90_01_2_Отч = КО("90.01.2");
		
		П000102110204 = КО_90_01_2_Отч;
		УстановитьЗначениеПоказателя("П000102110204", П000102110204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110204", "Выручка по отдельным видам деятельности (ЕНВД), графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_2_Отч, Счет("90.01.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		КО_90_01_2_Пред = КО("90.01.2", БухИтогиПред);
		
		П000102110205 = КО_90_01_2_Пред;
		УстановитьЗначениеПоказателя("П000102110205", П000102110205);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102110205", "Выручка по отдельным видам деятельности (ЕНВД), графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", КО_90_01_2_Пред, Счет("90.01.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 21101
		ЗначениеОсновногоПоказателяНеЕНВД = П000102110104;
	
		// определяем основной показатель для доп.строк строки 21102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = П000102110205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = П000102110204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2110 будут определены в блоке основного расчета
		П000100211004 = КО("90.01") - ДО("90.03") - ДО("90.04") - ДО("90.05");
		П000100211005 = КО("90.01", БухИтогиПред) - ДО("90.03", БухИтогиПред) - ДО("90.04", БухИтогиПред) - ДО("90.05", БухИтогиПред);
		
		// основной показатель для строки 2110
		ЗначениеОсновногоПоказателяНеЕНВД = П000100211004;
	
	КонецЕсли;
	
	// детальные сведения за период отчета
	ИтогиРС = "ОборотДт, ОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.КО_90_01_Отч   = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.2"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_03_Отч   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.03"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_04_Отч   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.04"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_05_Отч   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.05"), ВыбранноеСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	// детальные сведения за аналогичный период предшествующего года
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.КО_90_01_Пред   = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.КО_90_01_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("90.01.2"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_03_Пред   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.03"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_04_Пред   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.04"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_05_Пред   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.05"), ВыбранноеСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|КО_90_01_1_Отч, КО_90_01_1_Пред, 
											|КО_90_01_2_Отч, КО_90_01_2_Пред, 
											|ДО_90_03_Отч, ДО_90_03_Пред, 
											|ДО_90_04_Отч, ДО_90_04_Пред, 
											|ДО_90_05_Отч, ДО_90_05_Пред");
											
	// Заполнение доп.строк состава строки "Выручка по деятельности с основной системой налогообложения"
	// это может быть как строка 2110 так и строка 21101
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_1_Отч
											- СтрокаРезультата.ДО_90_03_Отч 
											- СтрокаРезультата.ДО_90_04_Отч 
											- СтрокаРезультата.ДО_90_05_Отч;
	КонецЦикла;
	
	// Отбираем строки для вывода в расшифровку по НеЕНВД
	СтрокиКВыводуНеЕНВД = Новый Массив();
	
	// получение ветви дерева настроек для выводимых строк
	Если ИспользуютсяМакетыЕНВД() Тогда
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21101", "Код");
	Иначе
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2110", "Код");
	КонецЕсли;
	
	Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
		Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
			ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
						   И СтрокаРезультата.ЗначениеПоказателя <> 0
						   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
						   И ВетвьДереваНастроек.ВключатьВОтчет;
			Если ВыводитьСтроку Тогда
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		 	КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
			СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
			Если СтрокаРезультата <> Неопределено Тогда
				// строка найдена и будет добавлена
			Иначе
				// создаем строку с заполненной аналитикой и нулевыми значениями
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
			КонецЕсли;
			СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
		
		// получаем указатели на места вывода значений
		КоординатаВывода = ?(ИспользуютсяМакетыЕНВД(), "П1001021101", "П1001002110");
		НаименованиеСтрокиВывода = ?(ИспользуютсяМакетыЕНВД(),
									 "Расшифровка строки 21101 ""Выручка по деятельности с основной системой налогообложения"" по номенклатурной группе",
									 "Расшифровка строки 2110 ""Выручка"" по номенклатурной группе");
		ИдентификаторМногострочногоРаздела = ?(ИспользуютсяМакетыЕНВД(), "П1001021101", "П1001002110");
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
		ТаблицаМногострочногоРаздела.Очистить();
		ВыведеноСтрок = 1;
		Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
			ЗначениеОтч = СтрокаКВыводу.КО_90_01_1_Отч
						- СтрокаКВыводу.ДО_90_03_Отч 
						- СтрокаКВыводу.ДО_90_04_Отч 
						- СтрокаКВыводу.ДО_90_05_Отч;
			ЗначениеПред = СтрокаКВыводу.КО_90_01_1_Пред
						 - СтрокаКВыводу.ДО_90_03_Пред 
						 - СтрокаКВыводу.ДО_90_04_Пред 
						 - СтрокаКВыводу.ДО_90_05_Пред;
			
			НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ИспользуютсяМакетыЕНВД(),
																		   "",
																		   Формат(21101 + ВыведеноСтрок - 1, "ЧГ=0"));
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", СтрокаКВыводу.КО_90_01_1_Отч, Счет("90.01.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_03_Отч, Счет("90.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_04_Отч, Счет("90.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_05_Отч, Счет("90.05"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", СтрокаКВыводу.КО_90_01_1_Пред, Счет("90.01.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_03_Пред, Счет("90.03"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_04_Пред, Счет("90.04"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, "", "-", "!ДО", СтрокаКВыводу.ДО_90_05_Пред, Счет("90.05"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
		
	КонецЕсли;
	
	// Заполнение расшифровки строки 21102
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		Если ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			// за основу для отбора данных будут использоваться сведения периода отчета
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_2_Отч;
			КонецЦикла;
		Иначе
			// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.КО_90_01_2_Пред;
			КонецЦикла;
		КонецЕсли;
		
		
		// Отбираем строки для вывода в расшифровку по НеЕНВД
		СтрокиКВыводуЕНВД = Новый Массив();
		// получение ветви дерева настроек для выводимых строк
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21102", "Код");
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
						   	   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
			// получаем указатели на места вывода значений
			КоординатаВывода = "П1001021102";
			НаименованиеСтрокиВывода = "Расшифровка строки 21102 ""Выручка по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
			ИдентификаторМногострочногоРаздела = "П1001021102";
			ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
				ЗначениеОтч = СтрокаКВыводу.КО_90_01_2_Отч;
				ЗначениеПред = СтрокаКВыводу.КО_90_01_2_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", ЗначениеОтч, Счет("90.01.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", ЗначениеПред, Счет("90.01.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Строки расшифровки строки 2120
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.02")); // Обороты по субсчетам расчитываются автоматически
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_02_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ИспользуютсяМакетыЕНВД() Тогда
		П000102120104 = -ДО("90.02.1");
		УстановитьЗначениеПоказателя("П000102120104", П000102120104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120104", "Строка 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102120104, мСчет["90.02.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102120105 = -ДО("90.02.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102120105", П000102120105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120105", "Строка 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102120105, мСчет["90.02.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102120204 = -ДО("90.02.2");
		УстановитьЗначениеПоказателя("П000102120204", П000102120204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120204", "Строка 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102120204, мСчет["90.02.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102120205 = -ДО("90.02.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102120205", П000102120205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120205", "Строка 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102120205, мСчет["90.02.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 21201
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102120104;
		
		// определяем основной показатель для доп.строк строки 21202
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102120205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102120204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2120 будут определены в блоке основного расчета
		П000100212004 = -ДО("90.02");
		П000100212005 = -ДО("90.02", БухИтогиПред);
		
		// основной показатель для строки 2120
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100212004;
		
	КонецЕсли;
	
	// детальные сведения за период отчета
	ИтогиРС = "ОборотДт, ОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1",ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.ДО_90_02_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_02_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.2"), ВыбранноеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за аналогичный период предшествующего года
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
			НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
			НоваяСтрокаРезультата.ДО_90_02_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.1"), ВыбранноеСубконто);
			НоваяСтрокаРезультата.ДО_90_02_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("90.02.2"), ВыбранноеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_02_1_Отч, ДО_90_02_1_Пред, 
											|ДО_90_02_2_Отч, ДО_90_02_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_1_Отч;
	КонецЦикла;
	
	// Отбираем строки для вывода в расшифровку по НеЕНВД
	СтрокиКВыводуНеЕНВД = Новый Массив();
	
	// получение ветви дерева настроек для выводимых строк
	Если ИспользуютсяМакетыЕНВД() Тогда
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21201", "Код");
	Иначе
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2120", "Код");
	КонецЕсли;
	
	Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
		Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
			ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
						   И СтрокаРезультата.ЗначениеПоказателя <> 0
						   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
						   И ВетвьДереваНастроек.ВключатьВОтчет;
			Если ВыводитьСтроку Тогда
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		 	КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
			СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
			Если СтрокаРезультата <> Неопределено Тогда
				// строка найдена и будет добавлена
			Иначе
				// создаем строку с заполненной аналитикой и нулевыми значениями
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
			КонецЕсли;
			СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
		
		// получаем указатели на места вывода значений
		КоординатаВывода = ?(ИспользуютсяМакетыЕНВД(), "П1001021201", "П1001002120");
		НаименованиеСтрокиВывода = ?(ИспользуютсяМакетыЕНВД(),
									 "Расшифровка строки 21201 ""Cебестоимость продаж по деятельности с основной системой налогообложения"" по номенклатурной группе",
									 "Расшифровка строки 2120 ""Cебестоимость продаж"" по номенклатурной группе");
		ИдентификаторМногострочногоРаздела = ?(ИспользуютсяМакетыЕНВД(), "П1001021201", "П1001002120");
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
		ТаблицаМногострочногоРаздела.Очистить();
		ВыведеноСтрок = 1;
		Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
			ЗначениеОтч = -СтрокаКВыводу.ДО_90_02_1_Отч;
			ЗначениеПред = -СтрокаКВыводу.ДО_90_02_1_Пред;
			
			НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ИспользуютсяМакетыЕНВД(),
																		   "",
																		   Формат(21201 + ВыведеноСтрок - 1, "ЧГ=0"));
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.02.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.02.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
		
	КонецЕсли;
	
	// Заполнение расшифровки строки 22202
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		Если ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			// за основу для отбора данных будут использоваться сведения периода отчета
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_2_Отч;
			КонецЦикла;
		Иначе
			// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_02_2_Пред;
			КонецЦикла;
		КонецЕсли;
		
		
		// Отбираем строки для вывода в расшифровку по ЕНВД
		СтрокиКВыводуЕНВД = Новый Массив();
		// получение ветви дерева настроек для выводимых строк
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("21202", "Код");
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
			// получаем указатели на места вывода значений
			КоординатаВывода = "П1001021202";
			НаименованиеСтрокиВывода = "Расшифровка строки 21202 ""Cебестоимость продаж по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
			ИдентификаторМногострочногоРаздела = "П1001021202";
			ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_02_2_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_02_2_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.02.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.02.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета", , , , СтрокаКВыводу.Субконто);
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Строки расшифровки строки 2210
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.07"));
	
	СчетаОборотовКор = Новый Массив;
	СчетаОборотовКор.Добавить(Счет("44"));

	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_07_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ИспользуютсяМакетыЕНВД() Тогда
		П000102210104 = -ДО("90.07.1");
		УстановитьЗначениеПоказателя("П000102210104", П000102210104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210104", "Строка 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102210104, мСчет["90.07.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102210105 = -ДО("90.07.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102210105", П000102210105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102120105", "Строка 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102210105, мСчет["90.07.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102210204 = -ДО("90.07.2");
		УстановитьЗначениеПоказателя("П000102210204", П000102210204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210204", "Строка 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102210204, мСчет["90.07.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102210205 = -ДО("90.07.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102210205", П000102210205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102210205", "Строка 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102210205, мСчет["90.07.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 22101
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102210104;
		
		// определяем основной показатель для строк расшифровки строки 22102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102210205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102210204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2210 будут определены в блоке основного расчета
		П000100221004 = -ДО("90.07");
		П000100221005 = -ДО("90.07", БухИтогиПред);
		
		// основной показатель для строки 2210
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100221004;
		
	КонецЕсли;

	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспонидрующие счета
	// кореспонденция со счетом 90.07.1
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// Пропускаем группы как элемент иерархии результатов запроса.
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_07_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.1"));
				НоваяСтрокаРезультата.ДО_90_07_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспонидрующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// Пропускаем группы как элемент иерархии результатов запроса.
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_07_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.1"));
				НоваяСтрокаРезультата.ДО_90_07_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.07.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_07_1_Отч, ДО_90_07_1_Пред, 
											|ДО_90_07_2_Отч, ДО_90_07_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_1_Отч;
	КонецЦикла;
	
	// Отбираем строки для вывода в расшифровку по НеЕНВД
	СтрокиКВыводуНеЕНВД = Новый Массив();
	
	// получение ветви дерева настроек для выводимых строк
	Если ИспользуютсяМакетыЕНВД() Тогда
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22101", "Код");
	Иначе
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2210", "Код");
	КонецЕсли;
	
	Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
		Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
			ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
						   И СтрокаРезультата.ЗначениеПоказателя <> 0
						   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
						   И ВетвьДереваНастроек.ВключатьВОтчет;
			Если ВыводитьСтроку Тогда
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		 	КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
			СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
			Если СтрокаРезультата <> Неопределено Тогда
				// строка найдена и будет добавлена
			Иначе
				// создаем строку с заполненной аналитикой и нулевыми значениями
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
			КонецЕсли;
			СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
		
		// получаем указатели на места вывода значений
		КоординатаВывода = ?(ИспользуютсяМакетыЕНВД(), "П1001022101", "П1001002210");
		НаименованиеСтрокиВывода = ?(ИспользуютсяМакетыЕНВД(),
									 "Расшифровка строки 22101 ""Коммерческие расходы по деятельности с основной системой налообложения"" по статье затрат",
									 "Расшифровка строки 2210 ""Коммерческие расходы"" по статье затрат");
		ИдентификаторМногострочногоРаздела = ?(ИспользуютсяМакетыЕНВД(), "П1001022101", "П1001002210");
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
		ТаблицаМногострочногоРаздела.Очистить();
		ВыведеноСтрок = 1;
		Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
			ЗначениеОтч = -СтрокаКВыводу.ДО_90_07_1_Отч;
			ЗначениеПред = -СтрокаКВыводу.ДО_90_07_1_Пред;
			
			НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ИспользуютсяМакетыЕНВД(),
																		   "",
																		   Формат(22101 + ВыведеноСтрок - 1, "ЧГ=0"));
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -ЗначениеОтч, Счет("90.07.1"), Счет("44"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -ЗначениеПред, Счет("90.07.1"), Счет("44"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
		
	КонецЕсли;
	
	// Заполнение расшифровки строки 22102
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		Если ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			// за основу для отбора данных будут использоваться сведения периода отчета
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_2_Отч;
			КонецЦикла;
		Иначе
			// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_07_2_Пред;
			КонецЦикла;
		КонецЕсли;
		
		
		// Отбираем строки для вывода в расшифровку по ЕНВД
		СтрокиКВыводуЕНВД = Новый Массив();
		// получение ветви дерева настроек для выводимых строк
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22102", "Код");
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;						  
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
			// получаем указатели на места вывода значений
			КоординатаВывода = "П1001022102";
			НаименованиеСтрокиВывода = "Расшифровка строки 22102 ""Коммерческие расходы по отдельным видам деятельности (ЕНВД)"" по номенклатурной группе";
			ИдентификаторМногострочногоРаздела = "П1001022102";
			ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_07_2_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_07_2_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", -ЗначениеОтч, Счет("90.07.2"), Счет("44"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", -ЗначениеПред, Счет("90.07.2"), Счет("44"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Строки расшифровки строки 2220
	
	СчетаОборотов = Новый Массив;
	СчетаОборотов.Добавить(Счет("90.08"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("20.01"));
	СчетаОборотовКор.Добавить(Счет("23"));
	СчетаОборотовКор.Добавить(Счет("25"));
	СчетаОборотовКор.Добавить(Счет("26"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Субконто");
	ТаблицаРезультатов.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЧисло15); // Значение показателя для отбора строк
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_1_Отч", 	ОписаниеТиповЧисло15); // величина в отчетном период
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_1_Пред", 	ОписаниеТиповЧисло15); // величина в предшествующем периоде
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_2_Отч", 	ОписаниеТиповЧисло15);
	ТаблицаРезультатов.Колонки.Добавить("ДО_90_08_2_Пред", 	ОписаниеТиповЧисло15);
	
	// определение основных показателей
	Если ИспользуютсяМакетыЕНВД() Тогда
		П000102220104 = -ДО("90.08.1");
		УстановитьЗначениеПоказателя("П000102220104", П000102220104);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220104", "Строка 22201 ""Управленческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102220104, мСчет["90.08.1"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102220105 = -ДО("90.08.1", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102220105", П000102220105);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220105", "Строка 22201 ""Управленческие расходы по деятельности с основной системой налообложения"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102220105, мСчет["90.08.1"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		П000102220204 = -ДО("90.08.2");
		УстановитьЗначениеПоказателя("П000102220204", П000102220204);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220204", "Строка 22202 ""Управленческие  расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", -П000102220204, мСчет["90.08.2"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		
		П000102220205 = -ДО("90.08.2", БухИтогиПред);
		УстановитьЗначениеПоказателя("П000102220205", П000102220205);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000102220205", "Строка 22202 ""Управленческие  расходы по отдельным видам деятельности (ЕНВД)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", -П000102220205, мСчет["90.08.2"], , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		
		// основной показатель для строки 22101
		ЗначениеОсновногоПоказателяНеЕНВД = -П000102220104;
		
		// определяем основной показатель для строк расшифровки строки 22102
		// если в отчетном периоде не применялся ЕНВД, то возможно он применялся в предшествующем году
		Если НЕ ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			ЗначениеОсновногоПоказателяЕНВД = -П000102220205;
		Иначе
			ЗначениеОсновногоПоказателяЕНВД = -П000102220204;
		КонецЕсли;
		
	Иначе
		// показатели строки 2220 будут определены в блоке основного расчета
		П000100222004 = -ДО("90.08");
		П000100222005 = -ДО("90.08", БухИтогиПред);
		
		// основной показатель для строки 2220
		ЗначениеОсновногоПоказателяНеЕНВД = -П000100222004;
		
	КонецЕсли;

	// детальные сведения за период отчета, для удобства обработки бухитогов основными счетами считаются корреспондирующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// Пропускаем группы как элемент иерархии результатов запроса.
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_08_1_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.1"));
				НоваяСтрокаРезультата.ДО_90_08_2_Отч = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// детальные сведения за период предшествующего года, для удобства обработки бухитогов основными счетами считаются корреспондирующие счета
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотовКор, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, СчетаОборотов, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОборотыРС = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаСубконто = ОстаткиИОборотыРС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока ВыборкаСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаСубконто.Субконто1;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			// пропускаем группы как элемент иерархии результатов запроса
			Если ВыбранноеСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СчетОборотовКор Из СчетаОборотовКор Цикл
				НоваяСтрокаРезультата = ТаблицаРезультатов.Добавить();
				НоваяСтрокаРезультата.Субконто = ВыбранноеСубконто;
				НоваяСтрокаРезультата.ДО_90_08_1_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.1"));
				НоваяСтрокаРезультата.ДО_90_08_2_Пред = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", СчетОборотовКор, ВыбранноеСубконто, Счет("90.08.2"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультатов.Свернуть("Субконто", "ЗначениеПоказателя, 
											|ДО_90_08_1_Отч, ДО_90_08_1_Пред, 
											|ДО_90_08_2_Отч, ДО_90_08_2_Пред");
											
	// Расчет значений показателей по основной системе налогообложения для отбора
	Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
		СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_1_Отч;
	КонецЦикла;
	
	// Отбираем строки для вывода в расшифровку по НеЕНВД
	СтрокиКВыводуНеЕНВД = Новый Массив();
	
	// получение ветви дерева настроек для выводимых строк
	Если ИспользуютсяМакетыЕНВД() Тогда
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22201", "Код");
	Иначе
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("2220", "Код");
	КонецЕсли;
	
	Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
		Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
			ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуНеЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
						   И СтрокаРезультата.ЗначениеПоказателя <> 0
						   И ЗначениеОсновногоПоказателяНеЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
						   И ВетвьДереваНастроек.ВключатьВОтчет;
			Если ВыводитьСтроку Тогда
				СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		 	КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
			СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
			Если СтрокаРезультата <> Неопределено Тогда
				// строка найдена и будет добавлена
			Иначе
				// создаем строку с заполненной аналитикой и нулевыми значениями
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
			КонецЕсли;
			СтрокиКВыводуНеЕНВД.Добавить(СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиКВыводуНеЕНВД.Количество() > 0 Тогда
		
		// получаем указатели на места вывода значений
		КоординатаВывода = ?(ИспользуютсяМакетыЕНВД(), "П1001022201", "П1001002220");
		НаименованиеСтрокиВывода = ?(ИспользуютсяМакетыЕНВД(),
									 "Расшифровка строки 22201 ""Управленческие расходы по деятельности с основной системой налообложения"" по статье затрат",
									 "Расшифровка строки 2220 ""Управленческие расходы"" по статье затрат");
		ИдентификаторМногострочногоРаздела = ?(ИспользуютсяМакетыЕНВД(), "П1001022201", "П1001002220");
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
		ТаблицаМногострочногоРаздела.Очистить();
		ВыведеноСтрок = 1;
		Для Каждого СтрокаКВыводу Из СтрокиКВыводуНеЕНВД Цикл
			ЗначениеОтч = -СтрокаКВыводу.ДО_90_08_1_Отч;
			ЗначениеПред = -СтрокаКВыводу.ДО_90_08_1_Пред;
			
			НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = ?(ИспользуютсяМакетыЕНВД(),
																		   "",
																		   Формат(22201 + ВыведеноСтрок - 1, "ЧГ=0"));
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
			НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.1 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеОтч, Счет("90.08.1"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.1 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеПред, Счет("90.08.1"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
		
	КонецЕсли;
	
	// Заполнение расшифровки строки 22202
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		Если ОрганизацияПрименяетЕНВД(мОргРасшифровка, ДатаКонцаПериодаОтчета) Тогда
			// за основу для отбора данных будут использоваться сведения периода отчета
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_2_Отч;
			КонецЦикла;
		Иначе
			// за основу для отбора данных будут использоваться сведения аналогичного периода предшествующего года
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				СтрокаРезультата.ЗначениеПоказателя = СтрокаРезультата.ДО_90_08_2_Пред;
			КонецЦикла;
		КонецЕсли;
		
		
		// Отбираем строки для вывода в расшифровку по ЕНВД
		СтрокиКВыводуЕНВД = Новый Массив();
		// получение ветви дерева настроек для выводимых строк
		ВетвьДереваНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("22202", "Код");
		
		Если ВетвьДереваНастроек.Строки.Количество() = 0 Тогда
			Для Каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ВыводитьСтроку = (ВетвьДереваНастроек.МаксимальноеКоличество = 0 ИЛИ СтрокиКВыводуЕНВД.Количество() < ВетвьДереваНастроек.МаксимальноеКоличество)
							   И СтрокаРезультата.ЗначениеПоказателя <> 0
							   И ЗначениеОсновногоПоказателяЕНВД * ВетвьДереваНастроек.Существенность/100 <= СтрокаРезультата.ЗначениеПоказателя
							   И ВетвьДереваНастроек.ВключатьВОтчет;
				Если ВыводитьСтроку Тогда
					СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			 	КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаСписка Из ВетвьДереваНастроек.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Найти(СтрокаСписка.ЗначениеЭлемента, "Субконто");
				Если СтрокаРезультата <> Неопределено Тогда
					// строка найдена и будет добавлена
				Иначе
					// создаем строку с заполненной аналитикой и нулевыми значениями
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.Субконто = СтрокаСписка.ЗначениеЭлемента;
				КонецЕсли;
				СтрокиКВыводуЕНВД.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокиКВыводуЕНВД.Количество() > 0 Тогда
			// получаем указатели на места вывода значений
			КоординатаВывода = "П1001022202";
			НаименованиеСтрокиВывода = "Расшифровка строки 22202 ""Управленческие расходы по отдельным видам деятельности (ЕНВД)"" по статье затрат";
			ИдентификаторМногострочногоРаздела = "П1001022202";
			ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[ИдентификаторМногострочногоРаздела].Состав;
		
			ТаблицаМногострочногоРаздела.Очистить();
			ВыведеноСтрок = 1;
			
			Для Каждого СтрокаКВыводу Из СтрокиКВыводуЕНВД Цикл
				ЗначениеОтч = -СтрокаКВыводу.ДО_90_08_2_Отч;
				ЗначениеПред = -СтрокаКВыводу.ДО_90_08_2_Пред;
				
				НоваяСтрокаМногострочногоРаздела = ТаблицаМногострочногоРаздела.Добавить();
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "02"] = СтрокаКВыводу.Субконто.Наименование;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "03"] = "";
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "04"] = ЗначениеОтч;
				НоваяСтрокаМногострочногоРаздела[КоординатаВывода + "05"] = ЗначениеПред;
				
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "04" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.2 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеОтч, Счет("90.08.2"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, КоординатаВывода + "05" + "_" + ВыведеноСтрок, НаименованиеСтрокиВывода + " """ + СтрокаКВыводу.Субконто.Наименование + """, графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот с кредита счетов 20.01, 23, 25, 26 в дебет счета 90.08.2 по статье затрат """ + СтрокаКВыводу.Субконто.Наименование + """", -ЗначениеПред, Счет("90.08.2"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
			КонецЦикла;
			
			ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочногоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// вызов функции для отчетного периода
	ЗаполнитьАвтоФормаОтчетаОбщие("04", ЗаголовокДатаОтчетногоПериода, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета);
	
	// вызов функции для периода предшествующего года
	Если ЗаполнятьГодПредыдущий Тогда
		// Бухгалтерские итоги по счетам, без аналитики
		Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
				|ОборотДт, ОборотКт,
				|КорОборотДт, КорОборотКт,
				|КонечныйОстатокДт, КонечныйОстатокКт";
		мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		ЗаполнитьАвтоФормаОтчетаОбщие("05", ЗаголовокДатаОтчетногоПериодаПрошлогоГода, ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Расчет основых показателей отчета
	
	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	// строка 2110 "Выручка"
	П010001003_90_1 = КО("90.01");
	
	П010001003_90_3 = ДО("90.03");
	П010001003_90_4 = ДО("90.04");
	П010001003_90_5 = ДО("90.05");
	
	П010001003 = П010001003_90_1
	           - П010001003_90_3
	           - П010001003_90_4
	           - П010001003_90_5;

	УстановитьЗначениеПоказателя("П000100211004", П010001003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "Строка 2110 ""Выручка"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", П010001003_90_1, Счет("90.01"), , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_3, Счет("90.03"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_4, Счет("90.04"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211004", "", "-", "!ДО", -П010001003_90_5, Счет("90.05"));

	// строка 2120 "Себестоимость продаж"
	П010002003 = ДО("90.02");
	УстановитьЗначениеПоказателя("П000100212004", -П010002003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100212004", "Строка 2120 ""Себестоимость продаж"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010002003, Счет("90.02"), , , , "ФормаОтчета");

	// строка 2210 "Коммерческие расходы"
	П010003003 = ДО("90.07");
	УстановитьЗначениеПоказателя("П000100221004", -П010003003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100221004", "Строка 2210 ""Коммерческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010003003, Счет("90.07"), , , , "ФормаОтчета");

	// строка 2220 "Управленческие расходы"
	П010004003 = ДО("90.08");
	УстановитьЗначениеПоказателя("П000100222004", -П010004003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100222004", "Строка 2220 ""Управленческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ДО", П010004003, Счет("90.08"), , , , "ФормаОтчета");

	Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Начальное обнуление
	П010006003_ПроцентыКПолучениюУплате = 0;
	П010006003_ПроцентыПоГосударственнымЦеннымБумагам = 0;
	П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
	П010007003_ПроцентыКПолучениюУплате = 0;

	П010007003_ПроцентыНачисленныеПоСт269 = 0;

	П010008003_УчастиеВДругихОрганизациях = 0;
	П010008003_УчастиеВРоссийскихОрганизациях = 0;
	П010008003_УчастиеВИностранныхОрганизациях = 0;

	П010010003_УчастиеВДругихОрганизациях = 0;
	П010010003_УчастиеВРоссийскихОрганизациях = 0;
	П010010003_УчастиеВИностранныхОрганизациях = 0;

	П010009003_РеализацияОсновныхСредств = 0;
	П010010003_РеализацияОсновныхСредств = 0;

	П03_НДС_РеализацияОсновныхСредств = 0;

	П010009003_ЛиквидацияОсновныхСредств = 0;
	П010010003_ЛиквидацияОсновныхСредств = 0;

	П010009003_РеализацияНМА = 0;
	П010010003_РеализацияНМА = 0;

	П03_НДС_РеализацияНМА = 0;

	П010009003_РеализацияПрочегоИмущества = 0;
	П010010003_РеализацияПрочегоИмущества = 0;

	П03_НДС_РеализацияПрочегоИмущества = 0;

	П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
	П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
	П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
	П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П010009003_РеализацияИмущественныхПравКромеПраваТребования = 0;
	П010010003_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
	П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П010009003_РеализацияЦенныхБумаг = 0;
	П010010003_РеализацияЦенныхБумаг = 0;

	П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
	П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

	П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
	П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

	П010009003_СдачаИмуществаВАренду = 0;
	П010010003_СдачаИмуществаВАренду = 0;

	П03_НДС_СдачаИмуществаВАренду = 0;

	П010009003_РазницаСтоимостиЦенныхБумаг = 0;
	П010010003_РазницаСтоимостиЦенныхБумаг = 0;

	П010010003_РасходыНаУслугиБанков = 0;

	П010009003_ПрочиеОперационныеДоходыРасходы = 0;
	П010010003_ПрочиеОперационныеДоходыРасходы = 0;

	П03_НДС_ПрочиеОперационныеДоходыРасходы = 0;

	П010009003_ОтчисленияВОценочныеРезервы = 0;
	П010010003_ОтчисленияВОценочныеРезервы = 0;

	П010009003_ШтрафыПениНеустойкиКПолучениюУплате = 0;
	П010010003_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П010009003_ПрибыльУбытокПрошлыхЛет = 0;
	П010010003_ПрибыльУбытокПрошлыхЛет = 0;
	
	П03_НДС_ПрибыльУбытокПрошлыхЛет = 0;
	
	П010009003_ВозмещениеУбытковКПолучениюУплате = 0;
	П010010003_ВозмещениеУбытковКПолучениюУплате = 0;

	П010009003_КурсовыеРазницы = 0;
	П010010003_КурсовыеРазницы = 0;

	П010009003_КурсовыеРазницыПоРасчетамВУЕ = 0;
	П010010003_КурсовыеРазницыПоРасчетамВУЕ = 0;

	П010010003_НалогиИСборы = 0;

	П010010003_ПремияПокупателю = 0;

	П010009003_СписаниеДебиторскойКредиторскойЗадолженности = 0;
	П010010003_СписаниеДебиторскойКредиторскойЗадолженности = 0;

	П010010003_НДСПоСписаннойКредиторскойЗадолженности = 0;

	П010009003_БезвозмездноеПолучениеИмущества = 0;
	П010010003_БезвозмездноеПолучениеИмущества = 0;

	П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	//П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	П010009003_ПрочиеВнереализационныеДоходыРасходы = 0;
	П010010003_ПрочиеВнереализационныеДоходыРасходы = 0;

	П03_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

	П010010003_РасходыОтСниженияСтоимостиАктивов = 0;

	П010010003_ПрочиеКосвенныеРасходы = 0;

	П03_НДС_ПрочиеКосвенныеРасходы = 0;
	
	П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;
	
	ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	// Обрабатываем субкотно "Прочие доходы и расходы".
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		
		Если Не ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбранноеСубконто.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		// Сразу получем все необходимые итоги
		Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
		Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);

		НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));


		Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате") Тогда

			// Проценты к получению
			П010006003_ПроцентыКПолучениюУплате = П010006003_ПроцентыКПолучениюУплате + Сумма91_1;

			// Проценты к уплате
			П010007003_ПроцентыКПолучениюУплате = П010007003_ПроцентыКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам") Тогда

			П010006003_ПроцентыПоГосударственнымЦеннымБумагам = П010006003_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0") Тогда

			П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269") Тогда

			П010007003_ПроцентыНачисленныеПоСт269 = П010007003_ПроцентыНачисленныеПоСт269 + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях") Тогда

			П010008003_УчастиеВДругихОрганизациях = П010008003_УчастиеВДругихОрганизациях + Сумма91_1;
			П010010003_УчастиеВДругихОрганизациях = П010010003_УчастиеВДругихОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях") Тогда

			П010008003_УчастиеВИностранныхОрганизациях = П010008003_УчастиеВИностранныхОрганизациях + Сумма91_1;
			П010010003_УчастиеВИностранныхОрганизациях = П010010003_УчастиеВИностранныхОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях") Тогда

			П010008003_УчастиеВРоссийскихОрганизациях = П010008003_УчастиеВРоссийскихОрганизациях + Сумма91_1;
			П010010003_УчастиеВРоссийскихОрганизациях = П010010003_УчастиеВРоссийскихОрганизациях + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств") Тогда

			П010009003_РеализацияОсновныхСредств = П010009003_РеализацияОсновныхСредств + Сумма91_1;
			П010010003_РеализацияОсновныхСредств = П010010003_РеализацияОсновныхСредств + Сумма91_2;

			П03_НДС_РеализацияОсновныхСредств = П03_НДС_РеализацияОсновныхСредств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств") Тогда

			П010009003_ЛиквидацияОсновныхСредств = П010009003_ЛиквидацияОсновныхСредств + Сумма91_1;
			П010010003_ЛиквидацияОсновныхСредств = П010010003_ЛиквидацияОсновныхСредств + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов") Тогда

			П010009003_РеализацияНМА = П010009003_РеализацияНМА + Сумма91_1;
			П010010003_РеализацияНМА = П010010003_РеализацияНМА + Сумма91_2;

			П03_НДС_РеализацияНМА = П03_НДС_РеализацияНМА + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества") Тогда

			П010009003_РеализацияПрочегоИмущества = П010009003_РеализацияПрочегоИмущества + Сумма91_1;
			П010010003_РеализацияПрочегоИмущества = П010010003_РеализацияПрочегоИмущества + Сумма91_2;

			П03_НДС_РеализацияПрочегоИмущества = П03_НДС_РеализацияПрочегоИмущества + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг") Тогда

			П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
			П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа") Тогда

			П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
			П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа") Тогда

			П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
			П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

			П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования") Тогда

			П010009003_РеализацияИмущественныхПравКромеПраваТребования = П010009003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
			П010010003_РеализацияИмущественныхПравКромеПраваТребования = П010010003_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

			П03_НДС_РеализацияИмущественныхПравКромеПраваТребования = П03_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств") Тогда

			П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
			П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

			П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг") Тогда

			П010009003_РеализацияЦенныхБумаг = П010009003_РеализацияЦенныхБумаг + Сумма91_1;
			П010010003_РеализацияЦенныхБумаг = П010010003_РеализацияЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок") Тогда

			П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
			П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР") Тогда

			П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
			П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду") Тогда

			П010009003_СдачаИмуществаВАренду = П010009003_СдачаИмуществаВАренду + Сумма91_1;
			П010010003_СдачаИмуществаВАренду = П010010003_СдачаИмуществаВАренду + Сумма91_2;

			П03_НДС_СдачаИмуществаВАренду = П03_НДС_СдачаИмуществаВАренду + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам") Тогда

			П010009003_РазницаСтоимостиЦенныхБумаг = П010009003_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
			П010010003_РазницаСтоимостиЦенныхБумаг = П010010003_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков") Тогда

			П010010003_РасходыНаУслугиБанков = П010010003_РасходыНаУслугиБанков + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы") Тогда

			П010009003_ПрочиеОперационныеДоходыРасходы = П010009003_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
			П010010003_ПрочиеОперационныеДоходыРасходы = П010010003_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

			П03_НДС_ПрочиеОперационныеДоходыРасходы = П03_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате") Тогда

			П010009003_ШтрафыПениНеустойкиКПолучениюУплате = П010009003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
			П010010003_ШтрафыПениНеустойкиКПолучениюУплате = П010010003_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

			П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет") Тогда

			П010009003_ПрибыльУбытокПрошлыхЛет = П010009003_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
			П010010003_ПрибыльУбытокПрошлыхЛет = П010010003_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
			
			П03_НДС_ПрибыльУбытокПрошлыхЛет = П03_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате") Тогда

			П010009003_ВозмещениеУбытковКПолучениюУплате = П010009003_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
			П010010003_ВозмещениеУбытковКПолучениюУплате = П010010003_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы") Тогда

			П010009003_КурсовыеРазницы = П010009003_КурсовыеРазницы + Сумма91_1;
			П010010003_КурсовыеРазницы = П010010003_КурсовыеРазницы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ") Тогда

			П010009003_КурсовыеРазницыПоРасчетамВУЕ = П010009003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
			П010010003_КурсовыеРазницыПоРасчетамВУЕ = П010010003_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.НалогиИСборы") Тогда

			П010010003_НалогиИСборы = П010010003_НалогиИСборы  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы") Тогда

			П010009003_ОтчисленияВОценочныеРезервы = П010009003_ОтчисленияВОценочныеРезервы + Сумма91_1;
			П010010003_ОтчисленияВОценочныеРезервы = П010010003_ОтчисленияВОценочныеРезервы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПремияПокупателю") Тогда

			П010010003_ПремияПокупателю = П010010003_ПремияПокупателю  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") Тогда

			П010009003_СписаниеДебиторскойКредиторскойЗадолженности = П010009003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
			П010010003_СписаниеДебиторскойКредиторскойЗадолженности = П010010003_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности") Тогда

			П010010003_НДСПоСписаннойКредиторскойЗадолженности = П010010003_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества") Тогда

			П010009003_БезвозмездноеПолучениеИмущества = П010009003_БезвозмездноеПолучениеИмущества + Сумма91_1;
			П010010003_БезвозмездноеПолучениеИмущества = П010010003_БезвозмездноеПолучениеИмущества + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд") Тогда

			П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + Сумма91_2;

			//П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П03_НДС_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы") Тогда

			П010009003_ПрочиеВнереализационныеДоходыРасходы = П010009003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
			П010010003_ПрочиеВнереализационныеДоходыРасходы = П010010003_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

			П03_НДС_ПрочиеВнереализационныеДоходыРасходы = П03_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов") Тогда

			П010010003_РасходыОтСниженияСтоимостиАктивов = П010010003_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы") Тогда

			П010010003_ПрочиеКосвенныеРасходы = П010010003_ПрочиеКосвенныеРасходы + Сумма91_2;

			П03_НДС_ПрочиеКосвенныеРасходы = П03_НДС_ПрочиеКосвенныеРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии") Тогда

			П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

		КонецЕсли;

	КонецЦикла;

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Строка "Чрезвычайные доходы"
	П010009003_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));

	// Строка "Чрезвычайные расходы"
	П010010003_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));

	// строка 2310 "Доходы от участия в других организациях"
	П010008003 = П010008003_УчастиеВДругихОрганизациях + П010008003_УчастиеВИностранныхОрганизациях + П010008003_УчастиеВРоссийскихОрганизациях;
	
	УстановитьЗначениеПоказателя("П000100231004", П010008003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "Строка 2310 ""Доходы от участия в других организациях"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", П010008003_УчастиеВДругихОрганизациях, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008003_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008003_УчастиеВРоссийскихОрганизациях);

	// строка 2320 "Проценты к получению"
	П010006003 = П010006003_ПроцентыКПолучениюУплате + П010006003_ПроцентыПоГосударственнымЦеннымБумагам + П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
	УстановитьЗначениеПоказателя("П000100232004", П010006003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "Строка 2320 ""Проценты к получению"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006003_ПроцентыКПолучениюУплате, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагам);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006003_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

	// строка 2330 "Проценты к уплате"
	П010007003 = П010007003_ПроцентыКПолучениюУплате
	           + П010007003_ПроцентыНачисленныеПоСт269;
	УстановитьЗначениеПоказателя("П000100233004", -П010007003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233004", "Строка 2330 ""Проценты к уплате"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007003_ПроцентыКПолучениюУплате, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007003_ПроцентыНачисленныеПоСт269);

	// строка 2340 "Прочие доходы"
	
	// Счета для расчета оборотов по видам прочих доходов и расходов
	СчетаОборотов = Новый Массив();
	СчетаОборотов.Добавить(Счет("91.01"));
	СчетаОборотов.Добавить(Счет("91.02"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("01")); // счета 01, 02, 03, 04, 05 необходимы для расчета доходов и расходов, связанных с переоценкой внеоборотных активов
	СчетаОборотовКор.Добавить(Счет("02"));
	СчетаОборотовКор.Добавить(Счет("03"));
	СчетаОборотовКор.Добавить(Счет("04"));
	СчетаОборотовКор.Добавить(Счет("05"));
	СчетаОборотовКор.Добавить(Счет("68.02"));
	
	// Обороты по видам прочих доходов и расходов за отчетный период
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления Цикл
		КО_91_01_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02__68_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
	КонецЦикла;
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если Не ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// КО 91.01
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
			КО_91_01_ВПДР[ИмяВидаПДР] = КО_91_01_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);
			ДО_91_02_ВПДР[ИмяВидаПДР] = ДО_91_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02 в корреспонденции с 68.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));
			ДО_91_02__68_02_ВПДР[ИмяВидаПДР] = ДО_91_02__68_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// Расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов.
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	П010009003 = П010009003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
	           + П010009003_ЛиквидацияОсновныхСредств
	           + П010009003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
	           + П010009003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
	           + П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010009003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010009003_РеализацияЦенныхБумаг
	           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010009003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
	           + П010009003_ОтчисленияВОценочныеРезервы
	           + П010009003_РазницаСтоимостиЦенныхБумаг
	           + П010009003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы

	// бывшая строка 120 "Внереализационные доходы"
	           + П010009003_ШтрафыПениНеустойкиКПолучениюУплате                           - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010009003_ПрибыльУбытокПрошлыхЛет                                       - П03_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010009003_ВозмещениеУбытковКПолучениюУплате
	           + П010009003_КурсовыеРазницы
	           + П010009003_КурсовыеРазницыПоРасчетамВУЕ
	           + П010009003_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010009003_БезвозмездноеПолучениеИмущества
	           + П010009003_ПрочиеВнереализационныеДоходыРасходы                          - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии

	           + П010009003_ЧрезвычайныеДоходыРасходы
	           + КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
	           - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	           + КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"]
	           - ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"];

	УстановитьЗначениеПоказателя("П000100234004", П010009003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "Строка 2340 ""Прочие доходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", П010009003_РеализацияОсновныхСредств, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств")) + """/", П010009003_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", П010009003_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", П010009003_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", П010009003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", П010009003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", П010009003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", П010009003_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", П010009003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", П010009003_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок")) + """/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР")) + """/", П010009003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду")) + """/", П010009003_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду")) + """/ в корреспонденции со счетом 68.02", -П03_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009003_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009003_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009003_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010009003_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010009003_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010009003_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010009003_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010009003_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010009003_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества")) + """/", П010009003_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010009003_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыСвязанныеСВосстановлениемАмортизационнойПремии"]) + """/", П010009003_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "!КО", П010009003_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/", КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"]);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"], Счет("91.02"), Счет("68.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	// строка 2350 "Прочие расходы"
	П010010003 = П010010003_УчастиеВДругихОрганизациях
	           + П010010003_УчастиеВРоссийскихОрганизациях
	           + П010010003_УчастиеВИностранныхОрганизациях
	           + П010010003_РеализацияОсновныхСредств                                     - П03_НДС_РеализацияОсновныхСредств
	           + П010010003_ЛиквидацияОсновныхСредств
	           + П010010003_РеализацияНМА                                                 - П03_НДС_РеализацияНМА
	           + П010010003_РеализацияПрочегоИмущества                                    - П03_НДС_РеализацияПрочегоИмущества
	           + П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010010003_РеализацияИмущественныхПравКромеПраваТребования               - П03_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010010003_РеализацияЦенныхБумаг
	           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010010003_СдачаИмуществаВАренду                                         - П03_НДС_СдачаИмуществаВАренду
	           + П010010003_ОтчисленияВОценочныеРезервы
	           + П010010003_РазницаСтоимостиЦенныхБумаг
	           + П010010003_РасходыНаУслугиБанков
	           + П010010003_ПрочиеОперационныеДоходыРасходы                               - П03_НДС_ПрочиеОперационныеДоходыРасходы
	           + П010010003_ШтрафыПениНеустойкиКПолучениюУплате                           - П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010010003_ПрибыльУбытокПрошлыхЛет                                       - П03_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010010003_ВозмещениеУбытковКПолучениюУплате
	           + П010010003_КурсовыеРазницы
	           + П010010003_КурсовыеРазницыПоРасчетамВУЕ
	           + П010010003_НалогиИСборы
	           + П010010003_ПремияПокупателю
	           + П010010003_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010010003_НДСПоСписаннойКредиторскойЗадолженности
	           + П010010003_БезвозмездноеПолучениеИмущества
	           + П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд
	           + П010010003_ПрочиеВнереализационныеДоходыРасходы                          - П03_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010010003_РасходыОтСниженияСтоимостиАктивов
	           + П010010003_ПрочиеКосвенныеРасходы                                        - П03_НДС_ПрочиеКосвенныеРасходы
	           + П010010003_ЧрезвычайныеДоходыРасходы
	           + ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
	           - КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	           + ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]
	           - ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"];
	
	УстановитьЗначениеПоказателя("П000100235004", -П010010003);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "Строка 2350 ""Прочие расходы"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", П010010003_УчастиеВДругихОрганизациях, , , , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010003_УчастиеВРоссийскихОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010003_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", П010010003_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", П010010003_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", П010010003_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", П010010003_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", П010010003_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", П010010003_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", П010010003_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", П010010003_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", П010010003_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", П010010003_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", П010010003_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", П010010003_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02 ", -П03_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010003_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010003_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010003_РасходыНаУслугиБанков);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010003_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 ", -П03_НДС_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010010003_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П03_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010010003_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010010003_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010010003_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010010003_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010010003_НалогиИСборы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010010003_ПремияПокупателю);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010010003_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010010003_НДСПоСписаннойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества")) + """/", П010010003_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд""/", П010010003_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010010003_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010010003_РасходыОтСниженияСтоимостиАктивов);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/", П010010003_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/ в корреспонденции со счетом 68.02", -П03_НДС_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "!ДО", П010010003_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/", ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235004", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), Счет("68.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	КодСтроки = "2410";
	НаименованиеСтроки = "Текущий налог на прибыль";
	Графа = "04";
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "68.04", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_68_04_2__68_04_1 = ОБ("68.04.2", "68.04.1", мБухИтогиРС);
		ОБ_68_04_1__68_04_2 = ОБ("68.04.1", "68.04.2", мБухИтогиРС);
		
		ЗначениеПоказателя = ОБ_68_04_2__68_04_1 - ОБ_68_04_1__68_04_2;
		ИмяОбластиПоказателя = "П000100" + КодСтроки + Графа;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // Вычитаемый
		
		НаименованиеПоказателя = "Строка " + КодСтроки + """" + НаименованиеСтроки + """, графа """ + ЗаголовокДатаОтчетногоПериода + """";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеПоказателя, "+", "!ОБ", ОБ_68_04_2__68_04_1, Счет("68.04.2"), Счет("68.04.1"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, , "-", "!ОБ", -ОБ_68_04_1__68_04_2, Счет("68.04.1"), Счет("68.04.2"), , , "ФормаОтчета");
	Иначе
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", , "68.04.1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		ОБ_99_01_1__68_04_1_Налог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, КорСубконто1" , Счет("99.01.1"), Счет("68.04.1"), ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
		
		ЗначениеПоказателя = ОБ_99_01_1__68_04_1_Налог;
		ИмяОбластиПоказателя = "П000100" + КодСтроки + Графа;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // Вычитаемый
		
		НаименованиеПоказателя = "Строка " + КодСтроки + """" + НаименованиеСтроки + """, графа """ + ЗаголовокДатаОтчетногоПериода + """";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеПоказателя, "+", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1",  ОБ_99_01_1__68_04_1_Налог, Счет("99.01.1"), Счет("68.04.1"), , , "ФормаОтчета");
	КонецЕсли;
	
	// строка 2421 "в т.ч. постоянные налоговые обязательства (активы)"
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99.02.3", , "68.04.2", , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_99_02_3__68_04_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04.2"));
		ОБ_68_04_2__99_02_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04.2"));
		
		ЗначениеПоказателя = ОБ_99_02_3__68_04_2 - ОБ_68_04_2__99_02_3;
		УстановитьЗначениеПоказателя("П000100242104", -ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242104", "Строка 2421 ""в т. ч. постоянные налоговые обязательства (активы)"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", ОБ_99_02_3__68_04_2, Счет("99.02.3"), Счет("68.04.2"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242104", "", "-", "!ОБ", -ОБ_68_04_2__99_02_3, Счет("68.04.2"), Счет("99.02.3"));
	Иначе
		УстановитьЗначениеПоказателя("П000100242104", 0);
	КонецЕсли;
	
	// строка 2430 "Изменение отложенных налоговых обязательств" 
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 77 на обороты
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "77", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_77__99_2_4 = 0;
		ОБ_99_2_4__77 = 0;
		
		Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
			ОБ_77__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
			ОБ_99_2_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
		КонецЕсли;
		
		ОБ77__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
		ОБ68_4_2__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
		
		П010014203 = ОБ68_4_2__77 - ОБ77__68_4_2 - ОБ_99_2_4__77 + ОБ_77__99_2_4;
		
		УстановитьЗначениеПоказателя("П000100243004", -П010014203);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "Строка 2430 ""Изменение отложенных налоговых обязательств"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!КО", ОБ68_4_2__77, Счет("77"), Счет("68.04.2"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "-", "!ДО", -ОБ77__68_4_2, Счет("77"), Счет("68.04.2"));
		
		Если ((ОБ_77__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__77 <> 0)) Тогда
			// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует.
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "-", "!ОБ", -ОБ_99_2_4__77, Счет("99.02.4"),     Счет("77"));
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243004", "", "+", "!ОБ",  ОБ_77__99_2_4,     Счет("77"), Счет("99.02.4"));
		КонецЕсли;
	КонецЕсли;
	
	// строка 2450 "Изменение отложенных налоговых активов"
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 09 на обороты: 
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "09", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_09__99_2_4 = 0;
		ОБ_99_2_4__09 = 0;
		
		Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
			ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
			ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		КонецЕсли;
		
		ОБ09__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
		ОБ68_4_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
		
		П010014103 = ОБ09__68_4_2 - ОБ68_4_2__09 - ОБ_09__99_2_4 + ОБ_99_2_4__09;
		
		УстановитьЗначениеПоказателя("П000100245004", П010014103);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "Строка 2450 ""Изменение отложенных налоговых активов"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "!ОБ", ОБ09__68_4_2, Счет("09"), Счет("68.04.2"), , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "-", "!ОБ", -ОБ68_4_2__09, Счет("68.04.2"), Счет("09"), , , "ФормаОтчета");
		
		Если ((ОБ_09__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__09 <> 0)) Тогда
			// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "-", "!ОБ", -ОБ_09__99_2_4,     Счет("09"), Счет("99.02.4"));
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245004", "", "+", "!ОБ",  ОБ_99_2_4__09, Счет("99.02.4"),     Счет("09"));
		КонецЕсли;
	КонецЕсли;
	
	// строка 2460 "Прочее"
	
	// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
	// и иные аналогичные обязательные платежи", как в "старой" форме №2
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	П010018003_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалогНаПрибыль"));
	П010018003_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалоговыеСанкции"));
	
	П010018003_99_2_4_Д = 0;
	П010018003_99_2_4_К = 0;
	
	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		П010018003_99_2_4_Д = ОБ_99_2_4__09;
		П010018003_99_2_4_К = ОБ_77__99_2_4;
	КонецЕсли;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , Счет("99.01"), , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОБ_99_01__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.01"), Счет("09"));
	ОБ_77__99_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.01"), Счет("77"));
	
	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
	КонецЕсли;
	
	П010018003_99_9_Д = 0;
	П010018003_99_9_К = 0;
	
	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		П010018003_99_9_Д = ДО("99.09");
		П010018003_99_9_К = КО("99.09");
	КонецЕсли;
	
	П010018003 = П010018003_99_1_НалогНаПрибыль
	           + П010018003_99_1_НалоговыеСанкции
	           + П010018003_99_9_Д - П010018003_99_9_К
	           + ОБ_99_01__09 - ОБ_77__99_01;
	   
	Если НЕ ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		П010018003 = П010018003 
		           - ОБ_99_01_1__68_04_1_Налог;
	КонецЕсли;
	
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		П010018003 = П010018003 
		           + П010018003_99_2_4_Д - П010018003_99_2_4_К;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя("П000100246004", -П010018003); // Вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "Строка 2460 ""Прочее"", графа """ + ЗаголовокДатаОтчетногоПериода + """", "+", "Оборот по дебету счета 99.01 /субконто ""Налог на прибыль и аналогичные платежи""/", П010018003_99_1_НалогНаПрибыль, Счет("99.01"), , , , "ФормаОтчета");
	Если НЕ ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1", -ОБ_99_01_1__68_04_1_Налог, Счет("99.01.1"), Счет("68.04.1"));
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "Оборот по дебету счета 99.01 /субконто ""Причитающиеся налоговые санкции""/", П010018003_99_1_НалоговыеСанкции, Счет("99.01"), , , , "ФормаОтчета");
	
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) И ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  П010018003_99_2_4_Д, Счет("99.02.4"), Счет("09"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -П010018003_99_2_4_К, Счет("99.02.4"), Счет("77"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  П010018003_99_9_Д, Счет("99.09"), , , , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -П010018003_99_9_К, Счет("99.09"), , , , "ФормаОтчета");
	КонецЕсли;
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "+", "!ДО",  ОБ_99_01__09, Счет("99.01"), Счет("09"), , , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246004", "", "-", "!КО", -ОБ_77__99_01, Счет("77"), Счет("99.01"), , , "ФормаОтчета");
	
	Если ЗаполнятьГодПредыдущий Тогда
	//////////////////////////////////////////////////////
	// Заполняем форму 2 данными на конец предыдущего года
	мДатаНачалаПериодаПрошлогоГода = ДобавитьМесяц( мДатаНачалаПериодаОтчета, -12 );
	мДатаКонцаПериодаПрошлогоГода = ДобавитьМесяц( мДатаКонцаПериодаОтчета, -12 );

	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	// строка 2110 "Выручка"
	П010001004_90_1 = КО("90.01");
	П010001004_90_3 = ДО("90.03");
	П010001004_90_4 = ДО("90.04");
	П010001004_90_5 = ДО("90.05");

	П010001004 = П010001004_90_1
	           - П010001004_90_3
	           - П010001004_90_4
	           - П010001004_90_5;

	УстановитьЗначениеПоказателя("П000100211005", П010001004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "Строка 2110 ""Выручка"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", П010001004_90_1, Счет("90.01"), , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_3, Счет("90.03"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_4, Счет("90.04"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100211005", "", "-", "!ДО", -П010001004_90_5, Счет("90.05"));

	// строка 2120 "Себестоимость продаж"
	П010002004 = ДО("90.02");
	УстановитьЗначениеПоказателя("П000100212005", -П010002004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100212005", "Строка 2120 ""Себестоимость продаж"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010002004, Счет("90.02"), , 1, , "ФормаОтчета");

	// строка 2210 "Коммерческие расходы"
	П010003004 = ДО("90.07");
	УстановитьЗначениеПоказателя("П000100221005", -П010003004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100221005", "Строка 2210 ""Коммерческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010003004, Счет("90.07"), , 1, , "ФормаОтчета");

	// строка 2220 "Управленческие расходы"
	П010004004 = ДО("90.08");
	УстановитьЗначениеПоказателя("П000100222005", -П010004004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100222005", "Строка 2220 ""Управленческие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ДО", П010004004, Счет("90.08"), , 1, , "ФормаОтчета");

	Итоги = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "91.01, 91.02", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, "68.02, 76.Н", , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Начальное обнуление
	П010006004_ПроцентыКПолучениюУплате = 0;
	П010006004_ПроцентыПоГосударственнымЦеннымБумагам = 0;
	П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = 0;
	П010007004_ПроцентыКПолучениюУплате = 0;

	П010007004_ПроцентыНачисленныеПоСт269 = 0;

	П010008004_УчастиеВДругихОрганизациях = 0;
	П010008004_УчастиеВРоссийскихОрганизациях = 0;
	П010008004_УчастиеВИностранныхОрганизациях = 0;

	П010010004_УчастиеВДругихОрганизациях = 0;
	П010010004_УчастиеВРоссийскихОрганизациях = 0;
	П010010004_УчастиеВИностранныхОрганизациях = 0;

	П010009004_РеализацияОсновныхСредств = 0;
	П010010004_РеализацияОсновныхСредств = 0;

	П04_НДС_РеализацияОсновныхСредств = 0;

	П010009004_ЛиквидацияОсновныхСредств = 0;
	П010010004_ЛиквидацияОсновныхСредств = 0;
	
	П010009004_РеализацияНМА = 0;
	П010010004_РеализацияНМА = 0;

	П04_НДС_РеализацияНМА = 0;

	П010009004_РеализацияПрочегоИмущества = 0;
	П010010004_РеализацияПрочегоИмущества = 0;

	П04_НДС_РеализацияПрочегоИмущества = 0;

	П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;
	П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = 0;

	П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;
	П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = 0;

	П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;
	П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = 0;

	П010009004_РеализацияИмущественныхПравКромеПраваТребования = 0;
	П010010004_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = 0;

	П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;
	П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = 0;

	П010009004_РеализацияЦенныхБумаг = 0;
	П010010004_РеализацияЦенныхБумаг = 0;

	П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;
	П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = 0;

	П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;
	П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = 0;

	П010009004_СдачаИмуществаВАренду = 0;
	П010010004_СдачаИмуществаВАренду = 0;

	П04_НДС_СдачаИмуществаВАренду = 0;

	П010009004_РазницаСтоимостиЦенныхБумаг = 0;
	П010010004_РазницаСтоимостиЦенныхБумаг = 0;

	П010010004_РасходыНаУслугиБанков = 0;

	П010009004_ПрочиеОперационныеДоходыРасходы = 0;
	П010010004_ПрочиеОперационныеДоходыРасходы = 0;

	П04_НДС_ПрочиеОперационныеДоходыРасходы = 0;

	П010009004_ОтчисленияВОценочныеРезервы = 0;
	П010010004_ОтчисленияВОценочныеРезервы = 0;
	
	П010009004_ШтрафыПениНеустойкиКПолучениюУплате = 0;
	П010010004_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = 0;

	П010009004_ПрибыльУбытокПрошлыхЛет = 0;
	П010010004_ПрибыльУбытокПрошлыхЛет = 0;
	
	П04_НДС_ПрибыльУбытокПрошлыхЛет = 0;
	
	П010009004_ВозмещениеУбытковКПолучениюУплате = 0;
	П010010004_ВозмещениеУбытковКПолучениюУплате = 0;

	П010009004_КурсовыеРазницы = 0;
	П010010004_КурсовыеРазницы = 0;

	П010009004_КурсовыеРазницыПоРасчетамВУЕ = 0;
	П010010004_КурсовыеРазницыПоРасчетамВУЕ = 0;

	П010010004_НалогиИСборы = 0;

	П010010004_ПремияПокупателю = 0;

	П010009004_СписаниеДебиторскойКредиторскойЗадолженности = 0;
	П010010004_СписаниеДебиторскойКредиторскойЗадолженности = 0;

	П010010004_НДСПоСписаннойКредиторскойЗадолженности = 0;

	П010009004_БезвозмездноеПолучениеИмущества = 0;
	П010010004_БезвозмездноеПолучениеИмущества = 0;

	П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = 0;

	П010009004_ПрочиеВнереализационныеДоходыРасходы = 0;
	П010010004_ПрочиеВнереализационныеДоходыРасходы = 0;

	П04_НДС_ПрочиеВнереализационныеДоходыРасходы = 0;

	П010010004_РасходыОтСниженияСтоимостиАктивов = 0;

	П010010004_ПрочиеКосвенныеРасходы = 0;

	П04_НДС_ПрочиеКосвенныеРасходы = 0;

	П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = 0;
	
	ВыборкаПоСубконто = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	// Обрабатываем субкотно "Прочие доходы и расходы".
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		
		Если Не ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбранноеСубконто.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		// Сразу получем все необходимые итоги
		Сумма91_1 = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
		Сумма91_2 = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);
		
		НДС       = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));
		
		Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате") Тогда
			
			// Проценты к получению
			П010006004_ПроцентыКПолучениюУплате = П010006004_ПроцентыКПолучениюУплате + Сумма91_1;
			
			// Проценты к уплате
			П010007004_ПроцентыКПолучениюУплате = П010007004_ПроцентыКПолучениюУплате + Сумма91_2;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам") Тогда
			
			П010006004_ПроцентыПоГосударственнымЦеннымБумагам = П010006004_ПроцентыПоГосударственнымЦеннымБумагам  + Сумма91_1;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0") Тогда
			
			П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0  + Сумма91_1;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269") Тогда
			
			П010007004_ПроцентыНачисленныеПоСт269 = П010007004_ПроцентыНачисленныеПоСт269 + Сумма91_2;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях") Тогда
			
			П010008004_УчастиеВДругихОрганизациях = П010008004_УчастиеВДругихОрганизациях + Сумма91_1;
			П010010004_УчастиеВДругихОрганизациях = П010010004_УчастиеВДругихОрганизациях + Сумма91_2;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях") Тогда
			
			П010008004_УчастиеВИностранныхОрганизациях = П010008004_УчастиеВИностранныхОрганизациях + Сумма91_1;
			П010010004_УчастиеВИностранныхОрганизациях = П010010004_УчастиеВИностранныхОрганизациях + Сумма91_2;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях") Тогда
			
			П010008004_УчастиеВРоссийскихОрганизациях = П010008004_УчастиеВРоссийскихОрганизациях + Сумма91_1; 
			П010010004_УчастиеВРоссийскихОрганизациях = П010010004_УчастиеВРоссийскихОрганизациях + Сумма91_2; 
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств") Тогда
			
			П010009004_РеализацияОсновныхСредств = П010009004_РеализацияОсновныхСредств + Сумма91_1;
			П010010004_РеализацияОсновныхСредств = П010010004_РеализацияОсновныхСредств + Сумма91_2;
			
			П04_НДС_РеализацияОсновныхСредств = П04_НДС_РеализацияОсновныхСредств + НДС;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств") Тогда
			
			П010009004_ЛиквидацияОсновныхСредств = П010009004_ЛиквидацияОсновныхСредств + Сумма91_1;
			П010010004_ЛиквидацияОсновныхСредств = П010010004_ЛиквидацияОсновныхСредств + Сумма91_2;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов") Тогда
			
			П010009004_РеализацияНМА = П010009004_РеализацияНМА + Сумма91_1;
			П010010004_РеализацияНМА = П010010004_РеализацияНМА + Сумма91_2;
			
			П04_НДС_РеализацияНМА = П04_НДС_РеализацияНМА + НДС;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества") Тогда
			
			П010009004_РеализацияПрочегоИмущества = П010009004_РеализацияПрочегоИмущества + Сумма91_1;
			П010010004_РеализацияПрочегоИмущества = П010010004_РеализацияПрочегоИмущества + Сумма91_2;
			
			П04_НДС_РеализацияПрочегоИмущества = П04_НДС_РеализацияПрочегоИмущества + НДС;
			
		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг") Тогда

			П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_1;
			П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг = П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа") Тогда

			П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_1;
			П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа") Тогда

			П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_1;
			П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + Сумма91_2;

			П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования") Тогда

			П010009004_РеализацияИмущественныхПравКромеПраваТребования = П010009004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_1;
			П010010004_РеализацияИмущественныхПравКромеПраваТребования = П010010004_РеализацияИмущественныхПравКромеПраваТребования + Сумма91_2;

			П04_НДС_РеализацияИмущественныхПравКромеПраваТребования = П04_НДС_РеализацияИмущественныхПравКромеПраваТребования + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств") Тогда

			П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_1;
			П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + Сумма91_2;

			П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств = П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг") Тогда

			П010009004_РеализацияЦенныхБумаг = П010009004_РеализацияЦенныхБумаг + Сумма91_1;
			П010010004_РеализацияЦенныхБумаг = П010010004_РеализацияЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок") Тогда

			П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_1;
			П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР") Тогда

			П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_1;
			П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду") Тогда

			П010009004_СдачаИмуществаВАренду = П010009004_СдачаИмуществаВАренду + Сумма91_1;
			П010010004_СдачаИмуществаВАренду = П010010004_СдачаИмуществаВАренду + Сумма91_2;

			П04_НДС_СдачаИмуществаВАренду = П04_НДС_СдачаИмуществаВАренду + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам") Тогда

			П010009004_РазницаСтоимостиЦенныхБумаг = П010009004_РазницаСтоимостиЦенныхБумаг + Сумма91_1;
			П010010004_РазницаСтоимостиЦенныхБумаг = П010010004_РазницаСтоимостиЦенныхБумаг + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков") Тогда

			П010010004_РасходыНаУслугиБанков = П010010004_РасходыНаУслугиБанков + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы") Тогда

			П010009004_ПрочиеОперационныеДоходыРасходы = П010009004_ПрочиеОперационныеДоходыРасходы + Сумма91_1;
			П010010004_ПрочиеОперационныеДоходыРасходы = П010010004_ПрочиеОперационныеДоходыРасходы + Сумма91_2;

			П04_НДС_ПрочиеОперационныеДоходыРасходы = П04_НДС_ПрочиеОперационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате") Тогда

			П010009004_ШтрафыПениНеустойкиКПолучениюУплате = П010009004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_1;
			П010010004_ШтрафыПениНеустойкиКПолучениюУплате = П010010004_ШтрафыПениНеустойкиКПолучениюУплате + Сумма91_2;

			П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате = П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет") Тогда

			П010009004_ПрибыльУбытокПрошлыхЛет = П010009004_ПрибыльУбытокПрошлыхЛет + Сумма91_1;
			П010010004_ПрибыльУбытокПрошлыхЛет = П010010004_ПрибыльУбытокПрошлыхЛет + Сумма91_2;
			
			П04_НДС_ПрибыльУбытокПрошлыхЛет = П04_НДС_ПрибыльУбытокПрошлыхЛет + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате") Тогда

			П010009004_ВозмещениеУбытковКПолучениюУплате = П010009004_ВозмещениеУбытковКПолучениюУплате + Сумма91_1;
			П010010004_ВозмещениеУбытковКПолучениюУплате = П010010004_ВозмещениеУбытковКПолучениюУплате + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы") Тогда

			П010009004_КурсовыеРазницы = П010009004_КурсовыеРазницы + Сумма91_1;
			П010010004_КурсовыеРазницы = П010010004_КурсовыеРазницы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ") Тогда

			П010009004_КурсовыеРазницыПоРасчетамВУЕ = П010009004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_1;
			П010010004_КурсовыеРазницыПоРасчетамВУЕ = П010010004_КурсовыеРазницыПоРасчетамВУЕ + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.НалогиИСборы") Тогда

			П010010004_НалогиИСборы = П010010004_НалогиИСборы  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы") Тогда

			П010009004_ОтчисленияВОценочныеРезервы = П010009004_ОтчисленияВОценочныеРезервы + Сумма91_1;
			П010010004_ОтчисленияВОценочныеРезервы = П010010004_ОтчисленияВОценочныеРезервы + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПремияПокупателю") Тогда

			П010010004_ПремияПокупателю = П010010004_ПремияПокупателю  + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") Тогда

			П010009004_СписаниеДебиторскойКредиторскойЗадолженности = П010009004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_1;
			П010010004_СписаниеДебиторскойКредиторскойЗадолженности = П010010004_СписаниеДебиторскойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности") Тогда

			П010010004_НДСПоСписаннойКредиторскойЗадолженности = П010010004_НДСПоСписаннойКредиторскойЗадолженности + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества") Тогда

			П010009004_БезвозмездноеПолучениеИмущества = П010009004_БезвозмездноеПолучениеИмущества + Сумма91_1;
			П010010004_БезвозмездноеПолучениеИмущества = П010010004_БезвозмездноеПолучениеИмущества + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд") Тогда

			П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы") Тогда

			П010009004_ПрочиеВнереализационныеДоходыРасходы = П010009004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_1;
			П010010004_ПрочиеВнереализационныеДоходыРасходы = П010010004_ПрочиеВнереализационныеДоходыРасходы + Сумма91_2;

			П04_НДС_ПрочиеВнереализационныеДоходыРасходы = П04_НДС_ПрочиеВнереализационныеДоходыРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов") Тогда

			П010010004_РасходыОтСниженияСтоимостиАктивов = П010010004_РасходыОтСниженияСтоимостиАктивов + Сумма91_2;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы") Тогда

			П010010004_ПрочиеКосвенныеРасходы = П010010004_ПрочиеКосвенныеРасходы + Сумма91_2;

			П04_НДС_ПрочиеКосвенныеРасходы = П04_НДС_ПрочиеКосвенныеРасходы + НДС;

		ИначеЕсли ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии") Тогда

			П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии = П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии + Сумма91_1;

		КонецЕсли;

	КонецЦикла;

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	РезультатЗапроса = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	// Строка "Чрезвычайные доходы"
	П010009004_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));

	// Строка "Чрезвычайные расходы"
	П010010004_ЧрезвычайныеДоходыРасходы = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));

	// строка 2310 "Доходы от участия в других организациях"
	П010008004 = П010008004_УчастиеВДругихОрганизациях + П010008004_УчастиеВИностранныхОрганизациях + П010008004_УчастиеВРоссийскихОрганизациях;
	
	УстановитьЗначениеПоказателя("П000100231005", П010008004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "Строка 2310 ""Доходы от участия в других организациях"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", П010008004_УчастиеВДругихОрганизациях, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010008004_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100231005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010008004_УчастиеВРоссийскихОрганизациях);

	// строка 2320 "Проценты к получению"
	П010006004 = П010006004_ПроцентыКПолучениюУплате + П010006004_ПроцентыПоГосударственнымЦеннымБумагам + П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
	УстановитьЗначениеПоказателя("П000100232005", П010006004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "Строка 2320 ""Проценты к получению"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/",  П010006004_ПроцентыКПолучениюУплате, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагам);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100232005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты по государственным ценным бумагам по ставке 0%""/", П010006004_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);

	// строка 2330 "Проценты к уплате"
	П010007004 = П010007004_ПроцентыКПолучениюУплате
	           + П010007004_ПроцентыНачисленныеПоСт269;
	УстановитьЗначениеПоказателя("П000100233005", -П010007004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233005", "Строка 2330 ""Проценты к уплате"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты к получению (уплате)""/ ", П010007004_ПроцентыКПолучениюУплате, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100233005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Проценты, начисленные в соответствии со статьей 269""/ ", П010007004_ПроцентыНачисленныеПоСт269);

	// строка 2340 "Прочие доходы"
	// Обороты по видам прочих доходов и расходов за период предшествующего года
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления Цикл
		КО_91_01_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02__68_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
	КонецЦикла;
	
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если Не ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// КО 91.01
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
			КО_91_01_ВПДР[ИмяВидаПДР] = КО_91_01_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);
			ДО_91_02_ВПДР[ИмяВидаПДР] = ДО_91_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02 в корреспонденции с 68.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));
			ДО_91_02__68_02_ВПДР[ИмяВидаПДР] = ДО_91_02__68_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// Расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов.
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	П010009004 = П010009004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
	           + П010009004_ЛиквидацияОсновныхСредств
	           + П010009004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
	           + П010009004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
	           + П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010009004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010009004_РеализацияЦенныхБумаг
	           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010009004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
	           + П010009004_ОтчисленияВОценочныеРезервы
	           + П010009004_РазницаСтоимостиЦенныхБумаг
	           + П010009004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы
	           + П010009004_ШтрафыПениНеустойкиКПолучениюУплате                           - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010009004_ПрибыльУбытокПрошлыхЛет                                       - П04_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010009004_ВозмещениеУбытковКПолучениюУплате
	           + П010009004_КурсовыеРазницы
	           + П010009004_КурсовыеРазницыПоРасчетамВУЕ
	           + П010009004_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010009004_БезвозмездноеПолучениеИмущества
	           + П010009004_ПрочиеВнереализационныеДоходыРасходы                          - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии
	           + П010009004_ЧрезвычайныеДоходыРасходы
	           + КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
	           - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	           + КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"]
	           - ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"];

	УстановитьЗначениеПоказателя("П000100234005", П010009004);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "Строка 2340 ""Прочие доходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", П010009004_РеализацияОсновныхСредств, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", П010009004_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", П010009004_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", П010009004_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", П010009004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", П010009004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", П010009004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", П010009004_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", П010009004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", П010009004_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", П010009004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", П010009004_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ +  Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02", -П04_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010009004_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010009004_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010009004_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеОперационныеДоходыРасходы);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010009004_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010009004_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010009004_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010009004_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010009004_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010009004_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества")) + """/", П010009004_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010009004_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыСвязанныеСВосстановлениемАмортизационнойПремии"]) + """/", П010009004_ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "!КО", П010009004_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/", КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"]);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100234005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"], Счет("91.02"), Счет("68.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	// строка 2350 "Прочие расходы"
	П010010004 = П010010004_УчастиеВДругихОрганизациях
	           + П010010004_УчастиеВРоссийскихОрганизациях
	           + П010010004_УчастиеВИностранныхОрганизациях
	           + П010010004_РеализацияОсновныхСредств                                     - П04_НДС_РеализацияОсновныхСредств
	           + П010010004_ЛиквидацияОсновныхСредств
	           + П010010004_РеализацияНМА                                                 - П04_НДС_РеализацияНМА
	           + П010010004_РеализацияПрочегоИмущества                                    - П04_НДС_РеализацияПрочегоИмущества
	           + П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг           - П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг
	           + П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа            - П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа
	           + П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа         - П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	           + П010010004_РеализацияИмущественныхПравКромеПраваТребования               - П04_НДС_РеализацияИмущественныхПравКромеПраваТребования
	           + П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств - П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств
	           + П010010004_РеализацияЦенныхБумаг
	           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок
	           + П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР
	           + П010010004_СдачаИмуществаВАренду                                         - П04_НДС_СдачаИмуществаВАренду
	           + П010010004_ОтчисленияВОценочныеРезервы
	           + П010010004_РазницаСтоимостиЦенныхБумаг
	           + П010010004_РасходыНаУслугиБанков
	           + П010010004_ПрочиеОперационныеДоходыРасходы                               - П04_НДС_ПрочиеОперационныеДоходыРасходы
	           + П010010004_ШтрафыПениНеустойкиКПолучениюУплате                           - П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате
	           + П010010004_ПрибыльУбытокПрошлыхЛет                                       - П04_НДС_ПрибыльУбытокПрошлыхЛет
	           + П010010004_ВозмещениеУбытковКПолучениюУплате
	           + П010010004_КурсовыеРазницы
	           + П010010004_КурсовыеРазницыПоРасчетамВУЕ
	           + П010010004_НалогиИСборы
	           + П010010004_ПремияПокупателю
	           + П010010004_СписаниеДебиторскойКредиторскойЗадолженности
	           + П010010004_НДСПоСписаннойКредиторскойЗадолженности
	           + П010010004_БезвозмездноеПолучениеИмущества
	           + П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд
	           + П010010004_ПрочиеВнереализационныеДоходыРасходы                          - П04_НДС_ПрочиеВнереализационныеДоходыРасходы
	           + П010010004_РасходыОтСниженияСтоимостиАктивов
	           + П010010004_ПрочиеКосвенныеРасходы                                        - П04_НДС_ПрочиеКосвенныеРасходы
	           + П010010004_ЧрезвычайныеДоходыРасходы
	           + ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
	           - КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	           + ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]
	           - ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"];
	
	УстановитьЗначениеПоказателя("П000100235005", -П010010004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "Строка 2350 ""Прочие расходы"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", П010010004_УчастиеВДругихОрганизациях, , , 1, , "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в российских организациях""/", П010010004_УчастиеВРоссийскихОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Долевое участие в иностранных организациях""/", П010010004_УчастиеВИностранныхОрганизациях);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", П010010004_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств")) + """/", П010010004_ЛиквидацияОсновныхСредств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", П010010004_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияНМА);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", П010010004_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПрочегоИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", П010010004_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", П010010004_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", П010010004_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", П010010004_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияИмущественныхПравКромеПраваТребования);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", П010010004_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", П010010004_РеализацияЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок")) + """/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР")) + """/", П010010004_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду")) + """/", П010010004_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду")) + """/ в корреспонденции со счетом 68.02 ", -П04_НДС_СдачаИмуществаВАренду);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Отчисления в оценочные резервы""/", П010010004_ОтчисленияВОценочныеРезервы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам""/", П010010004_РазницаСтоимостиЦенныхБумаг);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы на услуги банков""/", П010010004_РасходыНаУслугиБанков);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/", П010010004_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие операционные доходы (расходы)""/ в корреспонденции со счетом 68.02 ", -П04_НДС_ПрочиеОперационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/", П010010004_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Штрафы, пени и неустойки к получению (уплате)""/ в корреспонденции со счетом 68.02", -П04_НДС_ШтрафыПениНеустойкиКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/", П010010004_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прибыль (убыток) прошлых лет""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрибыльУбытокПрошлыхЛет);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Возмещение убытков к получению (уплате)""/", П010010004_ВозмещениеУбытковКПолучениюУплате);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы""/", П010010004_КурсовыеРазницы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Курсовые разницы по расчетам в у.е.""/", П010010004_КурсовыеРазницыПоРасчетамВУЕ);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Налоги и сборы""/", П010010004_НалогиИСборы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Премия, выплаченная покупателю""/", П010010004_ПремияПокупателю);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Списание дебиторской (кредиторской) задолженности""/", П010010004_СписаниеДебиторскойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""НДС по списанной кредиторской задолженности""/", П010010004_НДСПоСписаннойКредиторскойЗадолженности);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества")) + """/", П010010004_БезвозмездноеПолучениеИмущества);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд""/", П010010004_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/", П010010004_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие внереализационные доходы (расходы)""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеВнереализационныеДоходыРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Расходы от снижения стоимости активов""/", П010010004_РасходыОтСниженияСтоимостиАктивов);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/", П010010004_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - ""Прочие косвенные расходы""/ в корреспонденции со счетом 68.02", -П04_НДС_ПрочиеКосвенныеРасходы);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "!ДО", П010010004_ЧрезвычайныеДоходыРасходы, Счет("99.01"),,,,,,,, ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы"));
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/", ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100235005", "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), Счет("68.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "ФормаОтчета");
	
	
	КодСтроки = "2410";
	НаименованиеСтроки = "Текущий налог на прибыль";
	Графа = "05";
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаПрошлогоГода) Тогда
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "68.04", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_68_04_2__68_04_1 = ОБ("68.04.2", "68.04.1", мБухИтогиРС);
		ОБ_68_04_1__68_04_2 = ОБ("68.04.1", "68.04.2", мБухИтогиРС);
		
		ЗначениеПоказателя = ОБ_68_04_2__68_04_1 - ОБ_68_04_1__68_04_2;
		ИмяОбластиПоказателя = "П000100" + КодСтроки + Графа;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // Вычитаемый
		
		НаименованиеПоказателя = "Строка " + КодСтроки + """" + НаименованиеСтроки + """, графа """ + ЗаголовокДатаОтчетногоПериода + """";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеПоказателя, "+", "!ОБ", ОБ_68_04_2__68_04_1, Счет("68.04.2"), Счет("68.04.1"), мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, , "-", "!ОБ", -ОБ_68_04_1__68_04_2, Счет("68.04.1"), Счет("68.04.2"), мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, "ФормаОтчета");
	Иначе
		ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , Счет("99"), , Счет("68.04.1"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		ОБ_99_01_1__68_04_1_Налог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, КорСубконто1", Счет("99.01.1"), Счет("68.04.1"), ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
		
		ЗначениеПоказателя = ОБ_99_01_1__68_04_1_Налог;
		ИмяОбластиПоказателя = "П000100" + КодСтроки + Графа;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // Вычитаемый
		
		НаименованиеПоказателя = "Строка " + КодСтроки + """" + НаименованиеСтроки + """, графа """ + ЗаголовокДатаОтчетногоПериода + """";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеПоказателя, "+", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1",  ОБ_99_01_1__68_04_1_Налог, Счет("99.01.1"), Счет("68.04.1"), мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, "ФормаОтчета");
	КонецЕсли;
	
	// строка 2421 "в т.ч. постоянные налоговые обязательства (активы)"
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаПрошлогоГода) Тогда
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99.02.3", , "68.04.2", , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_99_02_3__68_04_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04.2"));
		ОБ_68_04_2__99_02_3 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.02.3"), Счет("68.04.2"));
		
		ЗначениеПоказателя = ОБ_99_02_3__68_04_2 - ОБ_68_04_2__99_02_3;
		УстановитьЗначениеПоказателя("П000100242105", -ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242105", "Строка 2421 ""в т. ч. постоянные налоговые обязательства (активы)"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", ОБ_99_02_3__68_04_2, Счет("99.02.3"), Счет("68.04.2"), 1, , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100242105", "", "-", "!ОБ", -ОБ_68_04_2__99_02_3, Счет("68.04.2"), Счет("99.02.3"), 1, , "ФормаОтчета");
	Иначе
		УстановитьЗначениеПоказателя("П000100242105", 0);
	КонецЕсли;
	
	// строка 2430 "Изменение отложенных налоговых обязательств" 
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 77 на обороты
	// - в корреспонденции со счетами 84.01 и 84.02 - для совместимости с предыдущими годами
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаПрошлогоГода) Тогда
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "77", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_77__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("84.01"));
		ОБ_84_02__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("84.02"));
		
		ОБ_77__99_2_4 = 0;
		ОБ_99_2_4__77 = 0;
		
		Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
			ОБ_77__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
			ОБ_99_2_4__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("99.02.4"));
		КонецЕсли;
		
		ОБ77__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
		ОБ68_4_2__77 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("77"), Счет("68.04.2"));
		
		П010014204 = ОБ68_4_2__77 - ОБ77__68_4_2 - ОБ_84_02__77 + ОБ_77__84_01 - ОБ_99_2_4__77 + ОБ_77__99_2_4;
		
		УстановитьЗначениеПоказателя("П000100243005", -П010014204);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "Строка 2430 ""Изменение отложенных налоговых обязательств"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!КО", ОБ68_4_2__77, Счет("77"), Счет("68.04.2"), 1, , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ДО", -ОБ77__68_4_2, Счет("77"), Счет("68.04.2"));
		Если ((ОБ_84_02__77 <> 0) ИЛИ (ОБ_77__84_01 <> 0)) Тогда
			// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ОБ", -ОБ_84_02__77, Счет("84.02"), Счет("77"));
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "+", "!ОБ",  ОБ_77__84_01, Счет("77"), Счет("84.01"));
		КонецЕсли;
		
		Если ((ОБ_77__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__77 <> 0)) Тогда
			// Корректировку оборотов  счета 77 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "-", "!ОБ", -ОБ_99_2_4__77, Счет("99.02.4"),Счет("77"));
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100243005", "", "+", "!ОБ",  ОБ_77__99_2_4, Счет("77"), Счет("99.02.4"));
		КонецЕсли;
	КонецЕсли;

	// строка 2450 "Изменение отложенных налоговых активов"
	// В форме №2 необходимо учесть возможную переоценку отложенных налоговых
	// активов и отложенных налоговых обязательств, проведенную в связи с
	// изменением ставки налога на прибыль. Проводки, отражающие результаты
	// переоценки, не должны влиять на финансовые результаты отчетного периода.
	// Для учета результатов переоценки корректируем обороты счета 09 на обороты: 
	// - в корреспонденции со счетами 84.01 и 84.02 - для совместимости с предыдущими годами
	// - в корреспонденции со счетоми 99 (99.02.4) - для учета периодов 2011 г и позже.
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаПрошлогоГода) Тогда
		мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "09", , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_09__84_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("84.01"));
		ОБ_84_02__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("84.02"));
		
		ОБ_09__99_2_4 = 0;
		ОБ_99_2_4__09 = 0;
		
		Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
			ОБ_09__99_2_4 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
			ОБ_99_2_4__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("99.02.4"));
		КонецЕсли;
		
		ОБ_09__68_4_2 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
		ОБ_68_4_2__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("09"), Счет("68.04.2"));
		
		П010014104 = ОБ_09__68_4_2 - ОБ_68_4_2__09 - ОБ_09__84_01 + ОБ_84_02__09 - ОБ_09__99_2_4 + ОБ_99_2_4__09;
		
		УстановитьЗначениеПоказателя("П000100245005", П010014104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "Строка 2450 ""Изменение отложенных налоговых активов"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "!ОБ", ОБ_09__68_4_2, Счет("09"), Счет("68.04.2"), 1, , "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_68_4_2__09, Счет("68.04.2"), Счет("09"), 1, , "ФормаОтчета");
		
		Если ((ОБ_09__84_01 <> 0) ИЛИ (ОБ_84_02__09 <> 0)) Тогда
			// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_09__84_01, Счет("09"), Счет("84.01"), 1, , "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "+", "!ОБ",  ОБ_84_02__09, Счет("84.02"), Счет("09"), 1, , "ФормаОтчета");
		КонецЕсли;
		
		Если ((ОБ_09__99_2_4 <> 0) ИЛИ (ОБ_99_2_4__09 <> 0)) Тогда
			// Корректировку оборотов счета 09 в расшифровку добавляем только тогда, 
			// когда такая корректировка существует
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "-", "!ОБ", -ОБ_09__99_2_4,     Счет("09"), Счет("99.02.4"), 1, , "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100245005", "", "+", "!ОБ",  ОБ_99_2_4__09, Счет("99.02.4"),     Счет("09"), 1, , "ФормаОтчета");
		КонецЕсли;
	КонецЕсли;
	
	// строка 2460 "Прочее"
	
	// Если ПБУ 18 не применяется, должна выводится строка "Налог на прибыль 
	// и иные аналогичные обязательные платежи", как в "старой" форме №2
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , "99", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	П010018004_99_1_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалогНаПрибыль"));
	П010018004_99_1_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалоговыеСанкции"));

	П010018004_99_2_4_Д = 0;
	П010018004_99_2_4_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		П010018004_99_2_4_Д = ОБ_99_2_4__09;
		П010018004_99_2_4_К = ОБ_77__99_2_4;
	КонецЕсли;

	П010018004_99_9_Д = 0;
	П010018004_99_9_К = 0;

	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		П010018004_99_9_Д = ДО("99.09");
		П010018004_99_9_К = КО("99.09");
	КонецЕсли;

	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет", мДатаНачалаПериодаПрошлогоГода, мДатаКонцаПериодаПрошлогоГода, , Счет("99.01"), , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОБ_99_01__09 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("99.01"), Счет("09"));
	ОБ_77__99_01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("99.01"), Счет("77"));

	П010018004 = П010018004_99_1_НалогНаПрибыль
	           + П010018004_99_1_НалоговыеСанкции
	           + П010018004_99_9_Д - П010018004_99_9_К
	           + ОБ_99_01__09 - ОБ_77__99_01;
	
	Если НЕ ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		П010018004 = П010018004 
		           - ОБ_99_01_1__68_04_1_Налог;
	КонецЕсли;
	
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		П010018004 = П010018004 
		           + П010018004_99_2_4_Д - П010018004_99_2_4_К;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя("П000100246005", -П010018004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "Строка 2460 ""Прочее"", графа """ + ЗаголовокДатаОтчетногоПериодаПрошлогоГода + """", "+", "Оборот по дебету счета 99.01 /субконто ""Налог на прибыль и аналогичные платежи""/", П010018004_99_1_НалогНаПрибыль, Счет("99.01"), , 1, , "ФормаОтчета");
	Если НЕ ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "Оборот с кредита счета 68.04.1 /субконто ""Налог (взносы): начислено / уплачено""/ в дебет счета 99.01.1", -ОБ_99_01_1__68_04_1_Налог, Счет("99.01.1"), Счет("68.04.1"));
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "Оборот по дебету счета 99.01 /субконто ""Причитающиеся налоговые санкции""/", П010018004_99_1_НалоговыеСанкции, Счет("99.01"), ,1, , "ФормаОтчета");
	Если ОрганизацияПрименяетПБУ18(мОргРасшифровка, мДатаКонцаПериодаОтчета) И ЗначениеЗаполнено(мСчет["99.02.4"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  П010018004_99_2_4_Д, Счет("99.02.4"), Счет("09"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -П010018004_99_2_4_К, Счет("99.02.4"), Счет("77"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, , "ФормаОтчета");
	КонецЕсли;
	Если ЗначениеЗаполнено(мСчет["99.09"]) Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  П010018004_99_9_Д, Счет("99.09"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -П010018004_99_9_К, Счет("99.09"), , ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "+", "!ДО",  ОБ_99_01__09, Счет("99.01"), Счет("09"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100246005", "", "-", "!КО", -ОБ_77__99_01, Счет("77"), Счет("99.01"), ДатаНачалаПериодаПредшествующегоГода, ДатаКонцаПериодаПредшествующегоГода, "ФормаОтчета");
	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьАвтоФормаОтчета()

// Процедура выполняет заполнение отдельной графы отчета о прибылях и убытках по данным ИБ за заданный период
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//
//  ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
//  ДеревоНастроек - ДеревоЗначений, задает дерево настроек вывода расшифровки строк отчета
//
&НаКлиенте
Процедура ЗаполнитьАвтоФормаОтчетаОбщие(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета, ДеревоНастроек)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер


	ДеревоНастроекСтрокРасшифровки = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	
	// Счета для расчета оборотов по видам прочих доходов и расходов
	СчетаОборотов = Новый Массив();
	СчетаОборотов.Добавить(Счет("91.01"));
	СчетаОборотов.Добавить(Счет("91.02"));
	
	СчетаОборотовКор = Новый Массив();
	СчетаОборотовКор.Добавить(Счет("01")); // счета 01, 02, 03, 04, 05 необходимы для расчета доходов и расходов, связанных с переоценкой внеоборотных активов
	СчетаОборотовКор.Добавить(Счет("02"));
	СчетаОборотовКор.Добавить(Счет("03"));
	СчетаОборотовКор.Добавить(Счет("04"));
	СчетаОборотовКор.Добавить(Счет("05"));
	СчетаОборотовКор.Добавить(Счет("68.02"));
	
	// Обороты по видам прочих доходов и расходов за отчетный период
	КО_91_01_ВПДР = Новый Структура;
	ДО_91_02_ВПДР = Новый Структура;
	ДО_91_02__68_02_ВПДР = Новый Структура;
	
	КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаОборотов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, СчетаОборотовКор, , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = мБухИтогиРС.ПолучитьОстаткиИОбороты();

	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления Цикл
		КО_91_01_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
		ДО_91_02__68_02_ВПДР.Вставить(ЗначениеПеречисления.Имя, 0);
	КонецЦикла;
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если Не ЗначениеЗаполнено(ВыбранноеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			ИндексВидаПДР = Перечисления.ВидыПрочихДоходовИРасходов.Индекс(ВыбранноеСубконто.ВидПрочихДоходовИРасходов);
			ИмяВидаПДР = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления[ИндексВидаПДР].Имя;
			
			// КО 91.01
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счет("91.01"), ВыбранноеСубконто);
			КО_91_01_ВПДР[ИмяВидаПДР] = КО_91_01_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("91.02"), ВыбранноеСубконто);
			ДО_91_02_ВПДР[ИмяВидаПДР] = ДО_91_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// ДО 91.02 в корреспонденции с 68.02
			СуммаОБ = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("68.02"));
			ДО_91_02__68_02_ВПДР[ИмяВидаПДР] = ДО_91_02__68_02_ВПДР[ИмяВидаПДР] + СуммаОБ;
			
			// расчет показателей доходов и расходов, связанных с переоценкой внеоборотных активов
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ДО_91_02__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01"));
				ДО_91_02__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02"));
				ДО_91_02__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("03"));
				ДО_91_02__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04"));
				ДО_91_02__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__01 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01"));
				КО_91_01__02 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02"));
				КО_91_01__03 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("03"));
				КО_91_01__04 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04"));
				КО_91_01__05 = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				
				КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__01 + КО_91_01__03 + КО_91_01__04;
				КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + КО_91_01__02 + КО_91_01__05;
				ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__01 + ДО_91_02__03 + ДО_91_02__04;
				ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов   = ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
																					   + ДО_91_02__02 + ДО_91_02__05;
			КонецЕсли;
			
		Иначе
			// обороты, у которых не заполнен вид прочих доходов и расходов, не учитываются
		КонецЕсли;
		
	КонецЦикла;
	
	// строка 23101 "Доходы (расходы), связанные с участием в других организациях"

	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		П0001023101 = КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		УстановитьЗначениеПоказателя("П0001023101" + Графа, П0001023101);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023101" + Графа, "Строка 23101 ""Доходы (расходы), связанные с участием в других организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23102 "Долевое участие в иностранных организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях = КО_91_01_ВПДР.ДолевоеУчастиеВИностранныхОрганизациях;

		П0001023102 = КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях;

		УстановитьЗначениеПоказателя("П0001023102" + Графа, П0001023102);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023102" + Графа, "Строка 23102 ""Долевое участие в иностранных организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВИностранныхОрганизациях"]) + """/", КО_91_01_ДолевоеУчастиеВИностранныхОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23103 "Долевое участие в российских организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23103", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях = КО_91_01_ВПДР.ДолевоеУчастиеВРоссийскихОрганизациях;

		П0001023103 = КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях;

		УстановитьЗначениеПоказателя("П0001023103" + Графа, П0001023103);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023103" + Графа, "Строка 23103 ""Долевое участие в российских организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВРоссийскихОрганизациях"]) + """/", КО_91_01_ДолевоеУчастиеВРоссийскихОрганизациях,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23201 "Проценты к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23201", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыКПолучениюУплате = КО_91_01_ВПДР.ПроцентыКПолучениюУплате;

		П0001023201 = КО_91_01_ПроцентыКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023201" + Графа, П0001023201);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023201" + Графа, "Строка 23201 ""Проценты к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыКПолучениюУплате"]) + """/", КО_91_01_ПроцентыКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23202 "Проценты по государственным ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23202", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам = КО_91_01_ВПДР.ПроцентыПоГосударственнымЦеннымБумагам;

		П0001023202 = КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам;

		УстановитьЗначениеПоказателя("П0001023202" + Графа, П0001023202);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023202" + Графа, "Строка 23202 ""Проценты по государственным ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыПоГосударственнымЦеннымБумагам"]) + """/", КО_91_01_ПроцентыПоГосударственнымЦеннымБумагам,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23203 "Проценты по государственным ценным бумагам по ставке 0%"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23203", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 = КО_91_01_ВПДР.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;

		П0001023203 = КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;

		УстановитьЗначениеПоказателя("П0001023203" + Графа, П0001023203);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023203" + Графа, "Строка 23203 ""Проценты по государственным ценным бумагам по ставке 0%"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0"]) + """/", КО_91_01_ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23301 "Проценты к уплате"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23301", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПроцентыКПолучениюУплате = ДО_91_02_ВПДР.ПроцентыКПолучениюУплате;

		П0001023301 = ДО_91_02_ПроцентыКПолучениюУплате;
		П0001023301 = -П0001023301; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023301" + Графа, П0001023301);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023301" + Графа, "Строка 23301 ""Проценты к уплате"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыКПолучениюУплате"]) + """/", ДО_91_02_ПроцентыКПолучениюУплате,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23302 "Проценты, начисленные в соответствии со статьей 269 НК РФ"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23302", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПроцентыНачисленныеПоСт269 = ДО_91_02_ВПДР.ПроцентыНачисленныеПоСт269;

		П0001023302 = ДО_91_02_ПроцентыНачисленныеПоСт269;
		П0001023302 = -П0001023302; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023302" + Графа, П0001023302);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023302" + Графа, "Строка 23302 ""Проценты, начисленные в соответствии со статьей 269 НК РФ"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПроцентыНачисленныеПоСт269"]) + """/", ДО_91_02_ПроцентыНачисленныеПоСт269,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23401 "Доходы, связанные с реализацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23401", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		П0001023401 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		УстановитьЗначениеПоказателя("П0001023401" + Графа, П0001023401);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023401" + Графа, "Строка 23401 ""Доходы, связанные с реализацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023401" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23402 "Доходы, связанные с ликвидацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23402", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		П0001023402 = КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		УстановитьЗначениеПоказателя("П0001023402" + Графа, П0001023402);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023402" + Графа, "Строка 23402 ""Доходы, связанные с ликвидацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23403 "Доходы, связанные с реализацией нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23403", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		П0001023403 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		УстановитьЗначениеПоказателя("П0001023403" + Графа, П0001023403);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023403" + Графа, "Строка 23403 ""Доходы, связанные с реализацией нематериальных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023403" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23404 "Доходы, связанные с реализацией прочего имущества"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23404", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		П0001023404 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		УстановитьЗначениеПоказателя("П0001023404" + Графа, П0001023404);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023404" + Графа, "Строка 23404 ""Доходы, связанные с реализацией прочего имущества"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023404" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23405 "Доходы, связанные с реализацией права требования как оказания финансовых услуг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23405", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		П0001023405 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		УстановитьЗначениеПоказателя("П0001023405" + Графа, П0001023405);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023405" + Графа, "Строка 23405 ""Доходы, связанные с реализацией права требования как оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023405" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23406 "Доходы, связанные с реализацией права до наступления платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23406", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		П0001023406 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		УстановитьЗначениеПоказателя("П0001023406" + Графа, П0001023406);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023406" + Графа, "Строка 23406 ""Доходы, связанные с реализацией права до наступления платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023406" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23407 "Доходы, связанные с реализацией права после наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23407", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		П0001023407 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		УстановитьЗначениеПоказателя("П0001023407" + Графа, П0001023407);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023407" + Графа, "Строка 23407 ""Доходы, связанные с реализацией права после наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023407" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23408 "Доходы, связанные с реализацией имущественных прав, кроме права требования"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23408", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		П0001023408 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		УстановитьЗначениеПоказателя("П0001023408" + Графа, П0001023408);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023408" + Графа, "Строка 23408 ""Доходы, связанные с реализацией имущественных прав, кроме права требования"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023408" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23409 "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23409", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		П0001023409 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		УстановитьЗначениеПоказателя("П0001023409" + Графа, П0001023409);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023409" + Графа, "Строка 23409 ""Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023409" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23410 "Доходы, связанные с реализацией ценных бумаг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23410", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		П0001023410 = КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		УстановитьЗначениеПоказателя("П0001023410" + Графа, П0001023410);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023410" + Графа, "Строка 23410 ""Доходы, связанные с реализацией ценных бумаг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23411 "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23411", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = КО_91_01_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		П0001023411 = КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		УстановитьЗначениеПоказателя("П0001023411" + Графа, П0001023411);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023411" + Графа, "Строка 23411 ""Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23412 "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23412", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = КО_91_01_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		П0001023412 = КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		УстановитьЗначениеПоказателя("П0001023412" + Графа, П0001023412);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023412" + Графа, "Строка 23412 ""Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", КО_91_01_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23413 "Доходы, связанные со сдачей имущества в аренду (субаренду)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23413", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = КО_91_01_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		П0001023413 = КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду - ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		УстановитьЗначениеПоказателя("П0001023413" + Графа, П0001023413);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023413" + Графа, "Строка 23413 ""Доходы, связанные со сдачей имущества в аренду (субаренду)"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", КО_91_01_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023413" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23414 "Доходы в виде восстановленных оценочных резервов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23414", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ОтчисленияВОценочныеРезервы = КО_91_01_ВПДР.ОтчисленияВОценочныеРезервы;

		П0001023414 = КО_91_01_ОтчисленияВОценочныеРезервы;

		УстановитьЗначениеПоказателя("П0001023414" + Графа, П0001023414);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023414" + Графа, "Строка 23414 ""Доходы в виде восстановленных оценочных резервов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ОтчисленияВОценочныеРезервы"]) + """/", КО_91_01_ОтчисленияВОценочныеРезервы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23415 "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23415", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам = КО_91_01_ВПДР.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		П0001023415 = КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		УстановитьЗначениеПоказателя("П0001023415" + Графа, П0001023415);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023415" + Графа, "Строка 23415 ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам"]) + """/", КО_91_01_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23416 "Прочие операционные доходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23416", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрочиеОперационныеДоходыРасходы = КО_91_01_ВПДР.ПрочиеОперационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеОперационныеДоходыРасходы;

		П0001023416 = КО_91_01_ПрочиеОперационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П0001023416" + Графа, П0001023416);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023416" + Графа, "Строка 23416 ""Прочие операционные доходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/", КО_91_01_ПрочиеОперационныеДоходыРасходы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023416" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23417 "Штрафы, пени, неустойки к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23417", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате = КО_91_01_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;
		ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02__68_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;

		П0001023417 = КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате - ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023417" + Графа, П0001023417);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023417" + Графа, "Строка 23417 ""Штрафы, пени, неустойки к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/", КО_91_01_ШтрафыПениНеустойкиКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023417" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23418 "Прибыль прошлых лет"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23418", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрибыльУбытокПрошлыхЛет = КО_91_01_ВПДР.ПрибыльУбытокПрошлыхЛет;
		ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02__68_02_ВПДР.ПрибыльУбытокПрошлыхЛет;

		П0001023418 = КО_91_01_ПрибыльУбытокПрошлыхЛет - ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет;

		УстановитьЗначениеПоказателя("П0001023418" + Графа, П0001023418);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023418" + Графа, "Строка 23418 ""Прибыль прошлых лет"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/", КО_91_01_ПрибыльУбытокПрошлыхЛет,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023418" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23419 "Возмещение убытков к получению"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23419", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ВозмещениеУбытковКПолучениюУплате = КО_91_01_ВПДР.ВозмещениеУбытковКПолучениюУплате;

		П0001023419 = КО_91_01_ВозмещениеУбытковКПолучениюУплате;

		УстановитьЗначениеПоказателя("П0001023419" + Графа, П0001023419);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023419" + Графа, "Строка 23419 ""Возмещение убытков к получению"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ВозмещениеУбытковКПолучениюУплате"]) + """/", КО_91_01_ВозмещениеУбытковКПолучениюУплате,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23420 "Курсовые разницы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23420", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_КурсовыеРазницы = КО_91_01_ВПДР.КурсовыеРазницы;

		П0001023420 = КО_91_01_КурсовыеРазницы;

		УстановитьЗначениеПоказателя("П0001023420" + Графа, П0001023420);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023420" + Графа, "Строка 23420 ""Курсовые разницы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницы"]) + """/", КО_91_01_КурсовыеРазницы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23421 "Курсовые разницы по расчетам в у.е."
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23421", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_КурсовыеРазницыПоРасчетамВУЕ = КО_91_01_ВПДР.КурсовыеРазницыПоРасчетамВУЕ;

		П0001023421 = КО_91_01_КурсовыеРазницыПоРасчетамВУЕ;

		УстановитьЗначениеПоказателя("П0001023421" + Графа, П0001023421);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023421" + Графа, "Строка 23421 ""Курсовые разницы по расчетам в у.е."", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницыПоРасчетамВУЕ"]) + """/", КО_91_01_КурсовыеРазницыПоРасчетамВУЕ,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23422 "Доходы в виде списанной кредиторской задолженности"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23422", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности = КО_91_01_ВПДР.СписаниеДебиторскойКредиторскойЗадолженности;

		П0001023422 = КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности;

		УстановитьЗначениеПоказателя("П0001023422" + Графа, П0001023422);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023422" + Графа, "Строка 23422 ""Доходы в виде списанной кредиторской задолженности"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["СписаниеДебиторскойКредиторскойЗадолженности"]) + """/", КО_91_01_СписаниеДебиторскойКредиторскойЗадолженности,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23423 "Доходы, связанные с переоценкой внеоборотных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23423", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П0001023423 = КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов - ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;

		УстановитьЗначениеПоказателя("П0001023423" + Графа, П0001023423);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023423" + Графа, "Строка 23423 ""Доходы, связанные с переоценкой внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", КО_91_01__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023423" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -ДО_91_02__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23424 "Прочие внереализационные доходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23424", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		КО_91_01_ПрочиеВнереализационныеДоходыРасходы = КО_91_01_ВПДР.ПрочиеВнереализационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;

		П0001023424 = КО_91_01_ПрочиеВнереализационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы;

		УстановитьЗначениеПоказателя("П0001023424" + Графа, П0001023424);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023424" + Графа, "Строка 23424 ""Прочие внереализационные доходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/", КО_91_01_ПрочиеВнереализационныеДоходыРасходы,  Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023424" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23425
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23425", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
	
		ЗначениеПоказателя = КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"]
		                   - ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"];
		
		УстановитьЗначениеПоказателя("П0001023425" + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023425" + Графа, "Строка 23425 ""Корректировка прибыли до рыночных цен"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/", КО_91_01_ВПДР["КорректировкаПрибылиДоРыночныхЦен"], Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023425" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КорректировкаПрибылиДоРыночныхЦен"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["КорректировкаПрибылиДоРыночныхЦен"], Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23501 "Расходы, связанные с участием в других организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23501", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;

		П0001023501 = ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях;
		П0001023501 = -П0001023501; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023501" + Графа, П0001023501);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023501" + Графа, "Строка 23501 ""Расходы, связанные с участием в других организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23502 "Расходы, связанные с участием в российских организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23502", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях = ДО_91_02_ВПДР.ДолевоеУчастиеВРоссийскихОрганизациях;

		П0001023502 = ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях;
		П0001023502 = -П0001023502; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023502" + Графа, П0001023502);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023502" + Графа, "Строка 23502 ""Расходы, связанные с участием в российских организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВРоссийскихОрганизациях"]) + """/", ДО_91_02_ДолевоеУчастиеВРоссийскихОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23503 "Расходы, связанные с участием в иностранных организациях"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23503", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях = ДО_91_02_ВПДР.ДолевоеУчастиеВИностранныхОрганизациях;

		П0001023503 = ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях;
		П0001023503 = -П0001023503; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023503" + Графа, П0001023503);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023503" + Графа, "Строка 23503 ""Расходы, связанные с участием в иностранных организациях"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДолевоеУчастиеВИностранныхОрганизациях"]) + """/", ДО_91_02_ДолевоеУчастиеВИностранныхОрганизациях,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23504 "Расходы, связанные с реализацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23504", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;

		П0001023504 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств;
		П0001023504 = -П0001023504; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023504" + Графа, П0001023504);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023504" + Графа, "Строка 23504 ""Расходы, связанные с реализацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023504" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейОсновныхСредств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23505 "Расходы, связанные с ликвидацией основных средств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23505", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;

		П0001023505 = ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств;
		П0001023505 = -П0001023505; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023505" + Графа, П0001023505);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023505" + Графа, "Строка 23505 ""Расходы, связанные с ликвидацией основных средств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСЛиквидациейОсновныхСредств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23506 "Расходы, связанные с реализацией нематериальных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23506", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;

		П0001023506 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов;
		П0001023506 = -П0001023506; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023506" + Графа, П0001023506);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023506" + Графа, "Строка 23506 ""Расходы, связанные с реализацией нематериальных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023506" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23507 "Расходы, связанные с реализацией прочего имущества"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23507", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;

		П0001023507 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества;
		П0001023507 = -П0001023507; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023507" + Графа, П0001023507);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023507" + Графа, "Строка 23507 ""Расходы, связанные с реализацией прочего имущества"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023507" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23508 "Расходы, связанный с реализацией права требования как оказания финансовых услуг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23508", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;

		П0001023508 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг;
		П0001023508 = -П0001023508; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023508" + Графа, П0001023508);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023508" + Графа, "Строка 23508 ""Расходы, связанный с реализацией права требования как оказания финансовых услуг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023508" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23509 "Расходы, связанные с реализацией права требования до наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23509", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;

		П0001023509 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа;
		П0001023509 = -П0001023509; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023509" + Графа, П0001023509);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023509" + Графа, "Строка 23509 ""Расходы, связанные с реализацией права требования до наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023509" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23510 "Расходы, связанные с реализацией права требования после наступления срока платежа"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23510", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;

		П0001023510 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа;
		П0001023510 = -П0001023510; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023510" + Графа, П0001023510);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023510" + Графа, "Строка 23510 ""Расходы, связанные с реализацией права требования после наступления срока платежа"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023510" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23511 "Расходы, связанные с реализацией имущественных прав, кроме права требования"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23511", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;

		П0001023511 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования;
		П0001023511 = -П0001023511; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023511" + Графа, П0001023511);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023511" + Графа, "Строка 23511 ""Расходы, связанные с реализацией имущественных прав, кроме права требования"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023511" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23512 "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23512", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;

		П0001023512 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств - ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств;
		П0001023512 = -П0001023512; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023512" + Графа, П0001023512);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023512" + Графа, "Строка 23512 ""Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023512" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23513 "Расходы, связанные с реализацией ценных бумаг"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23513", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;

		П0001023513 = ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг;
		П0001023513 = -П0001023513; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023513" + Графа, П0001023513);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023513" + Графа, "Строка 23513 ""Расходы, связанные с реализацией ценных бумаг"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23514 "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23514", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок = ДО_91_02_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;

		П0001023514 = ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок;
		П0001023514 = -П0001023514; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023514" + Графа, П0001023514);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023514" + Графа, "Строка 23514 ""Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок"]) + """/", ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23515 "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23515", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР = ДО_91_02_ВПДР.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;

		П0001023515 = ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР;
		П0001023515 = -П0001023515; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023515" + Графа, П0001023515);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023515" + Графа, "Строка 23515 ""Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР"]) + """/", ДО_91_02_ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделокОР,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23516 "Расходы, связанные со сдачей имущества в аренду (субаренду)"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23516", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду = ДО_91_02__68_02_ВПДР.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;

		П0001023516 = ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду - ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду;
		П0001023516 = -П0001023516; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023516" + Графа, П0001023516);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023516" + Графа, "Строка 23516 ""Расходы, связанные со сдачей имущества в аренду (субаренду)"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023516" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23517 "Расходы в виде образованных оценочных резервов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23517", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ОтчисленияВОценочныеРезервы = ДО_91_02_ВПДР.ОтчисленияВОценочныеРезервы;

		П0001023517 = ДО_91_02_ОтчисленияВОценочныеРезервы;
		П0001023517 = -П0001023517; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023517" + Графа, П0001023517);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023517" + Графа, "Строка 23517 ""Расходы в виде образованных оценочных резервов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ОтчисленияВОценочныеРезервы"]) + """/", ДО_91_02_ОтчисленияВОценочныеРезервы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23518 "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23518", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам = ДО_91_02_ВПДР.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;

		П0001023518 = ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам;
		П0001023518 = -П0001023518; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023518" + Графа, П0001023518);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023518" + Графа, "Строка 23518 ""Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам"]) + """/", ДО_91_02_РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23519 "Расходы на услуги банков"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23519", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РасходыНаУслугиБанков = ДО_91_02_ВПДР.РасходыНаУслугиБанков;

		П0001023519 = ДО_91_02_РасходыНаУслугиБанков;
		П0001023519 = -П0001023519; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023519" + Графа, П0001023519);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023519" + Графа, "Строка 23519 ""Расходы на услуги банков"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РасходыНаУслугиБанков"]) + """/", ДО_91_02_РасходыНаУслугиБанков,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23520 "Прочие операционные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23520", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02_ВПДР.ПрочиеОперационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеОперационныеДоходыРасходы;

		П0001023520 = ДО_91_02_ПрочиеОперационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы;
		П0001023520 = -П0001023520; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023520" + Графа, П0001023520);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023520" + Графа, "Строка 23520 ""Прочие операционные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/", ДО_91_02_ПрочиеОперационныеДоходыРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023520" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеОперационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеОперационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23521 "Штрафы, пени, неустойки к уплате"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23521", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;
		ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате = ДО_91_02__68_02_ВПДР.ШтрафыПениНеустойкиКПолучениюУплате;

		П0001023521 = ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате - ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате;
		П0001023521 = -П0001023521; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023521" + Графа, П0001023521);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023521" + Графа, "Строка 23521 ""Штрафы, пени, неустойки к уплате"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/", ДО_91_02_ШтрафыПениНеустойкиКПолучениюУплате,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023521" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ШтрафыПениНеустойкиКПолучениюУплате"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ШтрафыПениНеустойкиКПолучениюУплате, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23522 "Убытки прошлых лет"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23522", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02_ВПДР.ПрибыльУбытокПрошлыхЛет;
		ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет = ДО_91_02__68_02_ВПДР.ПрибыльУбытокПрошлыхЛет;

		П0001023522 = ДО_91_02_ПрибыльУбытокПрошлыхЛет - ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет;
		П0001023522 = -П0001023522; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023522" + Графа, П0001023522);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023522" + Графа, "Строка 23522 ""Убытки прошлых лет"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/", ДО_91_02_ПрибыльУбытокПрошлыхЛет,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023522" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрибыльУбытокПрошлыхЛет"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрибыльУбытокПрошлыхЛет, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23523 "Курсовые разницы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23523", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_КурсовыеРазницы = ДО_91_02_ВПДР.КурсовыеРазницы;

		П0001023523 = ДО_91_02_КурсовыеРазницы;
		П0001023523 = -П0001023523; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023523" + Графа, П0001023523);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023523" + Графа, "Строка 23523 ""Курсовые разницы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницы"]) + """/", ДО_91_02_КурсовыеРазницы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23524 "Курсовые разницы по расчетам в у.е."
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23524", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ = ДО_91_02_ВПДР.КурсовыеРазницыПоРасчетамВУЕ;

		П0001023524 = ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ;
		П0001023524 = -П0001023524; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023524" + Графа, П0001023524);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023524" + Графа, "Строка 23524 ""Курсовые разницы по расчетам в у.е."", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["КурсовыеРазницыПоРасчетамВУЕ"]) + """/", ДО_91_02_КурсовыеРазницыПоРасчетамВУЕ,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23525 "Налоги и сборы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23525", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_НалогиИСборы = ДО_91_02_ВПДР.НалогиИСборы;

		П0001023525 = ДО_91_02_НалогиИСборы;
		П0001023525 = -П0001023525; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023525" + Графа, П0001023525);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023525" + Графа, "Строка 23525 ""Налоги и сборы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["НалогиИСборы"]) + """/", ДО_91_02_НалогиИСборы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23526 "Премия, выплаченная покупателю"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23526", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПремияПокупателю = ДО_91_02_ВПДР.ПремияПокупателю;

		П0001023526 = ДО_91_02_ПремияПокупателю;
		П0001023526 = -П0001023526; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023526" + Графа, П0001023526);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023526" + Графа, "Строка 23526 ""Премия, выплаченная покупателю"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПремияПокупателю"]) + """/", ДО_91_02_ПремияПокупателю,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23527 "Расходы в виде списанной дебиторской задолженности"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23527", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности = ДО_91_02_ВПДР.СписаниеДебиторскойКредиторскойЗадолженности;
		ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности = ДО_91_02_ВПДР.НДСПоСписаннойКредиторскойЗадолженности;

		П0001023527 = ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности - ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности;
		П0001023527 = -П0001023527; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023527" + Графа, П0001023527);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023527" + Графа, "Строка 23527 ""Расходы в виде списанной дебиторской задолженности"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["СписаниеДебиторскойКредиторскойЗадолженности"]) + """/", ДО_91_02_СписаниеДебиторскойКредиторскойЗадолженности,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023527" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["НДСПоСписаннойКредиторскойЗадолженности"]) + """/", -ДО_91_02_НДСПоСписаннойКредиторскойЗадолженности, Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23528 "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23528", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества = ДО_91_02_ВПДР.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества;

		П0001023528 = ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества;
		П0001023528 = -П0001023528; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023528" + Графа, П0001023528);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023528" + Графа, "Строка 23528 ""Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества"]) + """/", ДО_91_02_ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23529 "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23529", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд = ДО_91_02_ВПДР.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд;

		П0001023529 = ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд;
		П0001023529 = -П0001023529; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023529" + Графа, П0001023529);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023529" + Графа, "Строка 23529 ""Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд"]) + """/", ДО_91_02_РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23530 "Прочие внереализационные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23530", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;
		ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы = ДО_91_02__68_02_ВПДР.ПрочиеВнереализационныеДоходыРасходы;

		П0001023530 = ДО_91_02_ПрочиеВнереализационныеДоходыРасходы - ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы;
		П0001023530 = -П0001023530; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023530" + Графа, П0001023530);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023530" + Графа, "Строка 23530 ""Прочие внереализационные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/", ДО_91_02_ПрочиеВнереализационныеДоходыРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023530" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеВнереализационныеДоходыРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеВнереализационныеДоходыРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23531 "Прочие косвенные расходы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23531", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ДО_91_02_ПрочиеКосвенныеРасходы = ДО_91_02_ВПДР.ПрочиеКосвенныеРасходы;
		ДО_91_02__68_02_ПрочиеКосвенныеРасходы = ДО_91_02__68_02_ВПДР.ПрочиеКосвенныеРасходы;

		П0001023531 = ДО_91_02_ПрочиеКосвенныеРасходы - ДО_91_02__68_02_ПрочиеКосвенныеРасходы;
		П0001023531 = -П0001023531; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023531" + Графа, П0001023531);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023531" + Графа, "Строка 23531 ""Прочие косвенные расходы"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеКосвенныеРасходы"]) + """/", ДО_91_02_ПрочиеКосвенныеРасходы,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023531" + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеКосвенныеРасходы"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ПрочиеКосвенныеРасходы, Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;

	// строка 23532 "Расходы, связанные с переоценкой внеоборотных активов"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23532", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П0001023532 = ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов 
					- КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		П0001023532 = -П0001023532; // Показатель вычитаемый

		УстановитьЗначениеПоказателя("П0001023532" + Графа, П0001023532);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023532" + Графа, "Строка 23532 ""Расходы, связанные с переоценкой внеоборотных активов"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 01, 03, 04", ДО_91_02__010304_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов,  Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023532" + Графа, "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетами 02, 05", -КО_91_01__0205_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;
	
	// строка 23533
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока23533", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		ЗначениеПоказателя = ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]
		                   - ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"];
		
		УстановитьЗначениеПоказателя("П0001023533" + Графа, -ЗначениеПоказателя); // вычитаемый
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023533" + Графа, "Строка 23533 ""Прочие убытки, приравненные к внереализационным расходам"", графа """ + ЗаголовокГрафы + """", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/", ДО_91_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001023533" + Графа, "", "-",  "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"]) + """/ в корреспонденции со счетом 68.02", -ДО_91_02__68_02_ВПДР["ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"], Счет("91.02"), Счет("68.02"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
	КонецЕсли;
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, Субконто1, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , Счет("99"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки, Счет("68.04.1"), , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ДО_99_01_НалогНаПрибыль   = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалогНаПрибыль"));
	ДО_99_01_НалоговыеСанкции = мБухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("99.01"), ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалоговыеСанкции"));
	
	ИтогиРС = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет, КорСубконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , Счет("99"), , Счет("68.04.1"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	КО_68_04_1__99_01_1_Налог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет, Субконто1", Счет("68.04.1"), Счет("99.01.1"), ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	
	// строка 24601 "Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока24601", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		
		П0001024601 = ДО_99_01_НалогНаПрибыль
		            - КО_68_04_1__99_01_1_Налог;
		
		УстановитьЗначениеПоказателя("П0001024601" + Графа, П0001024601);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024601" + Графа, "Строка 24601 ""Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы"", графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_99_01_НалогНаПрибыль, Счет("99.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалогНаПрибыль"));
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024601" + Графа, "", "-", "!КО", -КО_68_04_1__99_01_1_Налог, Счет("68.04.1"), Счет("99.01.1"), НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	КонецЕсли;
	
	// строка 24602 "Штрафные санкции и пени за нарушение налогового и иного законодательства"
	Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока24602", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
		П0001024602 = ДО_99_01_НалоговыеСанкции;
		
		УстановитьЗначениеПоказателя("П0001024602" + Графа, П0001024602);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001024602" + Графа, "Строка 24602 ""Штрафные санкции и пени за нарушение налогового и иного законодательства"", графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_99_01_НалоговыеСанкции, Счет("99.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета", , , , ПредопределенноеЗначение("Перечисление.ПрибылиИУбытки.НалоговыеСанкции"));
	КонецЕсли;
	
	// Показатели строки 2510 и строк расшифровки показателей строки 2510 рассчитываются только при составлении годовой отчетности
	Если КонецПериодаОтчета = КонецГода(КонецПериодаОтчета) Тогда
	
		// строка 2510 "Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода"
		КО_83_01 = КО("83.01");
		ДО_83_01 = ДО("83.01");

		П0001002510 = КО_83_01 - ДО_83_01;

		УстановитьЗначениеПоказателя("П0001002510" + Графа, П0001002510);

		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001002510" + Графа, "Строка 2510 ""Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!КО", КО_83_01,  Счет("83.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001002510" + Графа, "", "-","!ДО", -ДО_83_01, Счет("83.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");


		// строка 25101 "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока25101", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			ОБ_01_01__83_01_1 = ОБ("01.01", "83.01.1", мБухИтоги);
			ОБ_83_01_1__02_01 = ОБ("83.01.1", "02.01", мБухИтоги);
			ОБ_83_01_1__01_01 = ОБ("83.01.1", "01.01", мБухИтоги);
			ОБ_02_01__83_01_1 = ОБ("02.01", "83.01.1", мБухИтоги);

			П0001025101 = ОБ_01_01__83_01_1 - ОБ_83_01_1__02_01 - ОБ_83_01_1__01_01 + ОБ_02_01__83_01_1;

			УстановитьЗначениеПоказателя("П0001025101" + Графа, П0001025101);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "Строка 25101 ""Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!ОБ", ОБ_01_01__83_01_1, мСчет["01.01"], мСчет["83.01.1"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, мСчет["83.01.1"], мСчет["02.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, мСчет["83.01.1"], мСчет["01.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025101" + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, мСчет["02.01"], мСчет["83.01.1"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		КонецЕсли;

		// строка 25102 "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода"
		Если ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока25102", "ИмяОбластиДопСтроки", Истина).ВключатьВОтчет Тогда
			ОБ_04_01__83_01_2 = ОБ("04.01", "83.01.2", мБухИтоги);
			ОБ_83_01_2__05 	  = ОБ("83.01.2", "05", мБухИтоги);
			ОБ_83_01_2__04_01 = ОБ("83.01.2", "04.01", мБухИтоги);
			ОБ_05__83_01_2    = ОБ("05", "83.01.2", мБухИтоги);

			П0001025102 = ОБ_04_01__83_01_2 - ОБ_83_01_2__05 - ОБ_83_01_2__04_01 + ОБ_05__83_01_2;

			УстановитьЗначениеПоказателя("П0001025102" + Графа, П0001025102);

			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "Строка 25102 ""Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода"", графа """ + ЗаголовокГрафы + """", "+","!ОБ", ОБ_04_01__83_01_2, мСчет["04.01"], мСчет["83.01.2"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "-","!ОБ", -ОБ_83_01_2__05,  мСчет["83.01.2"], мСчет["05"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "-","!ОБ", -ОБ_83_01_2__04_01,  мСчет["83.01.2"], мСчет["04.01"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П0001025102" + Графа, "", "+","!ОБ", ОБ_05__83_01_2,  мСчет["05"], мСчет["83.01.2"], НачалоПериодаОтчета, КонецПериодаОтчета, "ФормаОтчета");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьАвтоФормаОтчетаОбщие()

// Процедура выполняет заполнение отчета об изменения капитала
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
&НаКлиенте
Процедура ЗаполнитьАвтоОИК()
	
	ДатаНачалаПериодаГодаПредшествующегоПредыдущему = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
	ДатаКонцаПериодаГодаПредшествующегоПредыдущему = КонецГода(ДатаНачалаПериодаГодаПредшествующегоПредыдущему);
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода = КонецГода(ДатаНачалаПериодаПредыдущегоГода);
	
	Если ЗаполнятьГодПредшествующийПредыдущему Тогда
		// Бухгалтерские итоги по счетам, без аналитики
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
		
		мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		// строка 3100 "Величина капитала на 31 декабря года предшествующему предыдущему", графа "Уставный капитал"
		СКК_80 = СКК("80");
		
		П000100310003 = СКК_80;
		УстановитьЗначениеПоказателя("П000100310003", П000100310003);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310003", "Строка 3100 ""Величина капитала на 31 декабря года предшествующему предыдущему"", графа ""Уставный капитал""", "+", "!СКК", СКК_80, мСчет["80"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		// строка 3100 "Величина капитала на 31 декабря года предшествующему предыдущему", графа "Собственные акции, выкупленные у акционеров"
		СКД_81 = СКД("81");
		
		П000100310004 = -СКД_81;
		УстановитьЗначениеПоказателя("П000100310004", П000100310004);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310004", "Строка 3100 ""Величина капитала на 31 декабря года предшествующему предыдущему"", графа ""Собственные акции, выкупленные у акционеров""", "+", "!СКД", СКД_81, мСчет["81"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		// строка 3100 "Величина капитала на 31 декабря года предшествующему предыдущему", графа "Добавочный капитал"
		СКК_83 = СКК("83");
		
		П000100310005 = СКК_83;
		УстановитьЗначениеПоказателя("П000100310005", П000100310005);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310005", "Строка 3100 ""Величина капитала на 31 декабря года предшествующему предыдущему"", графа ""Добавочный капитал""", "+", "!СКК", СКК_83, мСчет["83"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		// строка 3100 "Величина капитала на 31 декабря года предшествующему предыдущему", графа "Резервный капитал"
		СКК_82 = СКК("82");
		
		П000100310006 = СКК_82;
		УстановитьЗначениеПоказателя("П000100310006", П000100310006);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310006", "Строка 3100 ""Величина капитала на 31 декабря года предшествующему предыдущему"", графа ""Резервный капитал""", "+", "!СКК", СКК_82, мСчет["82"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		// строка 3100 "Величина капитала на 31 декабря года предшествующему предыдущему", графа "Нераспределенная прибыль (непокрытый убыток)"
		СКК_84 = СКК("84");
		СКД_84 = СКД("84");
		
		П000100310007 = СКК_84 - СКД_84;
		УстановитьЗначениеПоказателя("П000100310007", П000100310007);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310007", "Строка 3100 ""Величина капитала на 31 декабря года предшествующему предыдущему"", графа ""Нераспределенная прибыль (непокрытый убыток)""", "+", "!СКК", СКК_84, мСчет["84"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100310007", "", "-", "!СКД", -СКД_84, мСчет["84"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		
		НомерСтроки = "3400";
		НаименованиеСтроки = "Капитал всего до корректировок";
		Графа = "03";
		НаименованиеГрафы = "На " + Формат(ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ДЛФ=DD");
		ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
		
		ЗначениеПоказателя = СКК_80 - СКД_81 + СКК_82 + СКК_83 + СКК_84 - СКД_84;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + НаименованиеГрафы + """", "+", "!СКК", СКК_80, Счет("80"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКД", -СКД_81, Счет("81"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_82, Счет("82"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_83, Счет("83"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_84, Счет("84"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКД", -СКД_84, Счет("84"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
		// строка 3401 "нераспределенная прибыль (непокрытый убыток) до корректировок", графа "На 31 декабря года предшествующего предыдущему"
		П000100340103 = СКК_84 - СКД_84;
		УстановитьЗначениеПоказателя("П000100340103", П000100340103);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340103", "Строка 3401 ""нераспределенная прибыль (непокрытый убыток) до корректировок"", графа ""На 31 декабря года предшествующего предыдущему""", "+", "!СКК", СКК_84, Счет("84"), , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340103", "", "-", "!СКД", -СКД_84, мСчет["84"], , ДатаНачалаПериодаГодаПредшествующегоПредыдущему, ДатаКонцаПериодаГодаПредшествующегоПредыдущему, "ОИК");
		
	КонецЕсли;
	
	Если ЗаполнятьГодПредыдущий Тогда
		Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
				|ОборотДт, ОборотКт,
				|КорОборотДт, КорОборотКт,
				|КонечныйОстатокДт, КонечныйОстатокКт";
		мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
		
		ОБ_99__84_01 = ОБ("99", "84.01", мБухИтоги);
		ОБ_84_02__99 = ОБ("84.02", "99", мБухИтоги);
		
		НомерСтроки = "3400";
		НаименованиеСтроки = "Капитал всего до корректировок";
		Графа = "04";
		НаименованиеГрафы = "Изменения капитала за " + Формат(ДатаКонцаПериодаПредыдущегоГода, "ДФ=yyyy") + " г. - за счет чистой прибыли (убытка)";
		ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
		
		ЗначениеПоказателя = ОБ_99__84_01 - ОБ_84_02__99;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + НаименованиеГрафы + """", "+", "!ОБ", ОБ_99__84_01, Счет("99"), Счет("84.01"), ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!ОБ", -ОБ_84_02__99,Счет("84.02"), Счет("99"), ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		
		
		НомерСтроки = "3400";
		НаименованиеСтроки = "Капитал всего до корректировок";
		Графа = "06";
		НаименованиеГрафы = "На " + Формат(ДатаКонцаПериодаПредыдущегоГода, "ДЛФ=DD");
		ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
		
		СКК_80 = СКК("80", мБухИтоги);
		СКД_81 = СКД("81", мБухИтоги);
		СКК_82 = СКК("82", мБухИтоги);
		СКК_83 = СКК("83", мБухИтоги);
		СКК_84 = СКК("84", мБухИтоги);
		СКД_84 = СКД("84", мБухИтоги);
		
		ЗначениеПоказателя = СКК_80 - СКД_81 + СКК_82 + СКК_83 + СКК_84 - СКД_84;
		УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + НаименованиеГрафы + """", "+", "!СКК", СКК_80, Счет("80"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКД", -СКД_81, Счет("81"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_82, Счет("82"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_83, Счет("83"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "+", "!СКК", СКК_84, Счет("84"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, "", "-", "!СКД", -СКД_84, Счет("84"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		
		
		// строка 3401 "нераспределенная прибыль (непокрытый убыток) до корректировок", графа "Изменения капитала за предыдущий год за счет чистой прибыли (убытка)"
		П000100340104 = ОБ_99__84_01 - ОБ_84_02__99;
		УстановитьЗначениеПоказателя("П000100340104", П000100340104);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340104", "Строка 3401 ""нераспределенная прибыль (непокрытый убыток) до корректировок"", графа ""Изменения капитала за предыдущий год за счет чистой прибыли (убытка)""", "+", "!ОБ", ОБ_99__84_01, Счет("99"), Счет("84.01"), ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340104", "", "-", "!ОБ", -ОБ_84_02__99,Счет("84.02"), Счет("99"), ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		
		// строка 3401 "нераспределенная прибыль (непокрытый убыток) до корректировок", графа "На 31 декабря предыдущего года"
		СКК_84 = СКК("84");
		СКД_84 = СКД("84");
		
		П000100340106 = СКК_84 - СКД_84;
		УстановитьЗначениеПоказателя("П000100340106", П000100340106);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340106", "Строка 3401 ""нераспределенная прибыль (непокрытый убыток) до корректировок"", графа ""На 31 декабря предыдущего года""", "+", "!СКК", СКК_84, Счет("84"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100340106", "", "-", "!СКД", -СКД_84, Счет("84"), , ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода, "ОИК");
		
		// строки годового блока
		ЗаполнитьАвтоОИКЗаГод("32", ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода);
		
	КонецЕсли;
	
	ЗаполнитьАвтоОИКЗаГод("33", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
	
КонецПроцедуры

// Процедура выполняет заполнение отчета об изменения капитала
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  ГруппаПоказателей - Строка длиной 2 символа, указывает на группу показателей, по которым заполняются сведения
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
&НаКлиенте
Процедура ЗаполнитьАвтоОИКЗаГод(ГруппаПоказателей, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
			|ОборотДт, ОборотКт,
			|КорОборотДт, КорОборотКт,
			|КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", НачалоПериодаОтчета, КонецПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	// строка ХХ11 "чистая прибыль", графа "Нераспределенная прибыль (непокрытый убыток)"
	ОБ_99__84_01 = ОБ("99", "84.01", мБухИтоги);
	
	П000100ХХ1107 = ОБ_99__84_01;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "1107", П000100ХХ1107);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "1107", "Строка " + ГруппаПоказателей + "11 ""чистая прибыль"", графа ""Нераспределенная прибыль (непокрытый убыток)""", "+", "!ОБ", ОБ_99__84_01, мСчет["99"], мСчет["84.01"], НачалоПериодаОтчета, КонецПериодаОтчета,"ОИК");
	
	// строка ХХ12 "переоценка имущества", графа "Добавочный капитал"
	КО_83_01 = КО("83.01");
	ДО_83_01 = ДО("83.01");
	
	П000100ХХ1205 = КО_83_01 - ДО_83_01;
	П000100ХХ1205 = ?(П000100ХХ1205 > 0, П000100ХХ1205, 0);
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "1205", П000100ХХ1205);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "1205", "Строка " + ГруппаПоказателей + "12 ""переоценка имущества"", графа ""Добавочный капитал"" (отражается только положительное значение)", "+", "!КО", КО_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета,"ОИК");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "1205", "", "-", "!ДО", -ДО_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ21 "убыток", графа "Нераспределенная прибыль (непокрытый убыток)"
	ОБ_84_02__99 = ОБ("84.02", "99", мБухИтоги);
	
	П000100ХХ2107 = ОБ_84_02__99;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "2107", П000100ХХ2107);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "2107", "Строка " + ГруппаПоказателей + "21 ""убыток"", графа ""Нераспределенная прибыль (непокрытый убыток)""", "+", "!ОБ", ОБ_84_02__99, мСчет["84.02"], мСчет["99"], НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ22 "переоценка имущества", графа "Добавочный капитал"
	КО_83_01 = КО("83.01");
	ДО_83_01 = ДО("83.01");
	
	П000100ХХ2205 = КО_83_01 - ДО_83_01;
	П000100ХХ2205 = ?(П000100ХХ2205 < 0, П000100ХХ2205, 0);
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "2205", П000100ХХ2205);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "2205", "Строка " + ГруппаПоказателей + "22 ""переоценка имущества"", графа ""Добавочный капитал"" (отражается только отрицательное значение)", "+", "!КО", КО_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "2205", "", "-", "!ДО", -ДО_83_01, мСчет["83.01"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ27 "дивиденды", графа "Нераспределенная прибыль (непокрытый убыток)"
	ОБ_84__75_02 = ОБ("84", "75.02", мБухИтоги);
	
	П000100ХХ2707 = ОБ_84__75_02;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "2707", -П000100ХХ2707);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "2707", "Строка " + ГруппаПоказателей + "27 ""дивиденды"", графа ""Нераспределенная прибыль (непокрытый убыток)""", "+", "!ОБ", ОБ_84__75_02, мСчет["84"], мСчет["75.02"], НачалоПериодаОтчета, КонецПериодаОтчета,"ОИК");
	
	
	НомерСтроки = ГруппаПоказателей + "40";
	НаименованиеСтроки = "изменение резервного капитала";
	Графа = "06";
	НаименованиеГрафы  = "Резервный капитал";
	ИмяОбласти = "П000100" + НомерСтроки + Графа;
	
	ОБ_84__82 = ОБ("84", "82", мБухИтоги);
	ОБ_82__84 = ОБ("82", "84", мБухИтоги);
	
	ЗначениеПоказателя = ОБ_84__82 - ОБ_82__84;
	УстановитьЗначениеПоказателя(ИмяОбласти, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + НаименованиеГрафы + """", "+", "!ОБ", ОБ_84__82, Счет("84"), Счет("82"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, "", "-", "!ОБ", -ОБ_82__84, Счет("82"), Счет("84"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	
	Если ГруппаПоказателей = "32" Тогда
		СтрокаВидаГода = "предыдущего";
	ИначеЕсли ГруппаПоказателей = "33" Тогда
		СтрокаВидаГода = "отчетного";
	Иначе
		// Работа с другими группами показателей не предусмотрена.
	КонецЕсли;
	
	
	// строка ХХ00 "Величина капитала на 31 декабря ... года", графа "Уставный капитал"
	СКК_80 = СКК("80");
	
	П000100ХХ0003 = СКК_80;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "0003", П000100ХХ0003);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0003", "Строка " + ГруппаПоказателей + "00 ""Величина капитала на 31 декабря " + СтрокаВидаГода + " года"", графа ""Уставный капитал""", "+", "!СКК", СКК_80, мСчет["80"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ00 "Величина капитала на 31 декабря ... года", графа "Собственные акции, выкупленные у акционеров"
	СКД_81 = СКД("81");
	
	П000100ХХ0004 = СКД_81;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "0004", -П000100ХХ0004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0004", "Строка " + ГруппаПоказателей + "00 ""Величина капитала на 31 декабря " + СтрокаВидаГода + " года"", графа ""Собственные акции, выкупленные у акционеров""", "+", "!СКД", СКД_81, мСчет["81"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ00 "Величина капитала на 31 декабря ... года", графа "Добавочный капитал"
	СКК_83 = СКК("83");
	
	П000100ХХ0005 = СКК_83;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "0005", П000100ХХ0005);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0005", "Строка " + ГруппаПоказателей + "00 ""Величина капитала на 31 декабря " + СтрокаВидаГода + " года"", графа ""Добавочный капитал""", "+", "!СКК", СКК_83, мСчет["83"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ00 "Величина капитала на 31 декабря ... года", графа "Резервный капитал"
	СКК_82 = СКК("82");
	
	П000100ХХ0006 = СКК_82;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "0006", П000100ХХ0006);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0006", "Строка " + ГруппаПоказателей + "00 ""Величина капитала на 31 декабря " + СтрокаВидаГода + " года"", графа ""Резервный капитал""", "+", "!СКК", СКК_82, мСчет["82"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
	// строка ХХ00 "Величина капитала на 31 декабря ... года", графа "Нераспределенная прибыль (непокрытый убыток)"
	СКК_84 = СКК("84");
	СКД_84 = СКД("84");
	
	П000100ХХ0007 = СКК_84 - СКД_84;
	УстановитьЗначениеПоказателя("П000100" + ГруппаПоказателей + "0007", П000100ХХ0007);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0007", "Строка " + ГруппаПоказателей + "00 ""Величина капитала на 31 декабря " + СтрокаВидаГода + " года"", графа ""Нераспределенная прибыль (непокрытый убыток)""", "+", "!СКК", СКК_84, мСчет["84"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + ГруппаПоказателей + "0007", "", "-", "!СКД", -СКД_84, мСчет["84"], , НачалоПериодаОтчета, КонецПериодаОтчета, "ОИК");
	
КонецПроцедуры

// Процедура выполняет заполнение отдельной графы отчета о движении денежных средств по данным ИБ за заданный период
//		
// 		Для работы процедуры необходимы заполненные переменные модуля:
//			мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//			мОргРасшифровка - ссылка на Организацию, по которой строится отчет
// 			мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
// 
//  Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//
//  ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//
//  НачалоПериодаОтчета - Дата, задает начало периода отчета
//
//  КонецПериодаОтчета - Дата, задает конец периода отчета
//
&НаКлиенте
Процедура ЗаполнитьАвтоОДДС(Графа, ЗаголовокГрафы, НачалоПериодаОтчета, КонецПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 4 переход(а|ов) на сервер

	
	СчетаДДС = Новый Массив;
	СчетаДДС.Добавить(Счет("50.01"));
	СчетаДДС.Добавить(Счет("50.02"));
	СчетаДДС.Добавить(Счет("50.21"));
	
	СчетаДДС.Добавить(Счет("51"));
	СчетаДДС.Добавить(Счет("52"));
	
	СчетаДДС.Добавить(Счет("55.01"));
	СчетаДДС.Добавить(Счет("55.02"));
	СчетаДДС.Добавить(Счет("55.04"));
	СчетаДДС.Добавить(Счет("55.21"));
	СчетаДДС.Добавить(Счет("55.24"));
	
	СчетаДДС.Добавить(Счет("57.01"));
	СчетаДДС.Добавить(Счет("57.21"));
	
	СтруктураДДС = ПолучитьСтруктуруДДС(СчетаДДС, мОргРасшифровка, НачалоПериодаОтчета, КонецПериодаОтчета);
	
	Если ЭтоБалансДляУПП_КА Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецПериодаОтчета, мОргРасшифровка, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ОрганизацияПерешлаНаУСН   = ПараметрыУчетнойПолитикиРегл.УСН;
		Иначе
			ОрганизацияПрименяетПБУ18 = Ложь;
			ОрганизацияПерешлаНаУСН   = Ложь;
		КонецЕсли;
	Иначе
		ПризнакОтказа = Ложь;
		УчетнаяПолитикаПоОрганизациии = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецПериодаОтчета, ПризнакОтказа, мОргРасшифровка, "Нал", Ложь);
		ОрганизацияПерешлаНаУСН = НЕ ПризнакОтказа И УчетнаяПолитикаПоОрганизациии.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
	КонецЕсли;
	
	Если КонецПериодаОтчета < '20110101' ИЛИ ОрганизацияПерешлаНаУСН Тогда
		СтруктураНДСвДДС = СтруктураДДС.СкопироватьКолонки();
	Иначе
		// Заполнение показателей с учетом ПБУ 23/2011
		СтруктураНДСвДДС = ПолучитьСтруктуруНДСвДДС2011(СчетаДДС, мОргРасшифровка, НачалоПериодаОтчета, КонецПериодаОтчета);
		
		ВидДДСПолучения    = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности");
		ВидДДСПеречисления = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК ДО,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК КО
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.Обороты(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			Счет = &Счет_51,
		               |			&СубконтоСтатьиДДС,
		               |			Организация = &Организация
		               |				И Субконто1.ВидДвиженияДенежныхСредств В (&Поступление, &Перечисление),
		               |			КорСчет = &Счет_68_02,
		               |			) КАК ХозрасчетныйОбороты";
		Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
		Запрос.УстановитьПараметр("НачПериода", НачалоПериодаОтчета);
		Запрос.УстановитьПараметр("КонПериода", КонецПериодаОтчета);
		Запрос.УстановитьПараметр("Счет_51", Счет("51"));
		Запрос.УстановитьПараметр("Счет_68_02", Счет("68.02"));
		Запрос.УстановитьПараметр("СубконтоСтатьиДДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
		Запрос.УстановитьПараметр("Перечисление", ВидДДСПолучения);
		Запрос.УстановитьПараметр("Поступление",  ВидДДСПеречисления);
		Выборка = Запрос.Выполнить().Выбрать();
		
		РасчетыПоНДС = Новый Структура;
		РасчетыПоНДС.Вставить("ПеречисленныйНДС", 0);
		РасчетыПоНДС.Вставить("ПолученныйНДС", 0);
		Если Выборка.Следующий() Тогда
			РасчетыПоНДС.ПеречисленныйНДС = Выборка.КО;
			РасчетыПоНДС.ПолученныйНДС    = Выборка.ДО;
		КонецЕсли;
	КонецЕсли;
	
	// Бухгалтерские итоги и оборты по счетам по аналитике "Статья движения денежных средств"
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт";
	мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , СчетаДДС, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	// Заполнение отдельных показателей общих для алгоритмов до 2010 года и с 2011 года
	
	НомерСтроки = "4450";
	НаименованиеСтроки = "Остаток денежных средств и денежных эквивалентов на начало отчетного периода";
	
	СНД_50_01 = СНД("50.01");
	СНД_50_02 = СНД("50.02");
	СНД_50_21 = СНД("50.21");
	СНД_51    = СНД("51");
	СНД_52    = СНД("52");
	СНД_55_01 = СНД("55.01");
	СНД_55_02 = СНД("55.02");
	СНД_55_04 = СНД("55.04");
	СНД_55_21 = СНД("55.21");
	СНД_55_24 = СНД("55.24");
	СНД_57_01 = СНД("57.01");
	СНД_57_21 = СНД("57.21");
	
	ЗначениеПоказателя = СНД_50_01 + СНД_50_02 + СНД_50_21 
	                   + СНД_51 + СНД_52 
	                   + СНД_55_01 + СНД_55_02 + СНД_55_04 + СНД_55_21 + СНД_55_24 
	                   + СНД_57_01 + СНД_57_21;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_50_01, Счет("50.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_50_02, Счет("51.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_50_21, Счет("51.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_51, Счет("51"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_52, Счет("52"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_55_01, Счет("55.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_55_02, Счет("55.02"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_55_04, Счет("55.04"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_55_21, Счет("55.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_55_24, Счет("55.24"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_57_01, Счет("57.01"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_57_21, Счет("57.21"), , НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	
	НомерСтроки = "4490";
	НаименованиеСтроки = "Величина влияния изменений курса иностранной валюты по отношению к рублю";
	
	// Оборты между счетами по аналитике "Курсовые разницы".
	ИтогиРС = "КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРС, "Сумма", "Счет, КорСчет, Субконто1", НачалоПериодаОтчета, КонецПериодаОтчета, , мСчет["91"], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОБ_50_21__91_01_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет, Субконто1", мСчет["91.01"], мСчет["50.21"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	ОБ_91_02__50_21_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, Субконто1", мСчет["91.02"], мСчет["50.21"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	
	ОБ_52__91_01_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет, Субконто1", мСчет["91.01"], мСчет["52"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	ОБ_91_02__52_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, Субконто1", мСчет["91.02"], мСчет["52"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	
	ОБ_55_21__91_01_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет, Субконто1", мСчет["91.01"], мСчет["55.21"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	ОБ_91_02__55_21_КурсовыеРазницы = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, Субконто1", мСчет["91.02"], мСчет["55.21"], ПредопределенноеЗначение("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
	
	ЗначениеПоказателя = ОБ_50_21__91_01_КурсовыеРазницы - ОБ_91_02__50_21_КурсовыеРазницы
	                   + ОБ_52__91_01_КурсовыеРазницы - ОБ_91_02__52_КурсовыеРазницы
	                   + ОБ_55_21__91_01_КурсовыеРазницы - ОБ_91_02__55_21_КурсовыеРазницы;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "Оборот с кредита счета 91.01 в дебет счета 50.21 по статье прочих доходов и расходов ""Курсовые разницы""", ОБ_50_21__91_01_КурсовыеРазницы, Счет("50.21"), Счет("91.01"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот с кредита счета 50.21 в дебет счета 91.02 по статье прочих доходов и расходов ""Курсовые разницы""", -ОБ_91_02__50_21_КурсовыеРазницы, Счет("91.02"), Счет("50.21"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот с кредита счета 91.01 в дебет счета 52 по статье прочих доходов и расходов ""Курсовые разницы""", ОБ_52__91_01_КурсовыеРазницы,        Счет("52"),    Счет("91.01"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот с кредита счета 52 в дебет счета 91.02 по статье прочих доходов и расходов ""Курсовые разницы""", -ОБ_91_02__52_КурсовыеРазницы,       Счет("91.02"), Счет("52"),    НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот с кредита счета 91.01 в дебет счета 55.21 по статье прочих доходов и расходов ""Курсовые разницы""", ОБ_55_21__91_01_КурсовыеРазницы,  Счет("55.21"), Счет("91.01"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот с кредита счета 55.21 в дебет счета 91.02 по статье прочих доходов и расходов ""Курсовые разницы""", -ОБ_91_02__55_21_КурсовыеРазницы, Счет("91.02"), Счет("55.21"), НачалоПериодаОтчета, КонецПериодаОтчета, "ОДДС");
	
	// Заполнение показателей различающихся для алгоритмов до 2010 года и с 2011.
	Если КонецПериодаОтчета < '20110101' Тогда
		ЗаполнитьАвтоОДДС2010(Графа, ЗаголовокГрафы, СтруктураДДС, СтруктураНДСвДДС);
	Иначе
		ЗаполнитьАвтоОДДС2011(Графа, ЗаголовокГрафы, СтруктураДДС, СтруктураНДСвДДС, РасчетыПоНДС);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение отдельной графы отчета о движении денежных средств по данным ИБ за заданный период
// по алгоритму действующему для сведений до 2011 года
//     Для работы процедуры необходимы заполненные переменные модуля:
//         мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//         мОргРасшифровка - ссылка на Организацию, по которой строится отчет
//         мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
//     Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//     ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//     НачалоПериодаОтчета - Дата, задает начало периода отчета
//     КонецПериодаОтчета - Дата, задает конец периода отчета
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоОДДС2010(Графа, ЗаголовокГрафы, СтруктураДДС, СтруктураНДСвДДС)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("Графа", Графа);
	ПараметрыВывода.Вставить("ЗаголовокГрафы", ЗаголовокГрафы);
	ПараметрыВывода.Вставить("СтруктураДДС", СтруктураДДС);
	ПараметрыВывода.Вставить("СтруктураНДСвДДС", СтруктураНДСвДДС);
	
	НомерСтроки        = "4111";
	НаименованиеСтроки = "поступления от продажи продукции, товаров, работ и услуг";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4119";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4121";
	НаименованиеСтроки = "платежи поставщикам (подрядчикам) за сырье, материалы, работы, услуги";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4122";
	НаименованиеСтроки = "платежи в связи с оплатой труда работников";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаТруда");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4129";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.РасчетыПоНалогамИСборам"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаПоПенсионнымПланам"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаДивидендовПроцентов"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4211";
	НаименованиеСтроки = "поступления от продажи внеоборотных активов (кроме финансовых вложений)";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиОбъектовОсновныхСредств"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиНематериальныхАктивов"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиДоходныхВложений"));
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4213";
	НаименованиеСтроки = "поступления от возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.РеализацияПрочихАктивовИнвестиционная"));
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4214";
	НаименованиеСтроки = "поступление дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПолученныеДивиденды"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПолученныеПроценты"));
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4219";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоИнвестиционнойДеятельности");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4221";
	НаименованиеСтроки = "платежи в связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеОбъектовОсновныхСредств"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаНИОКР"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеПрочихАктивовИнвестиционное"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеДоходныхВложенийВМатериальныеЦенности"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеНематериальныхАктивов"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4223";
	НаименованиеСтроки = "платежи в связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеЦенныхБумагИИныхФинансовыхВложений"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ЗаймыПредоставленныеДругимОрганизациям"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4224";
	НаименованиеСтроки = "выплата процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовВСвязиСоСтроительством");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4229";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеДочернихОрганизаций"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4311";
	НаименованиеСтроки = "получение кредитов и займов";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4313";
	НаименованиеСтроки = "поступления от выпуска акций, увеличения долей участия";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтЭмиссииАкций");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4314";
	НаименованиеСтроки = "поступления от выпуска облигаций, вескелей и других долговых ценных бумаг и др.";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыпускДолговыхИнструментов");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4319";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступлениеПлатежейПоФинансовойАренде"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыпускКомплексныхФинансовыхИнструментов"));
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4321";
	НаименованиеСтроки = "платежи собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыкупСобственныхАкций"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыкупСобственныхДолевыхИнструментов"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4322";
	НаименованиеСтроки = "на выплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаДолиМеньшинства"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4323";
	НаименованиеСтроки = "платежи в связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПогашениеЗаймовИКредитов"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4329";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС = Новый Массив;
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоФинансовойДеятельности"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовФинансовая"));
	ВидДДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПогашениеОбязательствПоФинансовойАренде"));
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
КонецПроцедуры

// Процедура выполняет заполнение отдельной графы отчета о движении денежных средств по данным ИБ за заданный период
// по алгоритму действующему для сведений с 2011 года
//     Для работы процедуры необходимы заполненные переменные модуля:
//         мСчет - соответствие номеров счетов и объектов плана счетов бухгалтерского учета
//         мОргРасшифровка - ссылка на Организацию, по которой строится отчет
//         мБухИтоги, мБухИтогиРС - объекты вида Обработка.БухгалтерскиеИтоги
//
// Параметры
//     Графа - Строка длиной 2 символа, указывает на графу, по которой заполняется показатель
//     ЗаголовокГрафы - Строка, задает наименование заполняемой графы в расшифровке показателя
//     НачалоПериодаОтчета - Дата, задает начало периода отчета
//     КонецПериодаОтчета - Дата, задает конец периода отчета
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоОДДС2011(Графа, ЗаголовокГрафы, СтруктураДДС, СтруктураНДСвДДС, РасчетыПоНДС)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("Графа", Графа);
	ПараметрыВывода.Вставить("ЗаголовокГрафы", ЗаголовокГрафы);
	ПараметрыВывода.Вставить("СтруктураДДС", СтруктураДДС);
	ПараметрыВывода.Вставить("СтруктураНДСвДДС", СтруктураНДСвДДС);
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	НомерСтроки        = "4111";
	НаименованиеСтроки = "поступления от продажи продукции, товаров, работ и услуг";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС_Агентские(ПараметрыВывода);
	
	НомерСтроки        = "4112";
	НаименованиеСтроки = "поступления от арендных платежей, лицензионных платежей, роялти, комиссионных и иных аналогичных платежей";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.АрендныеПлатежиРоялтиЛицензионныеПлатежиГонорарыКомиссионные");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4113";
	НаименованиеСтроки = "поступления от перепродажи финансовых вложений";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтПерепродажиФинансовыхВложений");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4119";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС_НДС(ПараметрыВывода, РасчетыПоНДС);
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	НомерСтроки        = "4121";
	НаименованиеСтроки = "платежи поставщикам (подрядчикам) за сырье, материалы, работы, услуги";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4122";
	НаименованиеСтроки = "платежи в связи с оплатой труда работников";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ОплатаТруда");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4123";
	НаименованиеСтроки = "уплата процентов по долговым обязательствам";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовПоДолговымОбязательствам");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4124";
	НаименованиеСтроки = "уплата налога на прибыль";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.НалогНаПрибыль");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4129";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС_НДС(ПараметрыВывода, РасчетыПоНДС);
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	НомерСтроки        = "4211";
	НаименованиеСтроки = "поступления от продажи внеоборотных активов (кроме финансовых вложений)";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиВнеоборотныхАктивовКромеФинансовых");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4212";
	НаименованиеСтроки = "поступления от продажи акций (долей участия) в других организациях";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтПродажиАкцийДругихОрганизаций");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4213";
	НаименованиеСтроки = "поступления от возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПродажиДолговыхЦенныхБумаг");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4214";
	НаименованиеСтроки = "поступление дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступлениеОтДивидендовПроцентовПоДолговымФинансовымВложениям");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4219";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоИнвестиционнойДеятельности");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	НомерСтроки        = "4221";
	НаименованиеСтроки = "платежи в связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеСозданиеМодернизацияРеконструкцияВнеоборотныхАктивов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4222";
	НаименованиеСтроки = "платежи в связи с приобретением акций (долей участия) в других организациях";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеАкцийДругихОрганизаций");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4223";
	НаименованиеСтроки = "платежи в связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеДолговыхЦенныхБумагПредоставлениеЗаймов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4224";
	НаименованиеСтроки = "выплата процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовВСвязиСоСтроительством");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4229";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности");
	ФормулаРасчета     = "-КО";
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4311";
	НаименованиеСтроки = "получение кредитов и займов";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4312";
	НаименованиеСтроки = "поступление денежных вкладов собственников (участников)";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступлениеДенежныхВкладовСобственников");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4313";
	НаименованиеСтроки = "поступления от выпуска акций, увеличения долей участия";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПоступленияОтЭмиссииАкций");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4314";
	НаименованиеСтроки = "поступления от выпуска облигаций, вескелей и других долговых ценных бумаг и др.";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыпускДолговыхИнструментов");
	ФормулаРасчета     = "ДО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4319";
	НаименованиеСтроки = "прочие поступления";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности");
	ФормулаРасчета     = "ДО";
	
	ОтраженныйНДС = СтруктураНДСвДДС.СкопироватьКолонки();
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4321";
	НаименованиеСтроки = "платежи собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПлатежиСобственникамВСвязиСВыкупомАкцийИлиПриВыходеИзСоставаУчастников");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4322";
	НаименованиеСтроки = "на выплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4323";
	НаименованиеСтроки = "платежи в связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПогашениеДолговыйЦенныхБумагВозвратКредитовИЗаймов");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
	НомерСтроки        = "4329";
	НаименованиеСтроки = "прочие платежи";
	ВидДДС             = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоФинансовойДеятельности");
	ФормулаРасчета     = "-КО";
	
	ПараметрыВывода.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыВывода.Вставить("НаименованиеСтроки", НаименованиеСтроки);
	ПараметрыВывода.Вставить("ВидДДС", ВидДДС);
	ПараметрыВывода.Вставить("ФормулаРасчета", ФормулаРасчета);
	ВывестиСтрокуОДДС(ПараметрыВывода);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНДСвДДС2011(СчетаДДС, Организация, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	Запрос = Новый Запрос;
	Если ЭтоБалансДляУПП_КА Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОплатаКомитенту,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ КАК КО,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ КАК КО_НДС,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета КАК ВидСчета,
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаСчета
		|ПОМЕСТИТЬ ВТ_Списания
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
		|			ИЛИ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю))
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АккредитивПереданныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА АккредитивПереданныйРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	АккредитивПереданныйРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ АккредитивПереданныйРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА АккредитивПереданныйРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ АккредитивПереданныйРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	АккредитивПереданныйРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ АккредитивПереданныйРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА АккредитивПереданныйРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ АккредитивПереданныйРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	АккредитивПереданныйРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета,
		|	АккредитивПереданныйРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств
		|ИЗ
		|	Документ.АккредитивПереданный.РасшифровкаПлатежа КАК АккредитивПереданныйРасшифровкаПлатежа
		|ГДЕ
		|	АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И АккредитивПереданныйРасшифровкаПлатежа.Ссылка.Проведен
		|	И АккредитивПереданныйРасшифровкаПлатежа.Ссылка.Оплачено
		|	И АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ИЛИ АккредитивПереданныйРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю))
		|	И АккредитивПереданныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И АккредитивПереданныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И АккредитивПереданныйРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета,
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств
		|ИЗ
		|	Документ.ИнкассовоеПоручениеПолученное.РасшифровкаПлатежа КАК ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа
		|ГДЕ
		|	ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.Проведен
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ИЛИ ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю))
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ИнкассовоеПоручениеПолученноеРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета,
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ИЛИ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю))
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета,
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств
		|ИЗ
		|	Документ.ПлатежноеТребованиеПолученное.РасшифровкаПлатежа КАК ПлатежноеТребованиеПолученноеРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику)
		|			ИЛИ ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю))
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежноеТребованиеПолученноеРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	""Касса"",
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.ВалютаДенежныхСредств
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю))
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Списания.ВидДДС КАК ВидДДС,
		|	0 КАК ДО,
		|	0 КАК ДО_НДС,
		|	ВЫБОР
		|		КОГДА ВТ_Списания.ЭтоОплатаКомитенту
		|			ТОГДА -ВТ_Списания.КО
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КО,
		|	ВЫБОР
		|		КОГДА ВТ_Списания.ЭтоОплатаКомитенту
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_Списания.КО_НДС
		|	КОНЕЦ КАК КО_НДС,
		|	ЕСТЬNULL(ВТ_Списания.ВидСчета, ""Расчетный"") КАК ВидСчета,
		|	ЕСТЬNULL(ВТ_Списания.ВалютаСчета, &ВалютаРегУчета) КАК ВалютаСчета
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	ВТ_Списания КАК ВТ_Списания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков),
		|	-ВТ_Списания.КО,
		|	-ВТ_Списания.КО_НДС,
		|	0,
		|	0,
		|	ЕСТЬNULL(ВТ_Списания.ВидСчета, ""Пустой""),
		|	&ВалютаРегУчета
		|ИЗ
		|	ВТ_Списания КАК ВТ_Списания
		|ГДЕ
		|	ВТ_Списания.ЭтоОплатаКомитенту
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ЕСТЬNULL(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета, ""Расчетный""),
		|	ЕСТЬNULL(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком))
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АккредитивПолученныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	АккредитивПолученныйРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА АккредитивПолученныйРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ АккредитивПолученныйРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА АккредитивПолученныйРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ АккредитивПолученныйРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ЕСТЬNULL(АккредитивПолученныйРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета, ""Расчетный""),
		|	ЕСТЬNULL(АккредитивПолученныйРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.АккредитивПолученный.РасшифровкаПлатежа КАК АккредитивПолученныйРасшифровкаПлатежа
		|ГДЕ
		|	АккредитивПолученныйРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И АккредитивПолученныйРасшифровкаПлатежа.Ссылка.Проведен
		|	И АккредитивПолученныйРасшифровкаПлатежа.Ссылка.Оплачено
		|	И АккредитивПолученныйРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (АккредитивПолученныйРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ АккредитивПолученныйРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком))
		|	И АккредитивПолученныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И АккредитивПолученныйРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И АккредитивПолученныйРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ЕСТЬNULL(ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета, ""Расчетный""),
		|	ЕСТЬNULL(ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.ИнкассовоеПоручениеПереданное.РасшифровкаПлатежа КАК ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа
		|ГДЕ
		|	ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.Проведен
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком))
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ИнкассовоеПоручениеПереданноеРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ЕСТЬNULL(ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета, ""Расчетный""),
		|	ЕСТЬNULL(ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.ПлатежноеТребованиеВыставленное.РасшифровкаПлатежа КАК ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком))
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежноеТребованиеВыставленноеРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ЕСТЬNULL(ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВидСчета, ""Расчетный""),
		|	ЕСТЬNULL(ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.СчетОрганизации.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.ДатаОплаты МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.Оплачено
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком))
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	""Касса"",
		|	ЕСТЬNULL(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.ВалютаДенежныхСредств, &ВалютаРегУчета)
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И (ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
		|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком))
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	0,
		|	ОтчетОРозничныхПродажахТовары.СуммаНДС,
		|	0,
		|	0,
		|	""Касса"",
		|	&ВалютаРегУчета
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|ГДЕ
		|	ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
		|	И ОтчетОРозничныхПродажахТовары.Ссылка.ОтражатьВБухгалтерскомУчете
		|	И ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ОтчетОРозничныхПродажахТовары.Ссылка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТ_Документы.ВидСчета = ""Касса""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Расчетный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Депозитный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Аккредитивный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Аккредитивы)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АккредитивыВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Пустой""
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|						ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчета)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал)
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетДДС,
		|	ВТ_Документы.ВидДДС КАК ВидДДС,
		|	СУММА(ВТ_Документы.ДО) КАК ДО,
		|	СУММА(ВТ_Документы.ДО_НДС) КАК ДО_НДС,
		|	СУММА(ВТ_Документы.КО) КАК КО,
		|	СУММА(ВТ_Документы.КО_НДС) КАК КО_НДС
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Документы.ВидДДС,
		|	ВЫБОР
		|		КОГДА ВТ_Документы.ВидСчета = ""Касса""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Расчетный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Депозитный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Аккредитивный""
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|							ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Аккредитивы)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АккредитивыВал)
		|				КОНЕЦ
		|		КОГДА ВТ_Документы.ВидСчета = ""Пустой""
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Документы.ВалютаСчета = &ВалютаРегУчета
		|						ИЛИ ВТ_Документы.ВалютаСчета = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчета)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДДС,
		|	СчетДДС";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.СпособОценкиТоваровВРознице КАК СпособОценкиТоваровВРознице
		|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&КонПериода, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Проведен
		|	И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		|			ИЛИ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
		|			ИЛИ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам))
		|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СчетБанк В(&СчетаДДС)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
		|ГДЕ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Проведен
		|	И (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
		|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю))
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СчетБанк В(&СчетаДДС)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|	И (РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю))
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СчетКасса В(&СчетаДДС)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|	И (ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
		|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика)
		|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка))
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СчетКасса В(&СчетаДДС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОРП.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтчетОРозничныхПродажахТовары.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ВТ_УчетнаяПолитика.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		|					И ОтчетОРозничныхПродажахТовары.Ссылка.Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК УчитыватьДокумент
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ОтчетОРозничныхПродажахТовары.Ссылка.Организация = &Организация
		|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
		|		И ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|		И ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|		И ОтчетОРозничныхПродажахТовары.Ссылка.СчетКасса В(&СчетаДДС)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ОтчетОРозничныхПродажахАгентскиеУслуги
		|	ГДЕ
		|		ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.Организация = &Организация
		|		И ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.Проведен
		|		И ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|		И ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|		И ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.СчетКасса В(&СчетаДДС)) КАК ОРП
		|ГДЕ
		|	ОРП.УчитыватьДокумент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СчетБанк КАК СчетДДС,
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ КАК НДС,
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОплатаКомитенту
		|ПОМЕСТИТЬ ВТ_Списания
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = ВТ_Документы.Регистратор
		|ГДЕ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СчетКасса,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа * ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|			ТОГДА 1
		|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|		ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ВТ_Документы.Регистратор
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.СчетДДС КАК СчетДДС,
		|	ВложенныйЗапрос.ВидДДС КАК ВидДДС,
		|	СУММА(ВложенныйЗапрос.ДО) КАК ДО,
		|	СУММА(ВложенныйЗапрос.ДО_НДС) КАК ДО_НДС,
		|	СУММА(ВложенныйЗапрос.КО) КАК КО,
		|	СУММА(ВложенныйЗапрос.КО_НДС) КАК КО_НДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Списания.СчетДДС КАК СчетДДС,
		|		ВТ_Списания.ВидДДС КАК ВидДДС,
		|		0 КАК ДО,
		|		0 КАК ДО_НДС,
		|		ВЫБОР
		|			КОГДА ВТ_Списания.ЭтоОплатаКомитенту
		|				ТОГДА -ВТ_Списания.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК КО,
		|		ВЫБОР
		|			КОГДА ВТ_Списания.ЭтоОплатаКомитенту
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_Списания.НДС
		|		КОНЕЦ КАК КО_НДС
		|	ИЗ
		|		ВТ_Списания КАК ВТ_Списания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков),
		|		-ВТ_Списания.Сумма,
		|		-ВТ_Списания.НДС,
		|		0,
		|		0
		|	ИЗ
		|		ВТ_Списания КАК ВТ_Списания
		|	ГДЕ
		|		ВТ_Списания.ЭтоОплатаКомитенту
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СчетБанк,
		|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|		0,
		|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|				ТОГДА 1
		|			ИНАЧЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|					КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|						ТОГДА 1
		|					ИНАЧЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КратностьВзаиморасчетов
		|				КОНЕЦ
		|		КОНЕЦ,
		|		0,
		|		0
		|	ИЗ
		|		Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|			ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = ВТ_Документы.Регистратор
		|	ГДЕ
		|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам)
		|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СчетКасса,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|		0,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|			КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|				ТОГДА 1
		|			ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|					КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|						ТОГДА 1
		|					ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|				КОНЕЦ
		|		КОНЕЦ,
		|		0,
		|		0
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|			ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ВТ_Документы.Регистратор
		|	ГДЕ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СчетКасса,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|		0,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС * ВЫБОР
		|			КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &ВалютаРегУчета
		|				ТОГДА 1
		|			ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов / ВЫБОР
		|					КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|						ТОГДА 1
		|					ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
		|				КОНЕЦ
		|		КОНЕЦ,
		|		0,
		|		0
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|			ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ВТ_Документы.Регистратор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
		|			ПО (ВТ_УчетнаяПолитика.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости))
		|	ГДЕ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВыручкаСНТТ
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтчетОРозничныхПродажахТовары.Ссылка.СчетКасса,
		|		ОтчетОРозничныхПродажахТовары.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|		0,
		|		ОтчетОРозничныхПродажахТовары.СуммаНДС,
		|		0,
		|		0
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|			ПО ОтчетОРозничныхПродажахТовары.Ссылка = ВТ_Документы.Регистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.СчетКасса,
		|		ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств,
		|		0,
		|		ОтчетОРозничныхПродажахАгентскиеУслуги.СуммаНДС,
		|		0,
		|		0
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ОтчетОРозничныхПродажахАгентскиеУслуги
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|			ПО ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка = ВТ_Документы.Регистратор) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СчетДДС,
		|	ВложенныйЗапрос.ВидДДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДДС,
		|	СчетДДС";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода",     НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода",     КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",    Объект.Организация);
	Запрос.УстановитьПараметр("СчетаДДС",       СчетаДДС);
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТаблицаОборотовПоВидамДДС = Запрос.Выполнить().Выгрузить();
	ТаблицаОборотовПоВидамДДС.Индексы.Добавить("ВидДДС");
	
	Возврат ТаблицаОборотовПоВидамДДС;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДДС(СчетаДДС, Организация, НачалоПериодаОтчета, КонецПериодаОтчета)
	
	ТаблицаСчетовДДС = Новый ТаблицаЗначений;
	ТаблицаСчетовДДС.Колонки.Добавить("СчетДДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Для Каждого СчетДДС Из СчетаДДС Цикл
		НовыйСтрокаСчетаДДС = ТаблицаСчетовДДС.Добавить();
		НовыйСтрокаСчетаДДС.СчетДДС = СчетДДС;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСчетовДДС.СчетДДС
	               |ПОМЕСТИТЬ ВТ_СчетаДДС
	               |ИЗ
	               |	&ТаблицаСчетовДДС КАК ТаблицаСчетовДДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаДДС.СчетДДС,
	               |	ВидыДвиженийДенежныхСредств.Ссылка КАК ВидДДС
	               |ПОМЕСТИТЬ ВТ_Сочетания
	               |ИЗ
	               |	ВТ_СчетаДДС КАК ВТ_СчетаДДС,
	               |	Перечисление.ВидыДвиженийДенежныхСредств КАК ВидыДвиженийДенежныхСредств
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Сочетания.СчетДДС КАК СчетДДС,
	               |	ВТ_Сочетания.ВидДДС КАК ВидДДС,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК ДО,
	               |	0 КАК ДО_НДС,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК КО,
	               |	0 КАК КО_НДС
	               |ИЗ
	               |	ВТ_Сочетания КАК ВТ_Сочетания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.Обороты(&НачПериода, &КонПериода, Период, Счет В (&СчетаДДС), &СубконтоСтатьиДДС, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |		ПО ВТ_Сочетания.СчетДДС = ХозрасчетныйОбороты.Счет
	               |			И ВТ_Сочетания.ВидДДС = ХозрасчетныйОбороты.Субконто1.ВидДвиженияДенежныхСредств";
	
	Запрос.УстановитьПараметр("ТаблицаСчетовДДС", ТаблицаСчетовДДС);
	Запрос.УстановитьПараметр("НачПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", КонецПериодаОтчета);
	Запрос.УстановитьПараметр("СчетаДДС", СчетаДДС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СубконтоСтатьиДДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	
	ТаблицаОборотовПоВидамДДС = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОборотовПоВидамДДС.Индексы.Добавить("ВидДДС");
	
	Возврат ТаблицаОборотовПоВидамДДС;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ВывестиСтрокуОДДС(ПараметрыВывода)
	
	Графа              = ПараметрыВывода.Графа;
	ЗаголовокГрафы     = ПараметрыВывода.ЗаголовокГрафы;
	СтруктураДДС       = ПараметрыВывода.СтруктураДДС;
	СтруктураНДСвДДС   = ПараметрыВывода.СтруктураНДСвДДС;
	НомерСтроки        = ПараметрыВывода.НомерСтроки;
	НаименованиеСтроки = ПараметрыВывода.НаименованиеСтроки;
	ЗначениеВидаДДС    = ПараметрыВывода.ВидДДС;
	ФормулаРасчета     = ПараметрыВывода.ФормулаРасчета;
	
	ВидыДДС = Новый Массив;
	Если ТипЗнч(ЗначениеВидаДДС) = Тип("Массив") Тогда
		ВидыДДС = ЗначениеВидаДДС;
	Иначе
		ВидыДДС.Добавить(ЗначениеВидаДДС);
	КонецЕсли;
	
	ИмяОбласти = "П000100" + НомерСтроки + Графа;
	Вычитаемый = (ФормулаРасчета = "-КО");
	
	ЗначениеПоказателя = 0;
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого ВидДДС Из ВидыДДС Цикл
		
		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС", ВидДДС));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
			
			Если ФормулаРасчета = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли ФормулаРасчета = "-КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ВызватьИсключение "Неверно задана формула для функции ВывестиСтрокуОДДС()";
			КонецЕсли;
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """/";
			ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
			
			// Отражение уменьшения на сумму НДС
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						Если ФормулаРасчета = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли ФормулаРасчета = "-КО" Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ЗначениеПоказателя = ЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
							РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, , , , , "ОДДС");
						КонецЕсли;
					ИначеЕсли ФормулаРасчета = "-КО" И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам;
						Слагаемое = СтрокаНДС.КО;
						ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, , , , , "ОДДС");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбласти, ?(Вычитаемый, -1, 1) * ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Функция ВывестиСтрокуОДДС_НДС(ПараметрыВывода, РасчетыПоНДС)
	
	Графа              = ПараметрыВывода.Графа;
	ЗаголовокГрафы     = ПараметрыВывода.ЗаголовокГрафы;
	СтруктураДДС       = ПараметрыВывода.СтруктураДДС;
	СтруктураНДСвДДС   = ПараметрыВывода.СтруктураНДСвДДС;
	НомерСтроки        = ПараметрыВывода.НомерСтроки;
	НаименованиеСтроки = ПараметрыВывода.НаименованиеСтроки;
	ЗначениеВидаДДС    = ПараметрыВывода.ВидДДС;
	ФормулаРасчета     = ПараметрыВывода.ФормулаРасчета;
	
	ВидыДДС = Новый Массив;
	Если ТипЗнч(ЗначениеВидаДДС) = Тип("Массив") Тогда
		ВидыДДС = ЗначениеВидаДДС;
	Иначе
		ВидыДДС.Добавить(ЗначениеВидаДДС);
	КонецЕсли;
	
	ИмяОбласти = "П000100" + НомерСтроки + Графа;
	Вычитаемый = (ФормулаРасчета = "-КО");
	
	ЗначениеПоказателя = 0;
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого ВидДДС Из ВидыДДС Цикл
		
		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС", ВидДДС));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
			
			Если ФормулаРасчета = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли ФормулаРасчета = "-КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ВызватьИсключение "Неверно задана формула для функции ВывестиСтрокуОДДС()";
			КонецЕсли;
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """/";
			ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						Если ФормулаРасчета = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли ФормулаРасчета = "-КО" Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ЗначениеПоказателя = ЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
							РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, , , , , "ОДДС");
						КонецЕсли;
					ИначеЕсли ФормулаРасчета = "-КО" И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам;
						Слагаемое = СтрокаНДС.КО;
						ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, , , , , "ОДДС");
			КонецЕсли;
			
			// Отражение уменьшения на сумму расчетов по НДС.
			Если ЭлементПоказателя.СчетДДС = Счет("51") Тогда
				Если ФормулаРасчета = "ДО" Тогда
					Слагаемое = -РасчетыПоНДС.ПолученныйНДС;
					НаименованиеСоставляющей = "Оборот с кредита счета 68.02 в дебет счета 51" + " /вид движения """ + Строка(ВидДДС) + """";
				ИначеЕсли ФормулаРасчета = "-КО" Тогда
					Слагаемое = -РасчетыПоНДС.ПеречисленныйНДС;
					НаименованиеСоставляющей = "Оборот с кредита счета 51 в дебет счета 68.02" + " /вид движения """ + Строка(ВидДДС) + """";
				КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Отражение свернутого НДС.
	НДСПоставщиков = СтруктураНДСвДДС.Итог("КО_НДС");
	НДСПокупателей = СтруктураНДСвДДС.Итог("ДО_НДС");
	
	СвернутыйНДС = НДСПокупателей - НДСПоставщиков - РасчетыПоНДС.ПеречисленныйНДС + РасчетыПоНДС.ПолученныйНДС;
	
	Если ФормулаРасчета = "ДО" Тогда
		НаименованиеСоставляющей = "Превышение полученного НДС над перечисленным НДС";
		Слагаемое = Макс(0, СвернутыйНДС);
	ИначеЕсли ФормулаРасчета = "-КО" Тогда
		НаименованиеСоставляющей = "Превышение перечисленного НДС над полученным НДС";
		Слагаемое = Макс(0, -СвернутыйНДС);
	КонецЕсли;
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
	ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
	
	УстановитьЗначениеПоказателя(ИмяОбласти, ?(Вычитаемый, -1, 1) * ЗначениеПоказателя);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ВывестиСтрокуОДДС_Агентские(ПараметрыВывода)
	
	Графа              = ПараметрыВывода.Графа;
	ЗаголовокГрафы     = ПараметрыВывода.ЗаголовокГрафы;
	СтруктураДДС       = ПараметрыВывода.СтруктураДДС;
	СтруктураНДСвДДС   = ПараметрыВывода.СтруктураНДСвДДС;
	НомерСтроки        = ПараметрыВывода.НомерСтроки;
	НаименованиеСтроки = ПараметрыВывода.НаименованиеСтроки;
	ЗначениеВидаДДС    = ПараметрыВывода.ВидДДС;
	ФормулаРасчета     = ПараметрыВывода.ФормулаРасчета;
	
	ВидыДДС = Новый Массив;
	Если ТипЗнч(ЗначениеВидаДДС) = Тип("Массив") Тогда
		ВидыДДС = ЗначениеВидаДДС;
	Иначе
		ВидыДДС.Добавить(ЗначениеВидаДДС);
	КонецЕсли;
	
	ИмяОбласти = "П000100" + НомерСтроки + Графа;
	Вычитаемый = (ФормулаРасчета = "-КО");
	
	ЗначениеПоказателя = 0;
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого ВидДДС Из ВидыДДС Цикл
		
		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС", ВидДДС));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
			
			Если ФормулаРасчета = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли ФормулаРасчета = "-КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ВызватьИсключение "Неверно задана формула для функции ВывестиСтрокуОДДС()";
			КонецЕсли;
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """/";
			ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
			
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
			
			// Отражение уменьшения на сумму НДС
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						Если ФормулаРасчета = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли ФормулаРасчета = "-КО" Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ЗначениеПоказателя = ЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
							РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, , , , , "ОДДС");
						КонецЕсли;
					ИначеЕсли ФормулаРасчета = "-КО" И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам;
						Слагаемое = СтрокаНДС.КО;
						ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + ЭлементПоказателя.СчетДДС.Код + " /вид движения """ + Строка(ВидДДС) + """ в части НДС";
				РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, , , , , "ОДДС");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Сторно платежей комитентам.
	Для Каждого СтрокаНДС Из СтруктураНДСвДДС Цикл
		Если ФормулаРасчета = "ДО" И СтрокаНДС.ДО < 0 Тогда
			Слагаемое = СтрокаНДС.ДО;
			СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
			
			ЗначениеПоказателя = ЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов";
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, , , , , "ОДДС");
			
			ЗначениеПоказателя = ЗначениеПоказателя + СлагаемоеНДС;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов в части НДС";
			РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, СлагаемоеНДС, , , , , "ОДДС");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбласти, ?(Вычитаемый, -1, 1) * ЗначениеПоказателя);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1()
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	ДатаНачалаГодаПредшествующегоПредыдущему = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	ТаблицаДопСтрок5100и5110 = Новый ТаблицаЗначений;
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("ВидНМА");
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа04_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа05_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа06_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа07_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа08_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа09_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа10_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа11_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа12_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа13_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа14_5100", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа04_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа05_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа06_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа07_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа08_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа09_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа10_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа11_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа12_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа13_5110", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5100и5110.Колонки.Добавить("Графа14_5110", ОписаниеТиповЧисло);
	
	ЗаполнитьАвтоПояснения1Строки5100и5110("5100", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДопСтрок5100и5110);
	ЗаполнитьАвтоПояснения1Строки5100и5110("5110", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаДопСтрок5100и5110);
	
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаДопСтрок5100и5110);
	ЗаполнитьАвтоПояснения1Строки5100и5110ВТомЧисле(ТаблицаДопСтрок5100и5110);
	
	ТаблицаДопСтрок5310 = Новый ТаблицаЗначений;
	ТаблицаДопСтрок5310.Колонки.Добавить("ВидНМА");
	ТаблицаДопСтрок5310.Колонки.Добавить("Графа03", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДопСтрок5310.Колонки.Добавить("Графа04", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДопСтрок5310.Колонки.Добавить("Графа05", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ЗаполнитьАвтоПояснения1Строка5130("03", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДопСтрок5310);
	ЗаполнитьАвтоПояснения1Строка5130("04", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаДопСтрок5310);
	ЗаполнитьАвтоПояснения1Строка5130("05", ДатаНачалаГодаПредшествующегоПредыдущему, ДатаКонцаГодаПредшествующегоПредыдущему, ТаблицаДопСтрок5310);
	
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаДопСтрок5310);
	ЗаполнитьАвтоПояснения1Строка5130ВТомЧисле(ТаблицаДопСтрок5310);
	
	ТаблицаДопСтрок5140и5150 = Новый ТаблицаЗначений;
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("РасходыНаНИОКР");
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа04_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа05_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа06_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа07_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа08_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа09_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа10_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа11_5140", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа04_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа05_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа06_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа07_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа08_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа09_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа10_5150", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5140и5150.Колонки.Добавить("Графа11_5150", ОписаниеТиповЧисло);
	
	ЗаполнитьАвтоПояснения1Строки5140и5150("5140", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДопСтрок5140и5150);
	ЗаполнитьАвтоПояснения1Строки5140и5150("5150", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаДопСтрок5140и5150);
	
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаДопСтрок5140и5150);
	ЗаполнитьАвтоПояснения1Строки5140и5150ВТомЧисле(ТаблицаДопСтрок5140и5150);
	
	ТаблицаДопСтрок5160и5170 = Новый ТаблицаЗначений;
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("ОбъектНИОКР");
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа04_5160", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа05_5160", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа06_5160", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа07_5160", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа08_5160", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа04_5170", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа05_5170", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа06_5170", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа07_5170", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5160и5170.Колонки.Добавить("Графа08_5170", ОписаниеТиповЧисло);
	
	ЗаполнитьАвтоПояснения1Строки5160и5170("5160", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДопСтрок5160и5170);
	ЗаполнитьАвтоПояснения1Строки5160и5170("5170", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаДопСтрок5160и5170);
	
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаДопСтрок5160и5170);
	ЗаполнитьАвтоПояснения1Строки5160и5170ВТомЧисле(ТаблицаДопСтрок5160и5170);
	
	ТаблицаДопСтрок5180и5190 = Новый ТаблицаЗначений;
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("ОбъектНМА");
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа04_5180", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа05_5180", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа06_5180", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа07_5180", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа08_5180", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа04_5190", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа05_5190", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа06_5190", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа07_5190", ОписаниеТиповЧисло);
	ТаблицаДопСтрок5180и5190.Колонки.Добавить("Графа08_5190", ОписаниеТиповЧисло);
	
	ЗаполнитьАвтоПояснения1Строки5180и5190("5180", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДопСтрок5180и5190);
	ЗаполнитьАвтоПояснения1Строки5180и5190("5190", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаДопСтрок5180и5190);
	
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаДопСтрок5180и5190);
	ЗаполнитьАвтоПояснения1Строки5180и5190ВТомЧисле(ТаблицаДопСтрок5180и5190);
	
КонецПроцедуры // ЗаполнитьАвтоПояснения1()

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1Строки5100и5110(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер


	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');

	БухИтоги       = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиРасчет = Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	СНД_04_01 = СНД("04.01", БухИтоги);
	П000100510004 = СНД_04_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "04", П000100510004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + "04", "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Первоначальная стоимость на начало года""", "+", "!СНД", СНД_04_01, мСчет["04.01"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	СНК_05 = СНК("05", БухИтоги);
	П000100510005 = СНК_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "05", -П000100510005); // показатель вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + "05", "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Накопленная амортизация на начало года""", "+", "!СНК", СНК_05, мСчет["05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	ИтогиРасчет = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("04"), , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	КО_04_01 = КО("04.01", БухИтогиРасчет);

	ОБ_04_01__08_05 = ОБ("04.01", "08.05", БухИтогиРасчет);
	ОБ_04_01__08_08 = ОБ("04.01", "08.08", БухИтогиРасчет);

	ОБ_05__04_01 = ОБ("05", "04.01", БухИтогиРасчет);

	ОБ_04_01__83_01_2 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("04.01"), Счет("83.01.2"));
	ОБ_83_01_2__04_01 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("04.01"), Счет("83.01.2"));

	ОБ_04_01__84 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("04.01"), Счет("84"));
	ОБ_84__04_01 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("04.01"), Счет("84"));

	ИтогиРасчет = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("05"), , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	КО_05          = КО("05", БухИтогиРасчет);

	ОБ_05__83_01_2 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("05"), Счет("83.01.2"));
	ОБ_83_01_2__05 = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("05"), Счет("83.01.2"));

	ОБ_05__84      = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", Счет("05"), Счет("84"));
	ОБ_84__05      = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, КорСчет", Счет("05"), Счет("84"));

	ОБ_05__91_01   = ОБ("05", "91.01", БухИтогиРасчет);

	// Разделение оборотов в корреспонденции со счетом 91 по видам прочих доходов и расходов.
	ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_04_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__04_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;

	ИтогиРасчет = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("91"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = БухИтогиРасчет.ПолучитьОстаткиИОбороты();

	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) И ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ОБ_05__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("05"));
				ОБ_91_02__05_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("05"));
				ОБ_04_01__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("04.01"));
				ОБ_91_02__04_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("04.01"));
				
				ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                   + ОБ_05__91_01_ПоСубконто;
				ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                   + ОБ_91_02__05_ПоСубконто;
				ОБ_04_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_04_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_04_01__91_01_ПоСубконто;
				ОБ_91_02__04_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__04_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_91_02__04_01_ПоСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Графа = "06";
	ЗначениеПоказателя = ОБ_04_01__08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - поступило""", "+", "!ОБ", ОБ_04_01__08_05, мСчет["04.01"], мСчет["08.05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	
	Графа = "07";
	ЗначениеПоказателя = КО_04_01 - ОБ_05__04_01
	                   - ОБ_83_01_2__05 + ОБ_05__83_01_2
	                   + ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов - ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "07", -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - Выбыло - первоначальная стоимость""", "+", "!ОБ", КО_04_01, мСчет["04.01"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_05__04_01, мСчет["05"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_2__05, мСчет["83.01.2"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_05__83_01_2, мСчет["05"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["05"], мСчет["91.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", -ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["91.02"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	Графа = "08";
	ЗначениеПоказателя = ОБ_05__04_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "08", ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - Выбыло - накопленная амортизация и убытки от обесценения""", "+", "!ОБ", ОБ_05__04_01, мСчет["05"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	Графа = "09";
	ЗначениеПоказателя = КО_05 
	                   - ОБ_83_01_2__05 + ОБ_05__83_01_2
	                   + ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов - ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	                   - ОБ_05__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "09", -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - начислено амортизации""", "+", "!КО", КО_05, мСчет["05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_2__05, мСчет["83.01.2"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_05__83_01_2, мСчет["05"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["05"], мСчет["91.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", -ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["91.02"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_05__91_01, мСчет["05"], мСчет["91.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	Графа = "11";
	Если ИспользоватьАлгоритм2011Года Тогда
		ЗначениеПоказателя = ОБ_04_01__83_01_2 - ОБ_83_01_2__04_01
		                   - ОБ_91_02__04_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
		                   + ОБ_04_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "11", ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы"", графа ""Изменения за период - Переоценка - Первоначальная стоимость""", "+", "!ОБ", ОБ_04_01__83_01_2, мСчет["04.01"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_2__04_01, мСчет["83.01.2"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 04.01", -ОБ_91_02__04_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["91.02"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 04.01", ОБ_04_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["04.01"], мСчет["91.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	ИНаче
		ЗначениеПоказателя = ОБ_04_01__83_01_2 - ОБ_83_01_2__04_01 - ОБ_84__04_01 + ОБ_04_01__84;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "11", ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы"", графа ""Изменения за период - Переоценка - Первоначальная стоимость""", "+", "!ОБ", ОБ_04_01__83_01_2, мСчет["04.01"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_2__04_01, мСчет["83.01.2"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_84__04_01, мСчет["84"], мСчет["04.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_04_01__84, мСчет["04.01"], мСчет["84"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	КонецЕсли;

	Графа = "12";
	Если ИспользоватьАлгоритм2011Года Тогда
		ЗначениеПоказателя = ОБ_83_01_2__05 - ОБ_05__83_01_2
		                   - ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
		                   + ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - Переоценка - Накопленная амортизация""", "+", "!ОБ", ОБ_83_01_2__05, мСчет["83.01.2"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_05__83_01_2, мСчет["05"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "Оборот по кредиту счета 91.01 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", -ОБ_05__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["05"], мСчет["91.01"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 05", ОБ_91_02__05_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, мСчет["91.02"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	Иначе
		ЗначениеПоказателя = ОБ_83_01_2__05 - ОБ_05__83_01_2 
		                   - ОБ_05__84 + ОБ_84__05;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Изменения за период - Переоценка - Накопленная амортизация""", "+", "!ОБ", ОБ_83_01_2__05, мСчет["83.01.2"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_05__83_01_2, мСчет["05"], мСчет["83.01.2"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_05__84, мСчет["05"], мСчет["84"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_84__05, мСчет["84"], мСчет["05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
	КонецЕсли;

	Графа = "13";
	СКД_04_01 = СКД("04.01", БухИтоги);
	ЗначениеПоказателя = СКД_04_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "13", ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Первоначальная стоимость на конец периода""", "+", "!СКД", СКД_04_01, мСчет["04.01"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	Графа = "14";
	СКК_05 = СКК("05", БухИтоги);
	ЗначениеПоказателя = СКК_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + "14", -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""Нематериальные активы - всего"", графа ""Накопленная амортизация и убытки от обесценения на конец периода""", "+", "!СКК", СКК_05, мСчет["05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1.ВидНМА КАК ВидНМА,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК ЗначениеГрафы04,
	               |	0 КАК ЗначениеГрафы05,
	               |	0 КАК ЗначениеГрафы06,
	               |	0 КАК ЗначениеГрафы07,
	               |	0 КАК ЗначениеГрафы08,
	               |	0 КАК ЗначениеГрафы09,
	               |	0 КАК ЗначениеГрафы10,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК ЗначениеГрафы13,
	               |	0 КАК ЗначениеГрафы14
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_04_01, &СубконтоНМА, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1.ВидНМА,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_05, &СубконтоНМА, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_01, &СубконтоНМА, СчетКт = &Счет_08_05, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_01, &СубконтоНМА, СчетКт = &Счет_08_08, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1.ВидНМА,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.Обороты(&НачПериода, &КонПериода, Период, Счет = &Счет_04_01, &СубконтоНМА, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
	               |	0,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, , СчетКт = &Счет_04_01, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, , СчетКт = &Счет_04_01, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1.ВидНМА,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.Обороты(&НачПериода, &КонПериода, Период, Счет = &Счет_05, &СубконтоНМА, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, &СубконтоНМА, СчетКт = &Счет_91_01, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07),
	               |	СУММА(ЗначениеГрафы08),
	               |	СУММА(ЗначениеГрафы09),
	               |	СУММА(ЗначениеГрафы10),
	               |	СУММА(ЗначениеГрафы13),
	               |	СУММА(ЗначениеГрафы14)
	               |ПО
	               |	ВидНМА";

	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки)
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ПереоценкаВнеоборотныхАктивов", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"));

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВидНМА = Выборка.ВидНМА;
		Если НЕ ЗначениеЗаполнено(ВидНМА) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ВидНМА = ВидНМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "04" + "_" + НомерСтроки] =  Выборка.ЗначениеГрафы04;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "05" + "_" + НомерСтроки] = -Выборка.ЗначениеГрафы05;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "06" + "_" + НомерСтроки] =  Выборка.ЗначениеГрафы06;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "07" + "_" + НомерСтроки] = -Выборка.ЗначениеГрафы07;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "08" + "_" + НомерСтроки] =  Выборка.ЗначениеГрафы08;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "09" + "_" + НомерСтроки] = -Выборка.ЗначениеГрафы09;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "10" + "_" + НомерСтроки] =  Выборка.ЗначениеГрафы10;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "13" + "_" + НомерСтроки] =  Выборка.ЗначениеГрафы13;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "14" + "_" + НомерСтроки] = -Выборка.ЗначениеГрафы14;
	КонецЦикла;
КонецФункции
 // ЗаполнитьАвтоПояснения1Строки5100и5110()

&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Запрос;

	ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_04_01",   Счет("04.01"));
	Запрос.УстановитьПараметр("Счет_05",      Счет("05"));
	Запрос.УстановитьПараметр("Счет_08_05",   Счет("08.05"));
	Запрос.УстановитьПараметр("Счет_08_08",   Счет("08.08"));
	Запрос.УстановитьПараметр("Счет_91_01",   Счет("91.01"));
	ЗаполнитьСведенияДопСтрок5100и5110КромеГраф11и12_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета)

	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');

	Графа = "11";
	Запрос = Новый Запрос;
	Если ИспользоватьАлгоритм2011Года Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА КАК ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_01, &СубконтоНМА, СчетКт = &Счет_83_01_2, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_2, , СчетКт = &Счет_04_01, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_91_02,
		               |			&СубконтоПрочиеДоходыИРасходы,
		               |			СчетКт = &Счет_04_01,
		               |			&СубконтоНМА,
		               |			Организация = &Организация
		               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_04_01,
		               |			&СубконтоНМА,
		               |			СчетКт = &Счет_91_01,
		               |			&СубконтоПрочиеДоходыИРасходы,
		               |			Организация = &Организация
		               |				И СубконтоКт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ВидНМА";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА КАК ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_01, &СубконтоНМА, СчетКт = &Счет_83_01_2, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_2, , СчетКт = &Счет_04_01, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_84), , СчетКт = &Счет_04_01, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_01, &СубконтоНМА, СчетКт В ИЕРАРХИИ (&Счет_84), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ВидНМА";
	КонецЕсли;
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки)
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ПереоценкаВнеоборотныхАктивов", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"));
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВидНМА = Выборка.ВидНМА;
		Если НЕ ЗначениеЗаполнено(ВидНМА) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ВидНМА = ВидНМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = Выборка.ЗначениеПоказателя;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Графа, Запрос;

	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_04_01",   Счет("04.01"));
	Запрос.УстановитьПараметр("Счет_84",      Счет("84"));
	Запрос.УстановитьПараметр("Счет_83_01_2", Счет("83.01.2"));
	Запрос.УстановитьПараметр("Счет_91_01",   Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02",   Счет("91.02"));
	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета)

	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');

	Графа = "12";
	Запрос = Новый Запрос;
	Если ИспользоватьАлгоритм2011Года Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА КАК ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_2, , СчетКт = &Счет_05, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, &СубконтоНМА, СчетКт = &Счет_83_01_2, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_05,
		               |			&СубконтоНМА,
		               |			СчетКт = &Счет_91_01,
		               |			&СубконтоПрочиеДоходыИРасходы,
		               |			Организация = &Организация
		               |				И СубконтоКт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_91_02,
		               |			&СубконтоПрочиеДоходыИРасходы,
		               |			СчетКт = &Счет_05,
		               |			&СубконтоНМА,
		               |			Организация = &Организация
		               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ВидНМА";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА КАК ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_2, , СчетКт = &Счет_05, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, &СубконтоНМА, СчетКт = &Счет_83_01_2, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидНМА,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_05, &СубконтоНМА, СчетКт В ИЕРАРХИИ (&Счет_84), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидНМА,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_84), , СчетКт = &Счет_05, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ВидНМА";
	КонецЕсли;
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки)
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ПереоценкаВнеоборотныхАктивов", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"));
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВидНМА = Выборка.ВидНМА;
		Если НЕ ЗначениеЗаполнено(ВидНМА) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ВидНМА = ВидНМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = Выборка.ЗначениеПоказателя;
		// Это же значение вычитается из графы 07.
		СтрокаТаблицыДополнительныхСтрок["Графа" + "07" + "_" + НомерСтроки] = -Выборка.ЗначениеПоказателя;
		// Это же значение вычитается из графы 09.
		СтрокаТаблицыДополнительныхСтрок["Графа" + "09" + "_" + НомерСтроки] = -Выборка.ЗначениеПоказателя;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Графа, Запрос;

	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_05",      Счет("05"));
	Запрос.УстановитьПараметр("Счет_84",      Счет("84"));
	Запрос.УстановитьПараметр("Счет_83_01_2", Счет("83.01.2"));
	Запрос.УстановитьПараметр("Счет_91_01",   Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02",   Счет("91.02"));
	ЗаполнитьСведенияДопСтрок5100и5110ПоГрафе12_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки);

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения1Строки5100и5110ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5100";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100510001 = ДополнительнаяСтрока.ВидНМА;
		
		СтрокаМногострочнойЧасти.П100100510004 = ДополнительнаяСтрока.Графа04_5100;
		СтрокаМногострочнойЧасти.П100100510005 = ДополнительнаяСтрока.Графа05_5100;
		СтрокаМногострочнойЧасти.П100100510006 = ДополнительнаяСтрока.Графа06_5100;
		СтрокаМногострочнойЧасти.П100100510007 = ДополнительнаяСтрока.Графа07_5100;
		СтрокаМногострочнойЧасти.П100100510008 = ДополнительнаяСтрока.Графа08_5100;
		СтрокаМногострочнойЧасти.П100100510009 = ДополнительнаяСтрока.Графа09_5100;
		СтрокаМногострочнойЧасти.П100100510010 = ДополнительнаяСтрока.Графа10_5100;
		СтрокаМногострочнойЧасти.П100100510011 = ДополнительнаяСтрока.Графа11_5100;
		СтрокаМногострочнойЧасти.П100100510012 = ДополнительнаяСтрока.Графа12_5100;
		СтрокаМногострочнойЧасти.П100100510013 = ДополнительнаяСтрока.Графа13_5100;
		СтрокаМногострочнойЧасти.П100100510014 = ДополнительнаяСтрока.Графа14_5100;
		
		СтрокаМногострочнойЧасти.П100100511004 = ДополнительнаяСтрока.Графа04_5110;
		СтрокаМногострочнойЧасти.П100100511005 = ДополнительнаяСтрока.Графа05_5110;
		СтрокаМногострочнойЧасти.П100100511006 = ДополнительнаяСтрока.Графа06_5110;
		СтрокаМногострочнойЧасти.П100100511007 = ДополнительнаяСтрока.Графа07_5110;
		СтрокаМногострочнойЧасти.П100100511008 = ДополнительнаяСтрока.Графа08_5110;
		СтрокаМногострочнойЧасти.П100100511009 = ДополнительнаяСтрока.Графа09_5110;
		СтрокаМногострочнойЧасти.П100100511010 = ДополнительнаяСтрока.Графа10_5110;
		СтрокаМногострочнойЧасти.П100100511011 = ДополнительнаяСтрока.Графа11_5110;
		СтрокаМногострочнойЧасти.П100100511012 = ДополнительнаяСтрока.Графа12_5110;
		СтрокаМногострочнойЧасти.П100100511013 = ДополнительнаяСтрока.Графа13_5110;
		СтрокаМногострочнойЧасти.П100100511014 = ДополнительнаяСтрока.Графа14_5110;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения1Строка5130_Сервер(БухИтогиРасчет, СчетаНМА)
	
	БухИтогиРасчет = Обработки.БухгалтерскиеИтоги.Создать();
	
	СчетаНМА = Новый Массив();
КонецФункции


&НаСервере
Функция ЗаполнитьАвтоПояснения1Строка5130_Сервер_1(БухИтогиРасчет, ИтогиРасчет, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, СчетаНМА, ВыборкаНМА, КоличествоНМАСПолностьюПогашеннойСтоимостью)
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, Субконто1", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , СчетаНМА, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = БухИтогиРасчет.ПолучитьОстаткиИОбороты();
	ВыборкаНМА = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	КоличествоНМАСПолностьюПогашеннойСтоимостью = 0;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1Строка5130(Графа, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем БухИтогиРасчет, СчетаНМА, ВыборкаНМА, КоличествоНМАСПолностьюПогашеннойСтоимостью;
	
	ЗаполнитьАвтоПояснения1Строка5130_Сервер(БухИтогиРасчет, СчетаНМА);
	СчетаНМА.Добавить(Счет("04.01"));
	СчетаНМА.Добавить(Счет("05"));
	
	ИтогиРасчет = "НачальныйОстатокДт, НачальныйОстатокКт,
	              |КонечныйОстатокДт, КонечныйОстатокКт";
	ЗаполнитьАвтоПояснения1Строка5130_Сервер_1(БухИтогиРасчет, ИтогиРасчет, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, СчетаНМА, ВыборкаНМА, КоличествоНМАСПолностьюПогашеннойСтоимостью);
	
	Пока ВыборкаНМА.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаНМА.Субконто1) Тогда
			Продолжить;
		КонецЕсли;
		
		// пропускаем группы как элемент иерархии результатов запроса
		Если ВыборкаНМА.Субконто1.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СКД_04_01_НМА = БухИтогиРасчет.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счет("04.01"), ВыборкаНМА.Субконто1);
		СКК_05_НМА    = БухИтогиРасчет.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счет("05"), ВыборкаНМА.Субконто1);
		
		Если СКД_04_01_НМА - СКК_05_НМА <= 0 Тогда
			КоличествоНМАСПолностьюПогашеннойСтоимостью = КоличествоНМАСПолностьюПогашеннойСтоимостью + 1;
			
			СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
			СтрокаТаблицыДополнительныхСтрок.ВидНМА  = ВыборкаНМА.Субконто1.ВидНМА;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа] = 1;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П0001005130" + Графа, КоличествоНМАСПолностьюПогашеннойСтоимостью);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения1Строка5130ВТомЧисле(ТаблицаЗначенийДопСтрок)
	
	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = "ДопСтрока5130";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();
	
	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100513001 = ДополнительнаяСтрока.ВидНМА;
		СтрокаМногострочнойЧасти.П100100513003 = ДополнительнаяСтрока.Графа03;
		СтрокаМногострочнойЧасти.П100100513004 = ДополнительнаяСтрока.Графа04;
		СтрокаМногострочнойЧасти.П100100513005 = ДополнительнаяСтрока.Графа05;
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5140и5150_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходыНаНИОКР.Организация,
	               |	РасходыНаНИОКР.НИОКР,
	               |	СУММА(РасходыНаНИОКР.СНД_04_02) КАК СНД_04_02,
	               |	СУММА(РасходыНаНИОКР.КО_04_02) КАК КО_04_02,
	               |	СУММА(РасходыНаНИОКР.СКД_04_02) КАК СКД_04_02,
	               |	СУММА(РасходыНаНИОКР.ОБ_04_02__08_08) КАК ОБ_04_02__08_08,
	               |	СУММА(РасходыНаНИОКР.ОБ_91_02__04_02) КАК ОБ_91_02__04_02
	               |ПОМЕСТИТЬ ВТ_РасходыНаНИОКР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
	               |		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НИОКР,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД_04_02,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО_04_02,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД_04_02,
	               |		0 КАК ОБ_04_02__08_08,
	               |		0 КАК ОБ_91_02__04_02
	               |	ИЗ
	               |		РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_04_02, &СубконтоНМА, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.Организация,
	               |		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_02, &СубконтоНМА, СчетКт = &Счет_08_08, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.Организация,
	               |		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот
	               |	ИЗ
	               |		РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_91_02, , СчетКт = &Счет_04_02, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК РасходыНаНИОКР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходыНаНИОКР.НИОКР,
	               |	РасходыНаНИОКР.Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РасходыНаНИОКР.НИОКР КАК РасходыНаНИОКР,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СНД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы04,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СНД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0) - ВТ_РасходыНаНИОКР.СНД_04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы05,
	               |	ВТ_РасходыНаНИОКР.ОБ_04_02__08_08 КАК ЗначениеГрафы06,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы07,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0) - ВТ_РасходыНаНИОКР.ОБ_91_02__04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы08,
	               |	ВТ_РасходыНаНИОКР.КО_04_02 - ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0) - ВТ_РасходыНаНИОКР.ОБ_91_02__04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы09,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СКД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы10,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СКД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость, 0) - ВТ_РасходыНаНИОКР.СКД_04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы11,
	               |	ВТ_РасходыНаНИОКР.СНД_04_02 КАК СНД_04_02,
	               |	ВТ_РасходыНаНИОКР.ОБ_04_02__08_08 КАК ОБ_04_02__08_08,
	               |	ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 КАК ОБ_91_02__04_02,
	               |	ВТ_РасходыНаНИОКР.КО_04_02 КАК КО_04_02,
	               |	ВТ_РасходыНаНИОКР.СКД_04_02 КАК СКД_04_02
	               |ИЗ
	               |	ВТ_РасходыНаНИОКР КАК ВТ_РасходыНаНИОКР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
	               |		ПО ВТ_РасходыНаНИОКР.НИОКР = ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив
	               |			И ВТ_РасходыНаНИОКР.Организация = ПервоначальныеСведенияНМАБухгалтерскийУчет.Организация
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07),
	               |	СУММА(ЗначениеГрафы08),
	               |	СУММА(ЗначениеГрафы09),
	               |	СУММА(ЗначениеГрафы10),
	               |	СУММА(ЗначениеГрафы11),
	               |	СУММА(СНД_04_02),
	               |	СУММА(ОБ_04_02__08_08),
	               |	СУММА(ОБ_91_02__04_02),
	               |	СУММА(КО_04_02),
	               |	СУММА(СКД_04_02)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5140и5150_Сервер_1(Запрос, НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИтогов.Следующий() Тогда
		
		Графа = "04";
		ЗначениеГрафы04 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы04;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым на начало периода имеется остаток на счете " + мСчет["04.02"].Код;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на начало года""", "+", НаименованиеСоставляющей, ЗначениеГрафы04, мСчет["04.02"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "05";
		СНД_04_02 = ВыборкаИтогов.СНД_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Часть стоимости, списанной на расходы на начало года""", "+", НаименованиеСоставляющей, ЗначениеГрафы04, мСчет["04.02"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", СНД_04_02, мСчет["04.02"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "06";
		ОБ_04_02__08_08 = ВыборкаИтогов.ОБ_04_02__08_08;
		ЗначениеПоказателя = ОБ_04_02__08_08;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Изменения за период - поступило""", "+", "!ОБ", ОБ_04_02__08_08, мСчет["04.02"], мСчет["08.08"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "07";
		ЗначениеГрафы07 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы07;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым в течении периода имеются проводки с дебета счета " + мСчет["91.02"].Код + " в кредит счета " + мСчет["04.02"].Код;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - первоначальная стоимость""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "08";
		ОБ_91_02__04_02 = ВыборкаИтогов.ОБ_91_02__04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - часть стоимости, списанной на расходы""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", ОБ_91_02__04_02, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "09";
		КО_04_02 = ВыборкаИтогов.КО_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Изменения за период - часть стоимости, списанная на расходы за период""", "+", "!КО", КО_04_02, мСчет["04.02"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", ОБ_91_02__04_02, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "10";
		ЗначениеГрафы10 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы10;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым на конец периода имеется остаток на счете " + мСчет["04.02"].Код;
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Графа = "11";
		СКД_04_02 = ВыборкаИтогов.СКД_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя);  // вычитаемый
		
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, мСчет["91.02"], мСчет["04.02"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКД", СКД_04_02, мСчет["04.02"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");
		
		Выборка = ВыборкаИтогов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
			СтрокаТаблицыДополнительныхСтрок.РасходыНаНИОКР = Выборка.РасходыНаНИОКР;
			
			Графа = "04";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ЗначениеПоказателя;
			
			Графа = "05";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "06";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ЗначениеПоказателя;
			
			Графа = "07";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "08";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ЗначениеПоказателя;
			
			Графа = "09";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "10";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ЗначениеПоказателя;
			
			Графа = "11";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ЗначениеПоказателя; // вычитаемый
			
		КонецЦикла;
		
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1Строки5140и5150(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Запрос;

	ЗаполнитьАвтоПояснения1Строки5140и5150_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_04_02",   Счет("04.02"));
	Запрос.УстановитьПараметр("Счет_08_08",   Счет("08.08"));
	Запрос.УстановитьПараметр("Счет_91_02",   Счет("91.02"));
	ЗаполнитьАвтоПояснения1Строки5140и5150_Сервер_1(Запрос, НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения1Строки5140и5150ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5140";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100514001 = ДополнительнаяСтрока.РасходыНаНИОКР;
		
		СтрокаМногострочнойЧасти.П100100514004 = ДополнительнаяСтрока.Графа04_5140;
		СтрокаМногострочнойЧасти.П100100514005 = ДополнительнаяСтрока.Графа05_5140;
		СтрокаМногострочнойЧасти.П100100514006 = ДополнительнаяСтрока.Графа06_5140;
		СтрокаМногострочнойЧасти.П100100514007 = ДополнительнаяСтрока.Графа07_5140;
		СтрокаМногострочнойЧасти.П100100514008 = ДополнительнаяСтрока.Графа08_5140;
		СтрокаМногострочнойЧасти.П100100514009 = ДополнительнаяСтрока.Графа09_5140;
		СтрокаМногострочнойЧасти.П100100514010 = ДополнительнаяСтрока.Графа10_5140;
		СтрокаМногострочнойЧасти.П100100514011 = ДополнительнаяСтрока.Графа11_5140;
		
		СтрокаМногострочнойЧасти.П100100515004 = ДополнительнаяСтрока.Графа04_5150;
		СтрокаМногострочнойЧасти.П100100515005 = ДополнительнаяСтрока.Графа05_5150;
		СтрокаМногострочнойЧасти.П100100515006 = ДополнительнаяСтрока.Графа06_5150;
		СтрокаМногострочнойЧасти.П100100515007 = ДополнительнаяСтрока.Графа07_5150;
		СтрокаМногострочнойЧасти.П100100515008 = ДополнительнаяСтрока.Графа08_5150;
		СтрокаМногострочнойЧасти.П100100515009 = ДополнительнаяСтрока.Графа09_5150;
		СтрокаМногострочнойЧасти.П100100515010 = ДополнительнаяСтрока.Графа10_5150;
		СтрокаМногострочнойЧасти.П100100515011 = ДополнительнаяСтрока.Графа11_5150;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5160и5170_Сервер(НаименованиеСтроки, НомерСтроки, ПараметрыРасшифровки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету08_05, Итоги, мОргРасшифровка, Графа, НаименованиеГрафы, ИмяОбластиПоказателя, НаименованиеРасшифровки)
	
	НаименованиеСтроки = "Строка " + НомерСтроки + " ""Затраты по незаконченным исследованиям и разработкам – всего""";
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ИмяОтчета", "Пояснения1");
	ПараметрыРасшифровки.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыРасшифровки.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	// Объекты обработки БухгалтерскиеИтоги.
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиПоСчету08 = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиПоСчету08_05 = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	
	Графа = "04";
	НаименованиеГрафы = "На начало года";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = НаименованиеСтроки + ", графа """ + НаименованиеГрафы + """";
КонецФункции


&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5160и5170_Сервер_1(БухИтогиПоСчету08, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, БухИтогиПоСчету08_05, ВыборкаПоСубконто)
	БухИтогиПоСчету08.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("08"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	БухИтогиПоСчету08_05.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("08.05"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ОстаткиИОбороты = БухИтогиПоСчету08.ПолучитьОстаткиИОбороты();
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1Строки5160и5170(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем НаименованиеСтроки, ПараметрыРасшифровки, БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету08_05, Итоги, мОргРасшифровка, Графа, НаименованиеГрафы, ИмяОбластиПоказателя, НаименованиеРасшифровки, ВыборкаПоСубконто;
	
	ЗаполнитьАвтоПояснения1Строки5160и5170_Сервер(НаименованиеСтроки, НомерСтроки, ПараметрыРасшифровки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету08_05, Итоги, мОргРасшифровка, Графа, НаименованиеГрафы, ИмяОбластиПоказателя, НаименованиеРасшифровки);
	
	СНД_08_08 = СНД("08.08", БухИтоги);
	СНД_08_11 = СНД("08.11", БухИтоги);
	ПоказательСтроки = СНД_08_08 + СНД_08_11;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ПоказательСтроки);
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СНД", СНД_08_08, Счет("08.08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_11, Счет("08.11"));
	
	
	Графа = "05";
	НаименованиеГрафы = "Изменения за период - затраты за период";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = НаименованиеСтроки + ", графа """ + НаименованиеГрафы + """";
	
	ДО_08_08 = ДО("08.08", БухИтоги);
	ДО_08_11 = ДО("08.11", БухИтоги);
	ПоказательСтроки = ДО_08_08 + ДО_08_11;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ПоказательСтроки);
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!ДО", ДО_08_08, Счет("08.08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!ДО", ДО_08_11, Счет("08.11"));
	
	
	Графа = "06";
	НаименованиеГрафы = "Изменения за период - списано затрат как не давших положительного результата";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = НаименованиеСтроки + ", графа """ + НаименованиеГрафы + """";
	
	ОБ_91_02__08_08 = ОБ("91.02", "08.08", БухИтоги);
	ОБ_91_02__08_11 = ОБ("91.02", "08.11", БухИтоги);
	ПоказательСтроки = ОБ_91_02__08_08 + ОБ_91_02__08_11;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ПоказательСтроки); // вычитаемый
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!ОБ", ОБ_91_02__08_08, Счет("91.02"), Счет("08.08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!ОБ", ОБ_91_02__08_11, Счет("91.02"), Счет("08.11"));
	
	
	Графа = "07";
	НаименованиеГрафы = "Изменения за период - принято к учету в качестве нематериальных активов или НИОКР";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = НаименованиеСтроки + ", графа """ + НаименованиеГрафы + """";
	
	ОБ_04_02__08_08 = ОБ("04.02", "08.08", БухИтоги);
	ОБ_04_02__08_05 = ОБ("04.02", "08.05", БухИтоги);
	ОБ_04_02__08_11 = ОБ("04.02", "08.11", БухИтоги);
	ПоказательСтроки = ОБ_04_02__08_08 + ОБ_04_02__08_05 + ОБ_04_02__08_11;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ПоказательСтроки); // вычитаемый
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!ОБ", ОБ_04_02__08_08, Счет("04.02"), Счет("08.08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!ОБ", ОБ_04_02__08_05, Счет("04.02"), Счет("08.05"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!ОБ", ОБ_04_02__08_11, Счет("04.02"), Счет("08.11"));
	
	
	Графа = "08";
	НаименованиеГрафы = "На конец периода";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = НаименованиеСтроки + ", графа """ + НаименованиеГрафы + """";
	
	СКД_08_08 = СКД("08.08", БухИтоги);
	СКД_08_11 = СКД("08.11", БухИтоги);
	ПоказательСтроки = СКД_08_08 + СКД_08_11;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ПоказательСтроки);
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СКД", СКД_08_08, Счет("08.08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_11, Счет("08.11"));
	
	
	// Заполнение таблицы данными для дополнительных строк.
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	ЗаполнитьАвтоПояснения1Строки5160и5170_Сервер_1(БухИтогиПоСчету08, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, БухИтогиПоСчету08_05, ВыборкаПоСубконто);
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСубконто.Субконто1) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем группы как элемент иерархии результатов запроса.
		Если ВыборкаПоСубконто.Субконто1.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ОбъектНИОКР = ВыборкаПоСубконто.Субконто1;
		
		Графа = "04";
		СНД_08_08_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет, Субконто1", Счет("08.08"), ВыборкаПоСубконто.Субконто1);
		СНД_08_11_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет, Субконто1", Счет("08.11"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = СНД_08_08_НИОКР + СНД_08_11_НИОКР;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
		Графа = "05";
		ДО_08_08_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("08.08"), ВыборкаПоСубконто.Субконто1);
		ДО_08_11_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("08.11"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = ДО_08_08_НИОКР + ДО_08_11_НИОКР;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
		Графа = "06";
		ОБ_91_02__08_08_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.08"), ВыборкаПоСубконто.Субконто1, Счет("91.02"));
		ОБ_91_02__08_11_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.11"), ВыборкаПоСубконто.Субконто1, Счет("91.02"));
		ПоказательСтроки = ОБ_91_02__08_08_НИОКР + ОБ_91_02__08_11_НИОКР;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ПоказательСтроки;
		
		Графа = "07";
		ОБ_04_02__08_08_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.08"), ВыборкаПоСубконто.Субконто1, Счет("04.02"));
		ОБ_04_02__08_05_НИОКР = БухИтогиПоСчету08_05.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.05"), ВыборкаПоСубконто.Субконто1, Счет("04.02"));
		ОБ_04_02__08_11_НИОКР = БухИтогиПоСчету08.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.11"), ВыборкаПоСубконто.Субконто1, Счет("04.02"));
		ПоказательСтроки = ОБ_04_02__08_08_НИОКР + ОБ_04_02__08_05_НИОКР + ОБ_04_02__08_11_НИОКР;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ПоказательСтроки;
		
		Графа = "08";
		СКД_08_08_НИОКР =  БухИтогиПоСчету08.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счет("08.08"), ВыборкаПоСубконто.Субконто1);
		СКД_08_11_НИОКР =  БухИтогиПоСчету08.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счет("08.11"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = СКД_08_08_НИОКР + СКД_08_11_НИОКР;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения1Строки5160и5170ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5160";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100516001 = ДополнительнаяСтрока.ОбъектНИОКР;
		
		СтрокаМногострочнойЧасти.П100100516004 = ДополнительнаяСтрока.Графа04_5160;
		СтрокаМногострочнойЧасти.П100100516005 = ДополнительнаяСтрока.Графа05_5160;
		СтрокаМногострочнойЧасти.П100100516006 = ДополнительнаяСтрока.Графа06_5160;
		СтрокаМногострочнойЧасти.П100100516007 = ДополнительнаяСтрока.Графа07_5160;
		СтрокаМногострочнойЧасти.П100100516008 = ДополнительнаяСтрока.Графа08_5160;
		
		СтрокаМногострочнойЧасти.П100100517004 = ДополнительнаяСтрока.Графа04_5170;
		СтрокаМногострочнойЧасти.П100100517005 = ДополнительнаяСтрока.Графа05_5170;
		СтрокаМногострочнойЧасти.П100100517006 = ДополнительнаяСтрока.Графа06_5170;
		СтрокаМногострочнойЧасти.П100100517007 = ДополнительнаяСтрока.Графа07_5170;
		СтрокаМногострочнойЧасти.П100100517008 = ДополнительнаяСтрока.Графа08_5170;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5180и5190_Сервер(БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету04, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка)

	// Объекты обработки БухгалтерскиеИтоги.
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиПоСчету08 = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиПоСчету04 = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиРасчет = Обработки.БухгалтерскиеИтоги.Создать();

	// Бухгалтерские итоги по счетам, без аналитики.
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьАвтоПояснения1Строки5180и5190_Сервер_1(БухИтогиПоСчету08, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, БухИтогиПоСчету04, ВыборкаПоСубконто)
	БухИтогиПоСчету08.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("08"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	БухИтогиПоСчету04.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("04"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);

	ОстаткиИОбороты = БухИтогиПоСчету08.ПолучитьОстаткиИОбороты();
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения1Строки5180и5190(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету04, Итоги, мОргРасшифровка, ВыборкаПоСубконто;

	// Объекты обработки БухгалтерскиеИтоги.
	ЗаполнитьАвтоПояснения1Строки5180и5190_Сервер(БухИтоги, БухИтогиПоСчету08, БухИтогиПоСчету04, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка);

	// Cтрока 5180/5190 графа 04.
	СНД_08_05 = СНД("08.05", БухИтоги);
	Графа = "04";
	ПоказательСтроки = СНД_08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ПоказательСтроки);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""незаконченные операции по приобретению нематериальных активов – всего"", графа ""На начало года""", "+", "!СНД", СНД_08_05, мСчет["08.05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	// Cтрока 5180/5190 графа 05.
	ДО_08_05 = ДО("08.05", БухИтоги);
	Графа = "05";
	ПоказательСтроки = ДО_08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ПоказательСтроки);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""незаконченные операции по приобретению нематериальных активов – всего"", графа ""Изменения за период - затраты за период""", "+", "!ДО", ДО_08_05, мСчет["08.05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	// Cтрока 5180/5190 графа 06.
	ОБ_91_02__08_05 = ОБ("91.02", "08.05", БухИтоги);
	Графа = "06";
	ПоказательСтроки = ОБ_91_02__08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ПоказательСтроки); // показатель вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""незаконченные операции по приобретению нематериальных активов – всего"", графа ""Изменения за период - списано затрат как не давших положительного результата""", "+", "!ОБ", ОБ_91_02__08_05, мСчет["91.02"], мСчет["08.05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	// Cтрока 5180/5190 графа 07.
	ОБ_04_01__08_05 = ОБ("04.01", "08.05", БухИтоги);
	Графа = "07";
	ПоказательСтроки = ОБ_04_01__08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ПоказательСтроки); // показатель вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""незаконченные операции по приобретению нематериальных активов – всего"", графа ""Изменения за период - принято к учету в качестве нематериальных активов или НИОКР""", "+", "!ОБ", ОБ_04_01__08_05, мСчет["04.01"], мСчет["08.05"], ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

	// Cтрока 5180/5190 графа 08.
	СКД_08_05 = СКД("08.05", БухИтоги);
	Графа = "08";
	ПоказательСтроки = СКД_08_05;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ПоказательСтроки);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " ""незаконченные операции по приобретению нематериальных активов – всего"", графа ""На конец периода""", "+", "!СКД", СКД_08_05, мСчет["08.05"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения1");

    // Заполнение таблицы данными для дополнительных строк.
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	ЗаполнитьАвтоПояснения1Строки5180и5190_Сервер_1(БухИтогиПоСчету08, Итоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, БухИтогиПоСчету04, ВыборкаПоСубконто);

	Пока ВыборкаПоСубконто.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСубконто.Субконто1) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем группы как элемент иерархии результатов запроса.
		Если ВыборкаПоСубконто.Субконто1.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ОбъектНМА = ВыборкаПоСубконто.Субконто1;
		
		Графа = "04";
		СНД_08_05_НМА = БухИтогиПоСчету08.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет, Субконто1", Счет("08.05"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = СНД_08_05_НМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
		Графа = "05";
		ДО_08_05_НМА = БухИтогиПоСчету08.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счет("08.05"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = ДО_08_05_НМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
		Графа = "06";
		ОБ_91_02__08_05_НМА = БухИтогиПоСчету08.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("08.05"), ВыборкаПоСубконто.Субконто1, Счет("91.02"));
		ПоказательСтроки = ОБ_91_02__08_05_НМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ПоказательСтроки;
		
		Графа = "07";
		ОБ_04_01__08_05_НМА = БухИтогиПоСчету04.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("04.01"), ВыборкаПоСубконто.Субконто1, Счет("08.05"));
		ПоказательСтроки = ОБ_04_01__08_05_НМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = -ПоказательСтроки;
		
		Графа = "08";
		СКД_08_05_НМА =  БухИтогиПоСчету08.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счет("08.05"), ВыборкаПоСубконто.Субконто1);
		ПоказательСтроки = СКД_08_05_НМА;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
		
	КонецЦикла;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения1Строки5180и5190ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5180";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100518001 = ДополнительнаяСтрока.ОбъектНМА;
		
		СтрокаМногострочнойЧасти.П100100518004 = ДополнительнаяСтрока.Графа04_5180;
		СтрокаМногострочнойЧасти.П100100518005 = ДополнительнаяСтрока.Графа05_5180;
		СтрокаМногострочнойЧасти.П100100518006 = ДополнительнаяСтрока.Графа06_5180;
		СтрокаМногострочнойЧасти.П100100518007 = ДополнительнаяСтрока.Графа07_5180;
		СтрокаМногострочнойЧасти.П100100518008 = ДополнительнаяСтрока.Графа08_5180;
		
		СтрокаМногострочнойЧасти.П100100519004 = ДополнительнаяСтрока.Графа04_5190;
		СтрокаМногострочнойЧасти.П100100519005 = ДополнительнаяСтрока.Графа05_5190;
		СтрокаМногострочнойЧасти.П100100519006 = ДополнительнаяСтрока.Графа06_5190;
		СтрокаМногострочнойЧасти.П100100519007 = ДополнительнаяСтрока.Графа07_5190;
		СтрокаМногострочнойЧасти.П100100519008 = ДополнительнаяСтрока.Графа08_5190;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	ДатаНачалаГодаПредшествующегоПредыдущему = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	ТаблицаЗначенийДопСтрок5200и5210 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5200");
	ЗаполнитьАвтоПояснения2Строки5200и5210("5200", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5200и5210);
	ЗаполнитьАвтоПояснения2Строки5200и5210("5210", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5200и5210);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5200и5210);
	ЗаполнитьАвтоПояснения2Строки5200и5210ВТомЧисле(ТаблицаЗначенийДопСтрок5200и5210);
	
	ТаблицаЗначенийДопСтрок5220и5230 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5220");
	ЗаполнитьАвтоПояснения2Строки5220и5230("5220", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5220и5230);
	ЗаполнитьАвтоПояснения2Строки5220и5230("5230", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5220и5230);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5220и5230);
	ЗаполнитьАвтоПояснения2Строки5220и5230ВТомЧисле(ТаблицаЗначенийДопСтрок5220и5230);
	
	ТаблицаЗначенийДопСтрок5240и5250 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5240");
	ЗаполнитьАвтоПояснения2Строки5240и5250("5240", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5240и5250);
	ЗаполнитьАвтоПояснения2Строки5240и5250("5250", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5240и5250);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5240и5250);
	ЗаполнитьАвтоПояснения2Строки5240и5250ВТомЧисле(ТаблицаЗначенийДопСтрок5240и5250);
	
	ТаблицаЗначенийДопСтрок5260 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5260");
	ЗаполнитьАвтоПояснения2Строка5260("03", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5260);
	ЗаполнитьАвтоПояснения2Строка5260("04", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5260);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5260);
	ЗаполнитьАвтоПояснения2Строка5260ВТомЧисле(ТаблицаЗначенийДопСтрок5260);
	
	ЗаголовокГрафыНаОтчетнуюДату = "На " + Формат(ДатаКонцаПериодаОтчета, "ДЛФ=DD");
	ЗаголовокГрафыНаКонецПредыдущегоГода = "На " + Формат(ДатаКонцаПредыдущегоГода, "ДЛФ=DD");
	ЗаголовокГрафыНаКонецГодаПредшествующегоПредыдущему = "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДЛФ=DD");
	
	ЗаполнитьАвтоПояснения2Строки528х("03", ЗаголовокГрафыНаОтчетнуюДату, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	ЗаполнитьАвтоПояснения2Строки528х("04", ЗаголовокГрафыНаКонецПредыдущегоГода, ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода);
	ЗаполнитьАвтоПояснения2Строки528х("05", ЗаголовокГрафыНаКонецГодаПредшествующегоПредыдущему, ДатаНачалаГодаПредшествующегоПредыдущему, ДатаКонцаГодаПредшествующегоПредыдущему);
	
КонецПроцедуры // ЗаполнитьАвтоПояснения2()

&НаСервере
Функция ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки(НомерСтроки)
	
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	ТаблицаДопСтрок = Новый ТаблицаЗначений;
	
	Если НомерСтроки = "5200" ИЛИ НомерСтроки = "5220" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ГруппаУчетаОС");
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа13_5200", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5210", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа13_5210", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
	
	//УИК
	
	Если НомерСтроки = "5301" ИЛИ НомерСтроки = "5311" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ВидФВ");
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа13_5301", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5311", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5311", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
	
	//УИК
	
	Если НомерСтроки = "5305" ИЛИ НомерСтроки = "5315" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ВидФВ");
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа13_5305", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа09_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа10_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа11_5315", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа12_5315", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
			
	Если НомерСтроки = "5240" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ОбъектУчета");
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5240", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5240", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5240", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5240", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5240", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5250", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05_5250", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06_5250", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07_5250", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа08_5250", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
		
	Если НомерСтроки = "5260" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ОсновноеСредство");
		ТаблицаДопСтрок.Колонки.Добавить("Графа03_5260", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04_5260", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
		
	Если НомерСтроки = "5700" Тогда
		ТаблицаДопСтрок.Колонки.Добавить("ОценочноеОбязательство");
		ТаблицаДопСтрок.Колонки.Добавить("Графа03", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа04", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа05", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа06", ОписаниеТиповЧисло);
		ТаблицаДопСтрок.Колонки.Добавить("Графа07", ОписаниеТиповЧисло);
		Возврат ТаблицаДопСтрок;
	КонецЕсли;
	
КонецФункции // ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки(НомерСтроки)

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок)

	СписокГрафДляГруппировки = "";
	СписокГрафДляСуммирования = "";

	Для Каждого Колонка Из ТаблицаЗначенийДопСтрок.Колонки Цикл
		
		КолонкаСуммируется = (Колонка.ТипЗначения.СодержитТип(Тип("Число")));
		
		Если КолонкаСуммируется Тогда
			СписокГрафДляСуммирования = СписокГрафДляСуммирования + ?(ПустаяСтрока(СписокГрафДляСуммирования), "", ", ") + Колонка.Имя;
		Иначе
			СписокГрафДляГруппировки = СписокГрафДляГруппировки + ?(ПустаяСтрока(СписокГрафДляГруппировки), "", ", ") + Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаЗначенийДопСтрок.Свернуть(СписокГрафДляГруппировки, СписокГрафДляСуммирования);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2Строки5200и5210(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 8 переход(а|ов) на сервер

	
	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	СНД_01_01 = СНД("01.01", БухИтоги);
	СНД_01_08 = СНД("01.08", БухИтоги);
	СКД_01_01 = СКД("01.01", БухИтоги);
	СКД_01_08 = СКД("01.08", БухИтоги);
	
	СНК_02_01 = СНК("02.01", БухИтоги);
	КО_02_01 = КО("02.01", БухИтоги);
	СКК_02_01 = СКК("02.01", БухИтоги);
	
	ОБ_01_01__08 = ОБ("01.01", "08", БухИтоги);
	ОБ_01_08__08 = ОБ("01.08", "08", БухИтоги);
	ОБ_01_09__01_01 = ОБ("01.09", "01.01", БухИтоги);
	
	ОБ_02_01__01_09 = ОБ("02.01", "01.09", БухИтоги);
	
	ОБ_01_01__83_01_1 = ОБ("01.01", "83.01.1", БухИтоги);
	ОБ_83_01_1__01_01 = ОБ("83.01.1", "01.01", БухИтоги);
	ОБ_02_01__83_01_1 = ОБ("02.01", "83.01.1", БухИтоги);
	ОБ_83_01_1__02_01 = ОБ("83.01.1", "02.01", БухИтоги);
	
	ОБ_01_01__84 = ОБ("01.01", "84", БухИтоги);
	ОБ_84__01_01 = ОБ("84", "01.01", БухИтоги);
	ОБ_02_01__84 = ОБ("02.01", "84", БухИтоги);
	ОБ_84__02_01 = ОБ("84", "02.01", БухИтоги);
	
	// Разделение оборотов в корреспонденции со счетом 91 по видам прочих доходов и расходов.
	БухИтогиРасчет = Обработки.БухгалтерскиеИтоги.Создать();
	ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРасчет = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("91"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = БухИтогиРасчет.ПолучитьОстаткиИОбороты();
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) И ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ОБ_91_02__02_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("02.01"));
				ОБ_02_01__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("02.01"));
				ОБ_01_01__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01.01"));
				ОБ_91_02__01_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01.01"));
				
				ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_91_02__02_01_ПоСубконто;
				ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_02_01__91_01_ПоСубконто;
				ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_01_01__91_01_ПоСубконто;
				ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_91_02__01_01_ПоСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеСтроки = "Основные средства (без учета доходных вложений в материальные ценности) - всего";
	
	Графа = "04";
	ЗаголовокГрафы = "На начало года - первоначальная стоимость";
	ЗначениеПоказателя = СНД_01_01 + СНД_01_08;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_01_01, Счет("01.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_01_08, Счет("01.08"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "05";
	ЗаголовокГрафы = "На начало года - накопленная амортизация";
	ЗначениеПоказателя = СНК_02_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "06";
	ЗаголовокГрафы = "Изменения за период - Поступило";
	ЗначениеПоказателя = ОБ_01_01__08 + ОБ_01_08__08;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__08, Счет("01.01"), Счет("08"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_01_08__08, Счет("01.08"), Счет("08"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "07";
	ЗаголовокГрафы = "Изменения за период - Выбыло объектов - первоначальная стоимость";
	ЗначениеПоказателя = ОБ_01_09__01_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_09__01_01, Счет("01.09"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "08";
	ЗаголовокГрафы = "Изменения за период - Выбыло объектов - накопленнная амортизация";
	ЗначениеПоказателя = ОБ_02_01__01_09;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_02_01__01_09, Счет("02.01"), Счет("01.09"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "09";
	ЗаголовокГрафы = "Изменения за период - начислено амортизации";
	Если ИспользоватьАлгоритм2011Года Тогда
		ЗначениеПоказателя = КО_02_01
		                   - ОБ_83_01_1__02_01 + ОБ_02_01__83_01_1 
		                   - ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
		                   + ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("02.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
		ЗначениеПоказателя = КО_02_01
		                   - ОБ_83_01_1__02_01 + ОБ_02_01__83_01_1
		                   + ОБ_02_01__84 - ОБ_84__02_01;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__84, Счет("02.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_84__02_01, Счет("84"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		
	КонецЕсли;
	
	Графа = "10";
	ЗаголовокГрафы = "Изменения за период - Переоценка - первоначальная стоимость";
	Если ИспользоватьАлгоритм2011Года Тогда
		ЗначениеПоказателя = ОБ_01_01__83_01_1 - ОБ_83_01_1__01_01
		                   - ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
		                   + ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__83_01_1, Счет("01.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, Счет("83.01.1"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 01.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 01.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("01.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
		ЗначениеПоказателя = ОБ_01_01__83_01_1 - ОБ_83_01_1__01_01
		                   - ОБ_84__01_01 + ОБ_01_01__84;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__83_01_1, Счет("01.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, Счет("83.01.1"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_84__01_01, Счет("84"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_01_01__84, Счет("01.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		
	КонецЕсли;
	
	Графа = "11";
	ЗаголовокГрафы = "Изменения за период - Переоценка - накопленная амортизация";
	Если ИспользоватьАлгоритм2011Года Тогда
		ЗначениеПоказателя = ОБ_83_01_1__02_01 - ОБ_02_01__83_01_1 
		                   + ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
		                   - ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("02.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
		ЗначениеПоказателя = ОБ_83_01_1__02_01 - ОБ_02_01__83_01_1
		                   - ОБ_02_01__84 + ОБ_84__02_01;
		УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__84, Счет("02.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_84__02_01, Счет("84"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
		
	КонецЕсли;
	
	Графа = "12";
	ЗаголовокГрафы = "На конец периода - первоначальная стоимость";
	ЗначениеПоказателя = СКД_01_01 + СКД_01_08;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_01_01, Счет("01.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_01_08, Счет("01.08"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "13";
	ЗаголовокГрафы = "На конец периода - накопленная амортизация";
	ЗначениеПоказателя = СКК_02_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1.ГруппаОС КАК ГруппаУчетаОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК ЗначениеГрафы04,
	               |	0 КАК ЗначениеГрафы05,
	               |	0 КАК ЗначениеГрафы06,
	               |	0 КАК ЗначениеГрафы07,
	               |	0 КАК ЗначениеГрафы08,
	               |	0 КАК ЗначениеГрафы09,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК ЗначениеГрафы12,
	               |	0 КАК ЗначениеГрафы13
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_01_01, &ВидСубконтоОС, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1.ГруппаОС,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_01_08, &ВидСубконтоОС, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1.ГруппаОС,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_02_01, &ВидСубконтоОС, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &ВидСубконтоОС, СчетКт В ИЕРАРХИИ(&Счет_08), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_08, &ВидСубконтоОС, СчетКт В ИЕРАРХИИ(&Счет_08), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_09, &ВидСубконтоОС, СчетКт = &Счет_01_01, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_02_01, &ВидСубконтоОС, СчетКт = &Счет_01_09, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1.ГруппаОС,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.Обороты(&НачПериода, &КонПериода, Период, Счет = &Счет_02_01, &ВидСубконтоОС, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07),
	               |	СУММА(ЗначениеГрафы08),
	               |	СУММА(ЗначениеГрафы09),
	               |	СУММА(ЗначениеГрафы12),
	               |	СУММА(ЗначениеГрафы13)
	               |ПО
	               |	ГруппаУчетаОС";
	
	Запрос.УстановитьПараметр("НачПериода",    ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода",    ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки)
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ГруппаУчетаОС = Выборка.ГруппаУчетаОС;
		Если НЕ ЗначениеЗаполнено(ГруппаУчетаОС) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ГруппаУчетаОС = ГруппаУчетаОС;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "04" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы04;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "05" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы05;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "06" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы06;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "07" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы07;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "08" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы08;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "09" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы09;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "12" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы12;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "13" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы13;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Запрос;
	
	ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_01_01",    Счет("01.01"));
	Запрос.УстановитьПараметр("Счет_01_08",    Счет("01.08"));
	Запрос.УстановитьПараметр("Счет_01_09",    Счет("01.09"));
	Запрос.УстановитьПараметр("Счет_02_01",    Счет("02.01"));
	Запрос.УстановитьПараметр("Счет_08",       Счет("08"));
	ЗаполнитьСведенияДопСтрок5200и5210КромеГраф10и11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');
	
	Графа = "10";
	Запрос = Новый Запрос;
	Если ИспользоватьАлгоритм2011Года Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС КАК ГруппаУчетаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &ВидСубконтоОС, СчетКт = &Счет_83_01_1, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_1, , СчетКт = &Счет_01_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_91_02,
		               |			&ВидСубконтоПрочиеДоходыИРасходы,
		               |			СчетКт = &Счет_01_01,
		               |			&ВидСубконтоОС,
		               |			Организация = &Организация
		               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_01_01,
		               |			&ВидСубконтоОС,
		               |			СчетКт = &Счет_91_01,
		               |			&ВидСубконтоПрочиеДоходыИРасходы,
		               |			Организация = &Организация
		               |				И СубконтоКт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ГруппаУчетаОС";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС КАК ГруппаУчетаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &ВидСубконтоОС, СчетКт = &Счет_83_01_1, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_1, , СчетКт = &Счет_01_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_84), , СчетКт = &Счет_01_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &ВидСубконтоОС, СчетКт В ИЕРАРХИИ (&Счет_84), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ГруппаУчетаОС";
	КонецЕсли;
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки)
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидСубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ПереоценкаВнеоборотныхАктивов", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"));
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ГруппаУчетаОС = Выборка.ГруппаУчетаОС;
		Если НЕ ЗначениеЗаполнено(ГруппаУчетаОС) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ГруппаУчетаОС = ГруппаУчетаОС;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = Выборка.ЗначениеПоказателя;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Графа, Запрос;
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_01_01",   Счет("01.01"));
	Запрос.УстановитьПараметр("Счет_83_01_1", Счет("83.01.1"));
	Запрос.УстановитьПараметр("Счет_84",      Счет("84"));
	Запрос.УстановитьПараметр("Счет_91_01",   Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02",   Счет("91.02"));
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе10_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');
	
	Графа = "11";
	Запрос = Новый Запрос;
	Если ИспользоватьАлгоритм2011Года Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС КАК ГруппаУчетаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_1, , СчетКт = &Счет_02_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_02_01, &ВидСубконтоОС, СчетКт = &Счет_83_01_1, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_91_02,
		               |			&ВидСубконтоПрочиеДоходыИРасходы,
		               |			СчетКт = &Счет_02_01,
		               |			&ВидСубконтоОС,
		               |			Организация = &Организация
		               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
		               |			&НачПериода,
		               |			&КонПериода,
		               |			Период,
		               |			СчетДт = &Счет_02_01,
		               |			&ВидСубконтоОС,
		               |			СчетКт = &Счет_91_01,
		               |			&ВидСубконтоПрочиеДоходыИРасходы,
		               |			Организация = &Организация
		               |				И СубконтоКт1.ВидПрочихДоходовИРасходов = &ПереоценкаВнеоборотныхАктивов) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ГруппаУчетаОС";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС КАК ГруппаУчетаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_83_01_1, , СчетКт = &Счет_02_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_02_01, &ВидСубконтоОС, СчетКт = &Счет_83_01_1, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоДт1.ГруппаОС,
		               |	-ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_02_01, &ВидСубконтоОС, СчетКт В ИЕРАРХИИ (&Счет_84), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ГруппаОС,
		               |	ХозрасчетныйОборотыДтКт.СуммаОборот
		               |ИЗ
		               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_84), , СчетКт = &Счет_02_01, &ВидСубконтоОС, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		               |ИТОГИ
		               |	СУММА(ЗначениеПоказателя)
		               |ПО
		               |	ГруппаУчетаОС";
	КонецЕсли;
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки)
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидСубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ПереоценкаВнеоборотныхАктивов", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"));
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ГруппаУчетаОС = Выборка.ГруппаУчетаОС;
		Если НЕ ЗначениеЗаполнено(ГруппаУчетаОС) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ГруппаУчетаОС = ГруппаУчетаОС;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = Выборка.ЗначениеПоказателя;
		// Это же значение вычитается из графы 09.
		СтрокаТаблицыДополнительныхСтрок["Графа" + "09" + "_" + НомерСтроки] = -Выборка.ЗначениеПоказателя;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Графа, Запрос;
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11_Сервер(ДатаКонцаПериодаОтчета, Графа, Запрос, ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_02_01",   Счет("02.01"));
	Запрос.УстановитьПараметр("Счет_83_01_1", Счет("83.01.1"));
	Запрос.УстановитьПараметр("Счет_84",      Счет("84"));
	Запрос.УстановитьПараметр("Счет_91_01",   Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02",   Счет("91.02"));
	ЗаполнитьСведенияДопСтрок5200и5210ПоГрафе11_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, Графа, НомерСтроки);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения2Строки5200и5210ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5200";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100520001 = ДополнительнаяСтрока.ГруппаУчетаОС;
		
		СтрокаМногострочнойЧасти.П100100520004 =  ДополнительнаяСтрока.Графа04_5200;
		СтрокаМногострочнойЧасти.П100100520005 = -ДополнительнаяСтрока.Графа05_5200;
		СтрокаМногострочнойЧасти.П100100520006 =  ДополнительнаяСтрока.Графа06_5200;
		СтрокаМногострочнойЧасти.П100100520007 = -ДополнительнаяСтрока.Графа07_5200;
		СтрокаМногострочнойЧасти.П100100520008 =  ДополнительнаяСтрока.Графа08_5200;
		СтрокаМногострочнойЧасти.П100100520009 = -ДополнительнаяСтрока.Графа09_5200;
		СтрокаМногострочнойЧасти.П100100520010 =  ДополнительнаяСтрока.Графа10_5200;
		СтрокаМногострочнойЧасти.П100100520011 =  ДополнительнаяСтрока.Графа11_5200;
		СтрокаМногострочнойЧасти.П100100520012 =  ДополнительнаяСтрока.Графа12_5200;
		СтрокаМногострочнойЧасти.П100100520013 = -ДополнительнаяСтрока.Графа13_5200;
		
		СтрокаМногострочнойЧасти.П100100521004 =  ДополнительнаяСтрока.Графа04_5210;
		СтрокаМногострочнойЧасти.П100100521005 = -ДополнительнаяСтрока.Графа05_5210;
		СтрокаМногострочнойЧасти.П100100521006 =  ДополнительнаяСтрока.Графа06_5210;
		СтрокаМногострочнойЧасти.П100100521007 = -ДополнительнаяСтрока.Графа07_5210;
		СтрокаМногострочнойЧасти.П100100521008 =  ДополнительнаяСтрока.Графа08_5210;
		СтрокаМногострочнойЧасти.П100100521009 = -ДополнительнаяСтрока.Графа09_5210;
		СтрокаМногострочнойЧасти.П100100521010 =  ДополнительнаяСтрока.Графа10_5210;
		СтрокаМногострочнойЧасти.П100100521011 =  ДополнительнаяСтрока.Графа11_5210;
		СтрокаМногострочнойЧасти.П100100521012 =  ДополнительнаяСтрока.Графа12_5210;
		СтрокаМногострочнойЧасти.П100100521013 = -ДополнительнаяСтрока.Графа13_5210;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения2Строки5220и5230_Сервер(ИспользоватьАлгоритм2011Года, ДатаКонцаПериодаОтчета, БухИтоги, ДатаНачалаПериодаОтчета, мОргРасшифровка)
	
	ИспользоватьАлгоритм2011Года = (ДатаКонцаПериодаОтчета >= '20110101');
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьАвтоПояснения2Строки5220и5230_Сервер_1(БухИтогиРасчет, ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, ВыборкаПоСубконто)
	
	//ОБ_01_01__83_01_1 = ОБ("01.01", "83.01.1", БухИтоги);
	//ОБ_83_01_1__01_01 = ОБ("83.01.1", "01.01", БухИтоги);
	//ОБ_02_01__83_01_1 = ОБ("02.01", "83.01.1", БухИтоги);
	//ОБ_83_01_1__02_01 = ОБ("83.01.1", "02.01", БухИтоги);
	
	//ОБ_01_01__84 = ОБ("01.01", "84", БухИтоги);
	//ОБ_84__01_01 = ОБ("84", "01.01", БухИтоги);
	//ОБ_02_01__84 = ОБ("02.01", "84", БухИтоги);
	//ОБ_84__02_01 = ОБ("84", "02.01", БухИтоги);
	
	// Разделение оборотов в корреспонденции со счетом 91 по видам прочих доходов и расходов.
	БухИтогиРасчет = Обработки.БухгалтерскиеИтоги.Создать();
	ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = 0;
	
	ИтогиРасчет = "ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	БухИтогиРасчет.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", ИтогиРасчет, "Сумма", "Счет, Субконто1, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , Счет("91"), ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	ОстаткиИОбороты = БухИтогиРасчет.ПолучитьОстаткиИОбороты();
	
	ВыборкаПоСубконто = ОстаткиИОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2Строки5220и5230(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем ИспользоватьАлгоритм2011Года, БухИтоги, мОргРасшифровка, БухИтогиРасчет, ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ВыборкаПоСубконто;
	
	ЗаполнитьАвтоПояснения2Строки5220и5230_Сервер(ИспользоватьАлгоритм2011Года, ДатаКонцаПериодаОтчета, БухИтоги, ДатаНачалаПериодаОтчета, мОргРасшифровка);
	
	СНД_03_01 = СНД("03.01", БухИтоги);
	СНД_03_02 = СНД("03.02", БухИтоги);
	СНД_03_03 = СНД("03.03", БухИтоги);
	СНД_03_04 = СНД("03.04", БухИтоги);
	СКД_03_01 = СКД("03.01", БухИтоги);
	СКД_03_02 = СКД("03.02", БухИтоги);
	СКД_03_03 = СКД("03.03", БухИтоги);
	СКД_03_04 = СКД("03.04", БухИтоги);
	
	СНК_02_02 = СНК("02.02", БухИтоги);
	СКК_02_02 = СКК("02.02", БухИтоги);
	
	//КО_02_01 = КО("02.01", БухИтоги);
	
	ОБ_03__08 = ОБ("03", "08", БухИтоги);
	ОБ_03_09__03_01 = ОБ("03.09", "03.01", БухИтоги);
	ОБ_03_09__03_02 = ОБ("03.09", "03.02", БухИтоги);
	ОБ_03_09__03_03 = ОБ("03.09", "03.03", БухИтоги);
	ОБ_03_09__03_04 = ОБ("03.09", "03.04", БухИтоги);
	
	ОБ_02_02__03_09 = ОБ("02.02", "03.09", БухИтоги);
	
	//ОБ_01_01__83_01_1 = ОБ("01.01", "83.01.1", БухИтоги);
	//ОБ_83_01_1__01_01 = ОБ("83.01.1", "01.01", БухИтоги);
	//ОБ_02_01__83_01_1 = ОБ("02.01", "83.01.1", БухИтоги);
	//ОБ_83_01_1__02_01 = ОБ("83.01.1", "02.01", БухИтоги);
	
	//ОБ_01_01__84 = ОБ("01.01", "84", БухИтоги);
	//ОБ_84__01_01 = ОБ("84", "01.01", БухИтоги);
	//ОБ_02_01__84 = ОБ("02.01", "84", БухИтоги);
	//ОБ_84__02_01 = ОБ("84", "02.01", БухИтоги);
	
	// Разделение оборотов в корреспонденции со счетом 91 по видам прочих доходов и расходов.
	ЗаполнитьАвтоПояснения2Строки5220и5230_Сервер_1(БухИтогиРасчет, ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, мОргРасшифровка, ВыборкаПоСубконто);
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
		ВыбранноеСубконто = ВыборкаПоСубконто.Субконто1;
		Если ЗначениеЗаполнено(ВыбранноеСубконто) И ЗначениеЗаполнено(ВыбранноеСубконто.ВидПрочихДоходовИРасходов) Тогда
			Если ВыбранноеСубконто.ВидПрочихДоходовИРасходов = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов") Тогда
				ОБ_91_02__01_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01.01"));
				ОБ_01_01__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01.01"));
				ОБ_01_01__91_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотКт", "Счет, Субконто1, КорСчет", Счет("91.01"), ВыбранноеСубконто, Счет("01.01"));
				ОБ_91_02__01_01_ПоСубконто = БухИтогиРасчет.ПолучитьИтог("СуммаКорОборотДт", "Счет, Субконто1, КорСчет", Счет("91.02"), ВыбранноеСубконто, Счет("01.01"));
				
				ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_91_02__01_01_ПоСубконто;
				ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_01_01__91_01_ПоСубконто;
				ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_01_01__91_01_ПоСубконто;
				ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов = ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
				                                                                      + ОБ_91_02__01_01_ПоСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеСтроки = "Учтено в составе доходных вложений в материальные ценности - всего";
	
	Графа = "04";
	ЗаголовокГрафы = "На начало года - первоначальная стоимость";
	ЗначениеПоказателя = СНД_03_01 + СНД_03_02 + СНД_03_03 + СНД_03_04;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_03_01, Счет("03.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_03_02, Счет("03.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_03_03, Счет("03.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_03_04, Счет("03.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "05";
	ЗаголовокГрафы = "На начало года - накопленная амортизация";
	ЗначениеПоказателя = СНК_02_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_02_02, Счет("02.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "06";
	ЗаголовокГрафы = "Изменения за период - Поступило";
	ЗначениеПоказателя = ОБ_03__08;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_03__08, Счет("03"), Счет("08"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "07";
	ЗаголовокГрафы = "Изменения за период - Выбыло объектов - первоначальная стоимость";
	ЗначениеПоказателя = ОБ_03_09__03_01 + ОБ_03_09__03_02 + ОБ_03_09__03_03 + ОБ_03_09__03_04;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_03_09__03_01, Счет("03.09"), Счет("03.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_03_09__03_02, Счет("03.09"), Счет("03.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_03_09__03_03, Счет("03.09"), Счет("03.03"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_03_09__03_04, Счет("03.09"), Счет("03.04"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "08";
	ЗаголовокГрафы = "Изменения за период - Выбыло объектов - накопленнная амортизация";
	ЗначениеПоказателя = ОБ_02_02__03_09;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_02_02__03_09, Счет("02.02"), Счет("03.09"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "09";
	ЗаголовокГрафы = "Изменения за период - начислено амортизации";
	Если ИспользоватьАлгоритм2011Года Тогда
	//	ЗначениеПоказателя = КО_02_01
	//					   - ОБ_83_01_1__02_01 + ОБ_02_01__83_01_1 
	//					   - ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	//					   + ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("02.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
	//	ЗначениеПоказателя = КО_02_01
	//					   - ОБ_83_01_1__02_01 + ОБ_02_01__83_01_1
	//					   + ОБ_02_01__84 - ОБ_84__02_01;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_02_01, Счет("02.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_02_01__84, Счет("02.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_84__02_01, Счет("84"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	
	КонецЕсли;
	
	Графа = "10";
	ЗаголовокГрафы = "Изменения за период - Переоценка - первоначальная стоимость";
	Если ИспользоватьАлгоритм2011Года Тогда
	//	ЗначениеПоказателя = ОБ_01_01__83_01_1 - ОБ_83_01_1__01_01
	//					   - ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	//					   + ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__83_01_1, Счет("01.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, Счет("83.01.1"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 01.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_91_02__01_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 01.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_01_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("01.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
	//	ЗначениеПоказателя = ОБ_01_01__83_01_1 - ОБ_83_01_1__01_01
	//					   - ОБ_84__01_01 + ОБ_01_01__84;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__83_01_1, Счет("01.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_83_01_1__01_01, Счет("83.01.1"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_84__01_01, Счет("84"), Счет("01.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_01_01__84, Счет("01.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	
	КонецЕсли;
	
	Графа = "11";
	ЗаголовокГрафы = "Изменения за период - Переоценка - накопленная амортизация";
	Если ИспользоватьАлгоритм2011Года Тогда
	//	ЗначениеПоказателя = ОБ_83_01_1__02_01 - ОБ_02_01__83_01_1 
	//					   + ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	//					   - ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
	//	ЗначениеПоказателя = ОБ_83_01_1__02_01 - ОБ_02_01__83_01_1 
	//					   + ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов
	//					   - ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по дебету счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", НаименованиеСлагаемого, ОБ_91_02__02_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("91.02"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	НаименованиеСлагаемого = "Оборот по кредиту счета 91.02 /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов["ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов"]) + """/ в корреспонденции со счетом 02.01";
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", НаименованиеСлагаемого, -ОБ_02_01__91_01_ДоходыРасходыСвязанныеСПереоценкойВнеоборотныхАктивов, Счет("02.01"), Счет("91.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	Иначе
	//	ЗначениеПоказателя = ОБ_83_01_1__02_01 - ОБ_02_01__83_01_1
	//					   - ОБ_02_01__84 + ОБ_84__02_01;
	//	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_83_01_1__02_01, Счет("83.01.1"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__83_01_1, Счет("02.01"), Счет("83.01.1"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_02_01__84, Счет("02.01"), Счет("84"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_84__02_01, Счет("84"), Счет("02.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	//	
	КонецЕсли;
	
	Графа = "12";
	ЗаголовокГрафы = "На конец периода - первоначальная стоимость";
	ЗначениеПоказателя = СКД_03_01 + СКД_03_02 + СКД_03_03 + СКД_03_04;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_03_01, Счет("03.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_03_02, Счет("03.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_03_03, Счет("03.03"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_03_04, Счет("03.04"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	Графа = "13";
	ЗаголовокГрафы = "На конец периода - накопленная амортизация";
	ЗначениеПоказателя = СКК_02_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_02_02, Счет("02.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	ЗаполнитьСведенияДопСтрок5220и5230КромеГраф10и11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5220и5230ПоГрафе10(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	ЗаполнитьСведенияДопСтрок5220и5230ПоГрафе12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьСведенияДопСтрок5220и5230КромеГраф10и11(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьСведенияДопСтрок5220и5230ПоГрафе10(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьСведенияДопСтрок5220и5230ПоГрафе12(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения2Строки5220и5230ВТомЧисле(ТаблицаЗначенийДопСтрок)
	
	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = "ДопСтрока5220";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();
	
	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100522001 = ДополнительнаяСтрока.ГруппаУчетаОС;
		
		СтрокаМногострочнойЧасти.П100100522004 = ДополнительнаяСтрока.Графа04_5220;
		СтрокаМногострочнойЧасти.П100100522005 = ДополнительнаяСтрока.Графа05_5220;
		СтрокаМногострочнойЧасти.П100100522006 = ДополнительнаяСтрока.Графа06_5220;
		СтрокаМногострочнойЧасти.П100100522007 = ДополнительнаяСтрока.Графа07_5220;
		СтрокаМногострочнойЧасти.П100100522008 = ДополнительнаяСтрока.Графа08_5220;
		СтрокаМногострочнойЧасти.П100100522009 = ДополнительнаяСтрока.Графа09_5220;
		СтрокаМногострочнойЧасти.П100100522010 = ДополнительнаяСтрока.Графа10_5220;
		СтрокаМногострочнойЧасти.П100100522011 = ДополнительнаяСтрока.Графа11_5220;
		СтрокаМногострочнойЧасти.П100100522012 = ДополнительнаяСтрока.Графа12_5220;
		СтрокаМногострочнойЧасти.П100100522013 = ДополнительнаяСтрока.Графа13_5220;
		
		СтрокаМногострочнойЧасти.П100100523004 = ДополнительнаяСтрока.Графа04_5230;
		СтрокаМногострочнойЧасти.П100100523005 = ДополнительнаяСтрока.Графа05_5230;
		СтрокаМногострочнойЧасти.П100100523006 = ДополнительнаяСтрока.Графа06_5230;
		СтрокаМногострочнойЧасти.П100100523007 = ДополнительнаяСтрока.Графа07_5230;
		СтрокаМногострочнойЧасти.П100100523008 = ДополнительнаяСтрока.Графа08_5230;
		СтрокаМногострочнойЧасти.П100100523009 = ДополнительнаяСтрока.Графа09_5230;
		СтрокаМногострочнойЧасти.П100100523010 = ДополнительнаяСтрока.Графа10_5230;
		СтрокаМногострочнойЧасти.П100100523011 = ДополнительнаяСтрока.Графа11_5230;
		СтрокаМногострочнойЧасти.П100100523012 = ДополнительнаяСтрока.Графа12_5230;
		СтрокаМногострочнойЧасти.П100100523013 = ДополнительнаяСтрока.Графа13_5230;
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения2Строки5240и5250_Сервер(НаименованиеСтроки, ПараметрыРасшифровки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, БухИтоги)
	
	НаименованиеСтроки = "Незавершенное строительство и незаконченные операции по приобретению, модернизации и т.п основных средств - всего";
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ИмяОтчета", "Пояснения2");
	ПараметрыРасшифровки.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыРасшифровки.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2Строки5240и5250(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем НаименованиеСтроки, ПараметрыРасшифровки, БухИтоги;
	
	ЗаполнитьАвтоПояснения2Строки5240и5250_Сервер(НаименованиеСтроки, ПараметрыРасшифровки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, БухИтоги);
	
	ОБ_01__08 = ОБ("01", "08", БухИтоги);
	ОБ_03__08 = ОБ("03", "08", БухИтоги);
	
	СНД_07 = СНД("07", БухИтоги);
	ДО_07 = ДО("07", БухИтоги);
	КО_07 = КО("07", БухИтоги);
	СКД_07 = СКД("07", БухИтоги);
	
	СНД_08_01 = СНД("08.01", БухИтоги);
	СНД_08_02 = СНД("08.02", БухИтоги);
	СНД_08_03 = СНД("08.03", БухИтоги);
	СНД_08_04 = СНД("08.04", БухИтоги);
	СНД_08_12 = СНД("08.12", БухИтоги);
	
	ДО_08_01 = ДО("08.01", БухИтоги);
	ДО_08_02 = ДО("08.02", БухИтоги);
	ДО_08_03 = ДО("08.03", БухИтоги);
	ДО_08_04 = ДО("08.04", БухИтоги);
	ДО_08_12 = ДО("08.12", БухИтоги);
	
	КО_08_01 = КО("08.01", БухИтоги);
	КО_08_02 = КО("08.02", БухИтоги);
	КО_08_03 = КО("08.03", БухИтоги);
	КО_08_04 = КО("08.04", БухИтоги);
	КО_08_12 = КО("08.12", БухИтоги);
	
	СКД_08_01 = СКД("08.01", БухИтоги);
	СКД_08_02 = СКД("08.02", БухИтоги);
	СКД_08_03 = СКД("08.03", БухИтоги);
	СКД_08_04 = СКД("08.04", БухИтоги);
	СКД_08_12 = СКД("08.12", БухИтоги);
	
	ОБ_08_03__07 = ОБ("08.03", "07", БухИтоги);
	
	
	Графа = "04";
	ЗаголовокГрафы = "На начало года";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = СНД_07 + СНД_08_01 + СНД_08_02 + СНД_08_03 + СНД_08_04 + СНД_08_12;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СНД", СНД_07, Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_01, Счет("08.01"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_02, Счет("08.02"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_03, Счет("08.03"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_04, Счет("08.04"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СНД", СНД_08_12, Счет("08.12"));
	
	Графа = "05";
	ЗаголовокГрафы = "Изменения за период - затраты за период";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = ДО_07 - ОБ_08_03__07 + ДО_08_01 + ДО_08_02 + ДО_08_03 + ДО_08_04 + ДО_08_12;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!ДО", ДО_07, Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "-", "!ОБ", -ОБ_08_03__07, Счет("08.03"), Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ДО", ДО_08_01, Счет("08.01"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ДО", ДО_08_02, Счет("08.02"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ДО", ДО_08_03, Счет("08.03"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ДО", ДО_08_04, Счет("08.04"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ДО", ДО_08_12, Счет("08.12"));
	
	Графа = "06";
	ЗаголовокГрафы = "Изменения за период - списано";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = КО_07 - ОБ_08_03__07
	                   + КО_08_01 + КО_08_02 + КО_08_03 + КО_08_04 + КО_08_12
	                   - (ОБ_01__08 + ОБ_03__08);
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!КО", КО_07, Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "-", "!ОБ", -ОБ_08_03__07, Счет("08.03"), Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!КО", КО_08_01, Счет("08.01"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!КО", КО_08_02, Счет("08.02"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!КО", КО_08_03, Счет("08.03"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!КО", КО_08_04, Счет("08.04"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!КО", КО_08_12, Счет("08.12"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "-", "!ОБ", -ОБ_01__08, Счет("01"), Счет("08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "-", "!ОБ", -ОБ_03__08, Счет("03"), Счет("08"));
	
	Графа = "07";
	ЗаголовокГрафы = "Изменения за период - принято к учету в качестве основных средств или увеличена стоимость";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = ОБ_01__08 + ОБ_03__08;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!ОБ", ОБ_01__08, Счет("01"), Счет("08"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, "", "+", "!ОБ", ОБ_03__08, Счет("03"), Счет("08"));
	
	
	Графа = "08";
	ЗаголовокГрафы = "На конец периода";
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	НаименованиеРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = СКД_07 + СКД_08_01 + СКД_08_02 + СКД_08_03 + СКД_08_04 + СКД_08_12;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеРасшифровки, "+", "!СКД", СКД_07, Счет("07"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_01, Счет("08.01"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_02, Счет("08.02"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_03, Счет("08.03"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_04, Счет("08.04"));
	ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, , "+", "!СКД", СКД_08_12, Счет("08.12"));
	
	ЗаполнитьСведенияДопСтрок5240и5250(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСведенияДопСтрок5240и5250_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОбъектУчета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК ЗначениеГрафы04,
	               |	0 КАК ЗначениеГрафы05,
	               |	0 КАК ЗначениеГрафы06,
	               |	0 КАК ЗначениеГрафы07,
	               |	0 КАК ЗначениеГрафы08
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_01, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_02, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_03, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_04, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_08_03, , СчетКт = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_01, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_02, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_03, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_04, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_08_03, , СчетКт = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_01, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_02, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_03, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_04, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_01), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоОбъектыСтроительства, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_01), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_03), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоОбъектыСтроительства, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_03), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_01), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоОбъектыСтроительства, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_01), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_03), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоОбъектыСтроительства, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В ИЕРАРХИИ (&Счет_03), , СчетКт В ИЕРАРХИИ (&Счет_08), &ВидыСубконтоНоменклатура, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_07, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_01, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_02, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_03, &ВидыСубконтоОбъектыСтроительства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_08_04, &ВидыСубконтоНоменклатура, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07),
	               |	СУММА(ЗначениеГрафы08)
	               |ПО
	               |	ОбъектУчета";
	
	Запрос.УстановитьПараметр("НачПериода",  ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода",  ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
КонецФункции


&НаСервере
Функция ЗаполнитьСведенияДопСтрок5240и5250_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки)
	
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатура",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоОбъектыСтроительства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ОбъектУчета = Выборка.ОбъектУчета;
		Если НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ОбъектУчета = ОбъектУчета;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "04" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы04;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "05" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы05;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "06" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы06;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "07" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы07;
		СтрокаТаблицыДополнительныхСтрок["Графа" + "08" + "_" + НомерСтроки] = Выборка.ЗначениеГрафы08;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьСведенияДопСтрок5240и5250(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	Перем Запрос;
	
	ЗаполнитьСведенияДопСтрок5240и5250_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("Счет_01",    Счет("01"));
	Запрос.УстановитьПараметр("Счет_03",    Счет("03"));
	Запрос.УстановитьПараметр("Счет_07",    Счет("07"));
	Запрос.УстановитьПараметр("Счет_08",    Счет("08"));
	Запрос.УстановитьПараметр("Счет_08_01", Счет("08.01"));
	Запрос.УстановитьПараметр("Счет_08_02", Счет("08.02"));
	Запрос.УстановитьПараметр("Счет_08_03", Счет("08.03"));
	Запрос.УстановитьПараметр("Счет_08_04", Счет("08.04"));
	
	ЗаполнитьСведенияДопСтрок5240и5250_Сервер_1(Запрос, ТаблицаДополнительныхСтрок, НомерСтроки);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения2Строки5240и5250ВТомЧисле(ТаблицаЗначенийДопСтрок)
	
	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = "ДопСтрока5240";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();
	
	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100524001 = ДополнительнаяСтрока.ОбъектУчета;
		
		СтрокаМногострочнойЧасти.П100100524004 = ДополнительнаяСтрока.Графа04_5240;
		СтрокаМногострочнойЧасти.П100100524005 = ДополнительнаяСтрока.Графа05_5240;
		СтрокаМногострочнойЧасти.П100100524006 = ДополнительнаяСтрока.Графа06_5240;
		СтрокаМногострочнойЧасти.П100100524007 = ДополнительнаяСтрока.Графа07_5240;
		СтрокаМногострочнойЧасти.П100100524008 = ДополнительнаяСтрока.Графа08_5240;
		
		СтрокаМногострочнойЧасти.П100100525004 = ДополнительнаяСтрока.Графа04_5250;
		СтрокаМногострочнойЧасти.П100100525005 = ДополнительнаяСтрока.Графа05_5250;
		СтрокаМногострочнойЧасти.П100100525006 = ДополнительнаяСтрока.Графа06_5250;
		СтрокаМногострочнойЧасти.П100100525007 = ДополнительнаяСтрока.Графа07_5250;
		СтрокаМногострочнойЧасти.П100100525008 = ДополнительнаяСтрока.Графа08_5250;
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2Строка5260(Графа, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ЗаголовокГрафы = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ=yyyy") + " г.";
	
	НомерСтроки = "5260";
	НаименованиеСтроки = "Увеличение стоимости объектов основных средств в результате достройки, дооборудования, реконструкции – всего";
	ОБ_01_01__08_04 = ОБ("01.01", "08.04", БухИтоги);
	ОБ_01_01__08_03 = ОБ("01.01", "08.03", БухИтоги);
	ЗначениеПоказателя = ОБ_01_01__08_04 + ОБ_01_01__08_03;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_01_01__08_03, Счет("01.01"), Счет("08.03"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_01_01__08_04, Счет("01.01"), Счет("08.04"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ОсновноеСредство,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ЗначениеПоказателя,
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &СубконтоОС, СчетКт = &Счет_08_03, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_01_01, &СубконтоОС, СчетКт = &Счет_08_04, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ИТОГИ
	               |	СУММА(ЗначениеПоказателя)
	               |ПО
	               |	ОсновноеСредство";
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("Счет_01_01",   Счет("01.01"));
	Запрос.УстановитьПараметр("Счет_08_03",   Счет("08.03"));
	Запрос.УстановитьПараметр("Счет_08_04",   Счет("08.04"));
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ОсновноеСредство = Выборка.ОсновноеСредство;
		
		ЗначениеПоказателя = Выборка.ЗначениеПоказателя;
		СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_5260"] = ЗначениеПоказателя;
	КонецЦикла;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения2Строка5260ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5260";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100526001 = ДополнительнаяСтрока.ОсновноеСредство;
		
		СтрокаМногострочнойЧасти.П100100526003 = ДополнительнаяСтрока.Графа03_5260;
		СтрокаМногострочнойЧасти.П100100526004 = ДополнительнаяСтрока.Графа04_5260;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения2Строки528х_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, НомерСтроки, НаименованиеСтроки)
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	НомерСтроки = "5281";
	НаименованиеСтроки = "Переданные в аренду основные средства, числящиеся за балансом";
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения2Строки528х(Графа, ЗаголовокГрафы, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	Перем БухИтоги, НомерСтроки, НаименованиеСтроки;
	
	ЗаполнитьАвтоПояснения2Строки528х_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, НомерСтроки, НаименованиеСтроки);
	СКД_011 = СКД("011", БухИтоги);
	ЗначениеПоказателя = СКД_011;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_011, мСчет["011"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	НомерСтроки = "5283";
	НаименованиеСтроки = "Полученные в аренду основные средства, числящиеся за балансом";
	СКД_001 = СКД("001", БухИтоги);
	ЗначениеПоказателя = СКД_001;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_001, мСчет["001"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
	НомерСтроки = "5284";
	НаименованиеСтроки = "Объекты недвижимости, принятые в эксплуатацию и фактически используемые, находящиеся в процессе государственной регистрации";
	СКД_01_08 = СКД("01.08", БухИтоги);
	ЗначениеПоказателя = СКД_01_08;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_01_08, мСчет["01.08"], , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения2");
	
КонецПроцедуры

//УИК
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения3() 
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	ДатаНачалаГодаПредшествующегоПредыдущему = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	ТаблицаЗначенийДопСтрок5301и5311 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5301");
	ЗаполнитьАвтоПояснения3Строки5301и5311("5301", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5301и5311);
	ЗаполнитьАвтоПояснения3Строки5301и5311("5311", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5301и5311);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5301и5311);
	ЗаполнитьАвтоПояснения3Строки5301и5311ВТомЧисле(ТаблицаЗначенийДопСтрок5301и5311);
	
	ТаблицаЗначенийДопСтрок5305и5315 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5305");
	ЗаполнитьАвтоПояснения3Строки5305и5315("5305", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5305и5315);
	ЗаполнитьАвтоПояснения3Строки5305и5315("5315", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода, ТаблицаЗначенийДопСтрок5305и5315);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5305и5315);
	ЗаполнитьАвтоПояснения3Строки5305и5315ВТомЧисле(ТаблицаЗначенийДопСтрок5305и5315);
		
КонецПроцедуры // ЗаполнитьАвтоПояснения2()

//УИК
&НаСервере
Процедура ЗаполнитьАвтоПояснения3Строки5301и5311(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	
	ЗапросДолгосрочныеФВ = Новый Запрос;
	
	ЗапросДолгосрочныеФВ.Текст =
	
	"ВЫБРАТЬ
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьНачальныйОстаток) КАК ПокупнаяСтоимостьНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьКонечныйОстаток) КАК ПокупнаяСтоимостьКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьПриход) КАК ПокупнаяСтоимостьПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьРасход) КАК ПокупнаяСтоимостьРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеНачальныйОстаток) КАК ДопРасходыПриПокупкеНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеКонечныйОстаток) КАК ДопРасходыПриПокупкеКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеПриход) КАК ДопРасходыПриПокупкеПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеРасход) КАК ДопРасходыПриПокупкеРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаНачальныйОстаток) КАК ПереоценкаНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаКонечныйОстаток) КАК ПереоценкаКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаПриход) КАК ПереоценкаПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаРасход) КАК ПереоценкаРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДНачальныйОстаток) КАК УНДНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДКонечныйОстаток) КАК УНДКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДПриход) КАК УНДПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДРасход) КАК УНДРасход,
	|	уи_УчетЦБОстаткиИОбороты.ПартияДата,
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ННДПриход) КАК ННДПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДооценкаДоНоминалаПриход) КАК ДооценкаДоНоминалаПриход,
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага.уи_ОбщийТип
	|ИЗ
	|	РегистрНакопления.уи_УчетЦБ.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Авто,
	|			,
	|			Организация = &Организация
	|				И КлиентДоговор = &КлиентДоговор
	|				И РазделУчета = &РазделУчета) КАК уи_УчетЦБОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага,
	|	уи_УчетЦБОстаткиИОбороты.ПартияДата,
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага.уи_ОбщийТип";
	
	ЗапросДолгосрочныеФВ.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("КлиентДоговор", Объект.ДоговорКлиента);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("РазделУчета", ПредопределенноеЗначение("Перечисление.уи_УчётныеПортфели.БУ"));
	//ЗапросДолгосрочныеФВ.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	ВыборкаФВ = ЗапросДолгосрочныеФВ.Выполнить().Выбрать();
	
	НачСт = 0;
	КонСт = 0;
	НачПер = 0;
	КонПер = 0;
	
	Поступило = 0;
	Переоценка = 0;
	ВыбылоСт = 0;
	ВыбылоПер = 0;
	
	Проценты = 0;
	
	Пока ВыборкаФВ.Следующий() Цикл
		
		Если ВыборкаФВ.ЦеннаяБумага.уи_ДатаПогашения = Дата("00010101") Или (ДобавитьМесяц(КонецДня(ВыборкаФВ.ПартияДата), 12) <= КонецДня(ВыборкаФВ.ЦеннаяБумага.уи_ДатаПогашения)) Тогда
			НачСт = НачСт + ВыборкаФВ.ПокупнаяСтоимостьНачальныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеНачальныйОстаток + ВыборкаФВ.УНДНачальныйОстаток;
			НачПер = НачПер + ВыборкаФВ.ПереоценкаНачальныйОстаток;
			
			Поступило = Поступило + ВыборкаФВ.ПокупнаяСтоимостьПриход + ВыборкаФВ.ДопРасходыПриПокупкеПриход + ВыборкаФВ.УНДПриход;
			Переоценка = Переоценка + ВыборкаФВ.ПереоценкаПриход;
			Проценты = Проценты + ВыборкаФВ.ННДПриход + ВыборкаФВ.ДооценкаДоНоминалаПриход;
			
			ВыбылоСт = ВыбылоСт + ВыборкаФВ.ПокупнаяСтоимостьРасход + ВыборкаФВ.ДопРасходыПриПокупкеРасход + ВыборкаФВ.УНДРасход;
			ВыбылоПер = ВыбылоПер + ВыборкаФВ.ПереоценкаРасход;
			
			КонСт = КонСт + ВыборкаФВ.ПокупнаяСтоимостьКонечныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеКонечныйОстаток + ВыборкаФВ.УНДКонечныйОстаток;
			КонПер = КонПер + ВыборкаФВ.ПереоценкаКонечныйОстаток;
			
			СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
			СтрокаТаблицыДополнительныхСтрок.ВидФВ = ВыборкаФВ.ЦеннаяБумагауи_ОбщийТип;
			
			Графа = "04";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьНачальныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеНачальныйОстаток + ВыборкаФВ.УНДНачальныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "05";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаНачальныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "06";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьПриход + ВыборкаФВ.ДопРасходыПриПокупкеПриход + ВыборкаФВ.УНДПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "07";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьРасход + ВыборкаФВ.ДопРасходыПриПокупкеРасход + ВыборкаФВ.УНДРасход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "08";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаРасход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "09";
			ПоказательСтроки = ВыборкаФВ.ННДПриход + ВыборкаФВ.ДооценкаДоНоминалаПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "10";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "11";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьКонечныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеКонечныйОстаток + ВыборкаФВ.УНДКонечныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "12";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаКонечныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Графа = "04";
	ЗначениеПоказателя = НачСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "05";
	ЗначениеПоказателя = НачПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "06";
	ЗначениеПоказателя = Поступило;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "07";
	ЗначениеПоказателя = ВыбылоСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);

	Графа = "08";
	ЗначениеПоказателя = ВыбылоПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "09";
	ЗначениеПоказателя = Проценты;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "10";
	ЗначениеПоказателя = Переоценка;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "11";
	ЗначениеПоказателя = КонСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);

	Графа = "12";
	ЗначениеПоказателя = КонПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
КонецПроцедуры

//УИК
&НаСервере
Процедура ЗаполнитьАвтоПояснения3Строки5305и5315(НомерСтроки, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
	
	ЗапросДолгосрочныеФВ = Новый Запрос;
	
	ЗапросДолгосрочныеФВ.Текст =
	
	"ВЫБРАТЬ
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьНачальныйОстаток) КАК ПокупнаяСтоимостьНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьКонечныйОстаток) КАК ПокупнаяСтоимостьКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьПриход) КАК ПокупнаяСтоимостьПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПокупнаяСтоимостьРасход) КАК ПокупнаяСтоимостьРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеНачальныйОстаток) КАК ДопРасходыПриПокупкеНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеКонечныйОстаток) КАК ДопРасходыПриПокупкеКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеПриход) КАК ДопРасходыПриПокупкеПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДопРасходыПриПокупкеРасход) КАК ДопРасходыПриПокупкеРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаНачальныйОстаток) КАК ПереоценкаНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаКонечныйОстаток) КАК ПереоценкаКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаПриход) КАК ПереоценкаПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ПереоценкаРасход) КАК ПереоценкаРасход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДНачальныйОстаток) КАК УНДНачальныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДКонечныйОстаток) КАК УНДКонечныйОстаток,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДПриход) КАК УНДПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.УНДРасход) КАК УНДРасход,
	|	уи_УчетЦБОстаткиИОбороты.ПартияДата,
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ННДПриход) КАК ННДПриход,
	|	СУММА(уи_УчетЦБОстаткиИОбороты.ДооценкаДоНоминалаПриход) КАК ДооценкаДоНоминалаПриход,
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага.уи_ОбщийТип
	|ИЗ
	|	РегистрНакопления.уи_УчетЦБ.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И КлиентДоговор = &КлиентДоговор
	|				И РазделУчета = &РазделУчета) КАК уи_УчетЦБОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уи_УчетЦБОстаткиИОбороты.ЦеннаяБумага,
	|	уи_УчетЦБОстаткиИОбороты.ПартияДата";
	
	ЗапросДолгосрочныеФВ.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("КлиентДоговор", Объект.ДоговорКлиента);
	ЗапросДолгосрочныеФВ.УстановитьПараметр("РазделУчета", ПредопределенноеЗначение("Перечисление.уи_УчётныеПортфели.БУ"));
	//ЗапросДолгосрочныеФВ.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	ВыборкаФВ = ЗапросДолгосрочныеФВ.Выполнить().Выбрать();
	
	НачСт = 0;
	КонСт = 0;
	НачПер = 0;
	КонПер = 0;
	
	Поступило = 0;
	Переоценка = 0;
	ВыбылоСт = 0;
	ВыбылоПер = 0;
	
	Проценты = 0;
	
	Пока ВыборкаФВ.Следующий() Цикл
		
		Если ВыборкаФВ.ЦеннаяБумага.уи_ДатаПогашения <> Дата("00010101") И (ДобавитьМесяц(КонецДня(ВыборкаФВ.ПартияДата), 12) > КонецДня(ВыборкаФВ.ЦеннаяБумага.уи_ДатаПогашения)) Тогда
			НачСт = НачСт + ВыборкаФВ.ПокупнаяСтоимостьНачальныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеНачальныйОстаток + ВыборкаФВ.УНДНачальныйОстаток;
			НачПер = НачПер + ВыборкаФВ.ПереоценкаНачальныйОстаток;
			
			Поступило = Поступило + ВыборкаФВ.ПокупнаяСтоимостьПриход + ВыборкаФВ.ДопРасходыПриПокупкеПриход + ВыборкаФВ.УНДПриход;
			Переоценка = Переоценка + ВыборкаФВ.ПереоценкаПриход;
			Проценты = Проценты + ВыборкаФВ.ННДПриход + ВыборкаФВ.ДооценкаДоНоминалаПриход;
			
			ВыбылоСт = ВыбылоСт + ВыборкаФВ.ПокупнаяСтоимостьРасход + ВыборкаФВ.ДопРасходыПриПокупкеРасход + ВыборкаФВ.УНДРасход;
			ВыбылоПер = ВыбылоПер + ВыборкаФВ.ПереоценкаРасход;
			
			КонСт = КонСт + ВыборкаФВ.ПокупнаяСтоимостьКонечныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеКонечныйОстаток + ВыборкаФВ.УНДКонечныйОстаток;
			КонПер = КонПер + ВыборкаФВ.ПереоценкаКонечныйОстаток;
			
			СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
			СтрокаТаблицыДополнительныхСтрок.ВидФВ = ВыборкаФВ.ЦеннаяБумагауи_ОбщийТип;
			
			Графа = "04";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьНачальныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеНачальныйОстаток + ВыборкаФВ.УНДНачальныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "05";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаНачальныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "06";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьПриход + ВыборкаФВ.ДопРасходыПриПокупкеПриход + ВыборкаФВ.УНДПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "07";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьРасход + ВыборкаФВ.ДопРасходыПриПокупкеРасход + ВыборкаФВ.УНДРасход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "08";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаРасход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "09";
			ПоказательСтроки = ВыборкаФВ.ННДПриход + ВыборкаФВ.ДооценкаДоНоминалаПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "10";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаПриход;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "11";
			ПоказательСтроки = ВыборкаФВ.ПокупнаяСтоимостьКонечныйОстаток + ВыборкаФВ.ДопРасходыПриПокупкеКонечныйОстаток + ВыборкаФВ.УНДКонечныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
			Графа = "12";
			ПоказательСтроки = ВыборкаФВ.ПереоценкаКонечныйОстаток;
			СтрокаТаблицыДополнительныхСтрок["Графа" + Графа + "_" + НомерСтроки] = ПоказательСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Графа = "04";
	ЗначениеПоказателя = НачСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "05";
	ЗначениеПоказателя = НачПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "06";
	ЗначениеПоказателя = Поступило;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "07";
	ЗначениеПоказателя = ВыбылоСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);

	Графа = "08";
	ЗначениеПоказателя = ВыбылоПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "09";
	ЗначениеПоказателя = Проценты;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "10";
	ЗначениеПоказателя = Переоценка;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	Графа = "11";
	ЗначениеПоказателя = КонСт;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);

	Графа = "12";
	ЗначениеПоказателя = КонПер;     
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
КонецПроцедуры

//УИК
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения3Строки5301и5311ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5301";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100530101 = ДополнительнаяСтрока.ВидФВ;
		
		СтрокаМногострочнойЧасти.П100100530104 =  ДополнительнаяСтрока.Графа04_5301;
		СтрокаМногострочнойЧасти.П100100530105 =  ДополнительнаяСтрока.Графа05_5301;
		СтрокаМногострочнойЧасти.П100100530106 =  ДополнительнаяСтрока.Графа06_5301;
		СтрокаМногострочнойЧасти.П100100530107 =  ДополнительнаяСтрока.Графа07_5301;
		СтрокаМногострочнойЧасти.П100100530108 =  ДополнительнаяСтрока.Графа08_5301;
		СтрокаМногострочнойЧасти.П100100530109 =  ДополнительнаяСтрока.Графа09_5301;
		СтрокаМногострочнойЧасти.П100100530110 =  ДополнительнаяСтрока.Графа10_5301;
		СтрокаМногострочнойЧасти.П100100530111 =  ДополнительнаяСтрока.Графа11_5301;
		СтрокаМногострочнойЧасти.П100100530112 =  ДополнительнаяСтрока.Графа12_5301;
		
		СтрокаМногострочнойЧасти.П100100531104 =  ДополнительнаяСтрока.Графа04_5311;
		СтрокаМногострочнойЧасти.П100100531105 =  ДополнительнаяСтрока.Графа05_5311;
		СтрокаМногострочнойЧасти.П100100531106 =  ДополнительнаяСтрока.Графа06_5311;
		СтрокаМногострочнойЧасти.П100100531107 =  ДополнительнаяСтрока.Графа07_5311;
		СтрокаМногострочнойЧасти.П100100531108 =  ДополнительнаяСтрока.Графа08_5311;
		СтрокаМногострочнойЧасти.П100100531109 =  ДополнительнаяСтрока.Графа09_5311;
		СтрокаМногострочнойЧасти.П100100531110 =  ДополнительнаяСтрока.Графа10_5311;
		СтрокаМногострочнойЧасти.П100100531111 =  ДополнительнаяСтрока.Графа11_5311;
		СтрокаМногострочнойЧасти.П100100531112 =  ДополнительнаяСтрока.Графа12_5311;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры

//УИК
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения3Строки5305и5315ВТомЧисле(ТаблицаЗначенийДопСтрок)

	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяГруппы = "ДопСтрока5305";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();

	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100530501 = ДополнительнаяСтрока.ВидФВ;
		
		СтрокаМногострочнойЧасти.П100100530504 =  ДополнительнаяСтрока.Графа04_5305;
		СтрокаМногострочнойЧасти.П100100530505 =  ДополнительнаяСтрока.Графа05_5305;
		СтрокаМногострочнойЧасти.П100100530506 =  ДополнительнаяСтрока.Графа06_5305;
		СтрокаМногострочнойЧасти.П100100530507 =  ДополнительнаяСтрока.Графа07_5305;
		СтрокаМногострочнойЧасти.П100100530508 =  ДополнительнаяСтрока.Графа08_5305;
		СтрокаМногострочнойЧасти.П100100530509 =  ДополнительнаяСтрока.Графа09_5305;
		СтрокаМногострочнойЧасти.П100100530510 =  ДополнительнаяСтрока.Графа10_5305;
		СтрокаМногострочнойЧасти.П100100530511 =  ДополнительнаяСтрока.Графа11_5305;
		СтрокаМногострочнойЧасти.П100100530512 =  ДополнительнаяСтрока.Графа12_5305;
		
		СтрокаМногострочнойЧасти.П100100531504 =  ДополнительнаяСтрока.Графа04_5315;
		СтрокаМногострочнойЧасти.П100100531505 =  ДополнительнаяСтрока.Графа05_5315;
		СтрокаМногострочнойЧасти.П100100531506 =  ДополнительнаяСтрока.Графа06_5315;
		СтрокаМногострочнойЧасти.П100100531507 =  ДополнительнаяСтрока.Графа07_5315;
		СтрокаМногострочнойЧасти.П100100531508 =  ДополнительнаяСтрока.Графа08_5315;
		СтрокаМногострочнойЧасти.П100100531509 =  ДополнительнаяСтрока.Графа09_5315;
		СтрокаМногострочнойЧасти.П100100531510 =  ДополнительнаяСтрока.Графа10_5315;
		СтрокаМногострочнойЧасти.П100100531511 =  ДополнительнаяСтрока.Графа11_5315;
		СтрокаМногострочнойЧасти.П100100531512 =  ДополнительнаяСтрока.Графа12_5315;
	КонецЦикла;

	ВывестиРазделВТабличныйДокумент(ИмяГруппы);

КонецПроцедуры


// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения4()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ЗаполнитьАвтоПояснения4ЗаПериод("Отчетный", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	ЗаполнитьАвтоПояснения4ЗаПериод("Предыдущий", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения4ЗаПериод_Сервер(ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, НомерСтроки, ЭтоОтчетныйПериод)
	
	ЗаголовкиГраф = Новый Соответствие;
	ЗаголовкиГраф.Вставить("04", "На начало года - себестоимость");
	ЗаголовкиГраф.Вставить("05", "На начало года - величина резерва под снижение стоимости");
	ЗаголовкиГраф.Вставить("06", "Изменения за период - поступления и затраты");
	ЗаголовкиГраф.Вставить("07", "Изменения за период - выбыло - себестоимость");
	ЗаголовкиГраф.Вставить("08", "Изменения за период - выбыло - резерв под снижение стоимости");
	ЗаголовкиГраф.Вставить("09", "Изменения за период - убытков от снижения стоимости");
	ЗаголовкиГраф.Вставить("10", "Изменения за период - оборот запасов между их группами (видами)");
	ЗаголовкиГраф.Вставить("11", "На конец периода - себестоимость");
	ЗаголовкиГраф.Вставить("12", "На конец периода - величина резерва под снижение стоимости");
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5400", "5420");
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериод(ТипПериода, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	Перем ЗаголовкиГраф, БухИтоги, НомерСтроки;
	
	Если ТипПериода = "Отчетный" Тогда
		ЭтоОтчетныйПериод = Истина;
	ИначеЕсли ТипПериода = "Предыдущий" Тогда
		ЭтоОтчетныйПериод = Ложь;
	Иначе
		ВызватьИсключение "Неверное значение параметра ТипПериода в функции ЗаполнитьАвтоПояснения4ЗаПериод()";
	КонецЕсли;
	
	ЗаполнитьАвтоПояснения4ЗаПериод_Сервер(ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, НомерСтроки, ЭтоОтчетныйПериод);
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5400и5420(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5401", "5421");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5401и5421(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5402", "5422");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5402и5422(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5403", "5423");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5403и5423(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5404", "5424");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5404и5424(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5405", "5425");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5405и5425(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5406", "5426");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5406и5426(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5407", "5427");
	ЗаполнитьАвтоПояснения4ЗаПериодСтрока5407и5427(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5400и5420(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Запасы - всего";
	
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.Запасы");
	ДанныеСчета97ПоВидуАктива = ПолучитьДанныеСчета97ПоВидуАктива(ВидАктиваРБП, мОргРасшифровка, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_10 = СНД("10", БухИтоги);
	СНД_15 = СНД("15", БухИтоги);
	СНД_16 = СНД("16", БухИтоги);
	СНД_20 = СНД("20", БухИтоги);
	СНД_21 = СНД("21", БухИтоги);
	СНД_23 = СНД("23", БухИтоги);
	СНД_28 = СНД("28", БухИтоги);
	СНД_29 = СНД("29", БухИтоги);
	СНД_41 = СНД("41", БухИтоги);
	СНД_43 = СНД("43", БухИтоги);
	СНД_44 = СНД("44", БухИтоги);
	СНД_45 = СНД("45", БухИтоги);
	СНД_46 = СНД("46", БухИтоги);
	СНК_16 = СНК("16", БухИтоги);
	СНК_42 = СНК("42", БухИтоги);
	
	ЗначениеПоказателя = СНД_10 + СНД_15 + СНД_16 
	                   + СНД_20 + СНД_21 + СНД_23 + СНД_28 + СНД_29 
	                   + СНД_41 + СНД_43 + СНД_44 + СНД_45 + СНД_46 
	                   + ДанныеСчета97ПоВидуАктива.СНД
	                   - СНК_16 - СНК_42;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_15, Счет("15"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	ИмяСлагаемого = "Сальдо на начало периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.СНД, Счет("97"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНК_14 = СНК("14", БухИтоги);
	
	ЗначениеПоказателя = СНК_14;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_14, Счет("14"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_10     = ДО("10", БухИтоги);
	ОБ_10__10 = ОБ("10", "10", БухИтоги);
	ДО_15     = ДО("15", БухИтоги);
	ОБ_10__15 = ОБ("10", "15", БухИтоги);
	ДО_20     = ДО("20", БухИтоги);
	ОБ_20__20 = ОБ("20", "20", БухИтоги);
	ОБ_20__21 = ОБ("20", "21", БухИтоги);
	ОБ_20__28 = ОБ("20", "28", БухИтоги);
	ДО_21     = ДО("21", БухИтоги);
	ОБ_21__20 = ОБ("21", "20", БухИтоги);
	ОБ_21__23 = ОБ("21", "23", БухИтоги);
	ДО_23     = ДО("23", БухИтоги);
	ОБ_23__23 = ОБ("23", "23", БухИтоги);
	ОБ_23__28 = ОБ("23", "28", БухИтоги);
	ДО_28     = ДО("28", БухИтоги);
	ОБ_28__20 = ОБ("28", "20", БухИтоги);
	ОБ_28__21 = ОБ("28", "21", БухИтоги);
	ОБ_28__23 = ОБ("28", "23", БухИтоги);
	ДО_29     = ДО("29", БухИтоги);
	ОБ_29__23 = ОБ("29", "23", БухИтоги);
	ОБ_29__28 = ОБ("29", "28", БухИтоги);
	ОБ_28__29 = ОБ("28", "29", БухИтоги);
	ДО_41     = ДО("41", БухИтоги);
	ОБ_41__41 = ОБ("41", "41", БухИтоги);
	ОБ_41__42 = ОБ("41", "42", БухИтоги);
	ОБ_41__15 = ОБ("41", "15", БухИтоги);
	ДО_43     = ДО("43", БухИтоги);
	ОБ_43__43 = ОБ("43", "43", БухИтоги);
	ДО_44     = ДО("44", БухИтоги);
	ДО_45     = ДО("45", БухИтоги);
	ДО_46     = ДО("46", БухИтоги);
	
	ЗначениеПоказателя = ДО_10 - ОБ_10__10 
	                   + ДО_15 - ОБ_10__15 
	                   + ДО_20 - ОБ_20__20 - ОБ_20__21 - ОБ_20__28 
	                   + ДО_21 - ОБ_21__20 - ОБ_21__23 
	                   + ДО_23 - ОБ_23__23 - ОБ_23__28 
	                   + ДО_28 - ОБ_28__20 - ОБ_28__21 - ОБ_28__23 
	                   + ДО_29 - ОБ_29__23 - ОБ_29__28 - ОБ_28__29 
	                   + ДО_41 - ОБ_41__41 - ОБ_41__42 - ОБ_41__15 
	                   + ДО_43 - ОБ_43__43 
	                   + ДО_44 
	                   + ДО_45 
	                   + ДО_46 
	                   + ДанныеСчета97ПоВидуАктива.ДО;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__10, Счет("10"), Счет("10"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_15, Счет("15"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__15, Счет("10"), Счет("15"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__20, Счет("20"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__21, Счет("20"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__28, Счет("20"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__20, Счет("21"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__23, Счет("21"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__23, Счет("23"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__28, Счет("23"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__20, Счет("28"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__21, Счет("28"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__23, Счет("28"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__23, Счет("29"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__28, Счет("29"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__29, Счет("28"), Счет("29"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__41, Счет("41"), Счет("41"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__42, Счет("41"), Счет("42"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__15, Счет("41"), Счет("15"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_43__43, Счет("43"), Счет("43"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	ИмяСлагаемого = "Оборот по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.ДО, Счет("97"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_10     = КО("10", БухИтоги);
	ОБ_10__10 = ОБ("10", "10", БухИтоги);
	КО_16     = КО("16", БухИтоги);
	ОБ_15__16 = ОБ("15", "16", БухИтоги);
	КО_20     = КО("20", БухИтоги);
	ОБ_20__20 = ОБ("20", "20", БухИтоги);
	ОБ_21__20 = ОБ("21", "20", БухИтоги);
	ОБ_28__20 = ОБ("28", "20", БухИтоги);
	КО_21     = КО("21", БухИтоги);
	ОБ_20__21 = ОБ("20", "21", БухИтоги);
	ОБ_23__21 = ОБ("23", "21", БухИтоги);
	ОБ_28__21 = ОБ("28", "21", БухИтоги);
	КО_23     = КО("23", БухИтоги);
	ОБ_20__23 = ОБ("20", "23", БухИтоги);
	ОБ_21__23 = ОБ("21", "23", БухИтоги);
	ОБ_23__23 = ОБ("23", "23", БухИтоги);
	ОБ_28__23 = ОБ("28", "23", БухИтоги);
	ОБ_29__23 = ОБ("29", "23", БухИтоги);
	КО_28     = КО("28", БухИтоги);
	ОБ_20__28 = ОБ("20", "28", БухИтоги);
	ОБ_23__28 = ОБ("23", "28", БухИтоги);
	ОБ_28__28 = ОБ("28", "28", БухИтоги);
	КО_29     = КО("29", БухИтоги);
	ОБ_29__29 = ОБ("29", "29", БухИтоги);
	КО_41     = КО("41", БухИтоги);
	ОБ_41__41 = ОБ("41", "41", БухИтоги);
	ОБ_90__42 = ОБ("90", "42", БухИтоги);
	КО_43     = КО("43", БухИтоги);
	ОБ_43__43 = ОБ("43", "43", БухИтоги);
	КО_44     = КО("44", БухИтоги);
	КО_45     = КО("45", БухИтоги);
	КО_46     = КО("46", БухИтоги);
	
	ЗначениеПоказателя = КО_10 - ОБ_10__10 
	                   + КО_16 - ОБ_15__16 
	                   + КО_20 - ОБ_20__20 - ОБ_21__20 - ОБ_28__20 
	                   + КО_21 - ОБ_20__21 - ОБ_23__21 - ОБ_28__21 
	                   + КО_23 - ОБ_20__23 - ОБ_21__23 - ОБ_23__23 - ОБ_28__23 - ОБ_29__23 
	                   + КО_28 - ОБ_20__28 - ОБ_23__28 - ОБ_28__28 
	                   + КО_29 - ОБ_29__29 
	                   + КО_41 - ОБ_41__41 
	                   + ОБ_90__42 
	                   + КО_43 - ОБ_43__43 
	                   + КО_44 
	                   + КО_45 
	                   + КО_46 
	                   + ДанныеСчета97ПоВидуАктива.КО;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__10, Счет("10"), Счет("10"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_15__16, Счет("15"), Счет("16"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__20, Счет("20"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__20, Счет("21"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__20, Счет("28"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__21, Счет("20"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__21, Счет("23"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__21, Счет("28"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__23, Счет("20"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__23, Счет("21"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__23, Счет("23"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__23, Счет("28"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__23, Счет("29"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__28, Счет("20"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__28, Счет("23"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__28, Счет("28"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__29, Счет("29"), Счет("29"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__41, Счет("41"), Счет("41"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_90__42, Счет("90"), Счет("42"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_43__43, Счет("43"), Счет("43"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	ИмяСлагаемого = "Оборот по кредиту счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.КО, Счет("97"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_14__91_01 = ОБ("14", "91.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_14__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_14__91_01, Счет("14"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_91_02__14 = ОБ("91.02", "14", БухИтоги);
	
	ЗначениеПоказателя = ОБ_91_02__14;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_91_02__14, Счет("91.02"), Счет("14"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_10 = СКД("10", БухИтоги);
	СКД_15 = СКД("15", БухИтоги);
	СКД_16 = СКД("16", БухИтоги);
	СКД_20 = СКД("20", БухИтоги);
	СКД_21 = СКД("21", БухИтоги);
	СКД_23 = СКД("23", БухИтоги);
	СКД_28 = СКД("28", БухИтоги);
	СКД_29 = СКД("29", БухИтоги);
	СКД_41 = СКД("41", БухИтоги);
	СКД_43 = СКД("43", БухИтоги);
	СКД_44 = СКД("44", БухИтоги);
	СКД_45 = СКД("45", БухИтоги);
	СКД_46 = СКД("46", БухИтоги);
	СКК_16 = СКК("16", БухИтоги);
	СКК_42 = СКК("42", БухИтоги);
	
	ЗначениеПоказателя = СКД_10 + СКД_15 + СКД_16 
	                   + СКД_20 + СКД_21 + СКД_23 + СКД_28 + СКД_29 
	                   + СКД_41 + СКД_43 + СКД_44 + СКД_45 + СКД_46 
	                   + ДанныеСчета97ПоВидуАктива.СКД
	                   - СКК_16 - СКК_42;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_15, Счет("15"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	ИмяСлагаемого = "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.СКД, Счет("97"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКК_14 = СКК("14", БухИтоги);
	
	ЗначениеПоказателя = СКК_14;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_14, Счет("14"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5401и5421(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Сырье, материалы и другие аналогичные ценности";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_10    = СНД("10", БухИтоги);
	СНД_15_01 = СНД("15.01", БухИтоги);
	СНД_16_01 = СНД("16.01", БухИтоги);
	СНК_16_01 = СНК("16.01", БухИтоги);
	
	ЗначениеПоказателя = СНД_10 + СНД_15_01 + СНД_16_01 - СНК_16_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_10, Счет("10"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_15_01,Счет("15.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_16_01,Счет("16.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_16_01,Счет("16.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНК_14_01 = СНК("14.01", БухИтоги);
	
	ЗначениеПоказателя = СНК_14_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_14_01, Счет("14.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_10        = ДО("10", БухИтоги);
	ОБ_10__10    = ОБ("10", "10", БухИтоги);
	ДО_15_01     = ДО("15.01", БухИтоги);
	ОБ_10__15_01 = ОБ("10", "15.01", БухИтоги);
	
	ЗначениеПоказателя = ДО_10 - ОБ_10__10 + ДО_15_01 - ОБ_10__15_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__10, Счет("10"), Счет("10"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_15_01, Счет("15.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__15_01, Счет("10"), Счет("15.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_10           = КО("10", БухИтоги);
	ОБ_10__10       = ОБ("10", "10", БухИтоги);
	КО_16_01        = КО("16.01", БухИтоги);
	ОБ_15_01__16_01 = ОБ("15.01", "16.01", БухИтоги);
	
	ЗначениеПоказателя = КО_10 - ОБ_10__10 + КО_16_01 - ОБ_15_01__16_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_10__10, Счет("10"), Счет("10"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_16_01, Счет("16.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_15_01__16_01, Счет("15.01"), Счет("16.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_14_01__91_01 = ОБ("14.01", "91.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_14_01__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_14_01__91_01, Счет("14.01"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_91_02__14_01 = ОБ("91.02", "14.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_91_02__14_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_91_02__14_01, Счет("91.02"), Счет("14.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_10__10 = ОБ("10", "10", БухИтоги);
	
	ЗначениеПоказателя = ОБ_10__10;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_10__10, Счет("10"), Счет("10"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_10    = СКД("10", БухИтоги);
	СКД_15_01 = СКД("15.01", БухИтоги);
	СКД_16_01 = СКД("16.01", БухИтоги);
	СКК_16_01 = СКК("16.01", БухИтоги);
	
	ЗначениеПоказателя = СКД_10 + СКД_15_01 + СКД_16_01 - СКК_16_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, Счет("10"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_15_01, Счет("15.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_16_01, Счет("16.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_16_01, Счет("16.01"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКК_14_01 = СКК("14.01", БухИтоги);
	
	ЗначениеПоказателя = СКК_14_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_14_01, Счет("14.01"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5402и5422(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Готовая продукция";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_43 = СНД("43", БухИтоги);
	
	ЗначениеПоказателя = СНД_43;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_43, Счет("43"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНК_14_03 = СНК("14.03", БухИтоги);
	
	ЗначениеПоказателя = СНК_14_03;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_14_03, Счет("14.03"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_43 = ДО("43", БухИтоги);
	ОБ_43__43 = ОБ("43", "43", БухИтоги);
	
	ЗначениеПоказателя = ДО_43 - ОБ_43__43;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_43, Счет("43"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_43__43, Счет("43"), Счет("43"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_43 = КО("43", БухИтоги);
	ОБ_43__43 = ОБ("43", "43", БухИтоги);
	
	ЗначениеПоказателя = КО_43 - ОБ_43__43;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_43, Счет("43"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_43__43, Счет("43"), Счет("43"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_14_03__91_01 = ОБ("14.03", "91.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_14_03__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_14_03__91_01, Счет("14.03"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_91_02__14_03 = ОБ("91.02", "14.03", БухИтоги);
	
	ЗначениеПоказателя = ОБ_91_02__14_03;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_91_02__14_03, Счет("91.02"), Счет("14.03"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_43__43 = ОБ("43", "43", БухИтоги);
	
	ЗначениеПоказателя = ОБ_43__43;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_43__43, Счет("43"), Счет("43"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_43 = СКД("43", БухИтоги);
	
	ЗначениеПоказателя = СКД_43;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_43, Счет("43"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКК_14_03 = СКК("14.03", БухИтоги);
	
	ЗначениеПоказателя = СКК_14_03;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_14_03, Счет("14.03"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5403и5423(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Товары для перепродажи";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_41    = СНД("41", БухИтоги);
	СНД_15_02 = СНД("15.02", БухИтоги);
	СНД_16_02 = СНД("16.02", БухИтоги);
	СНК_16_02 = СНК("16.02", БухИтоги);
	СНК_42    = СНК("42", БухИтоги);
	
	ЗначениеПоказателя = СНД_41 + СНД_15_02 + СНД_16_02 - СНК_16_02 - СНК_42;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_41, Счет("41"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_15_02, Счет("15.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_16_02, Счет("16.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_16_02, Счет("16.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНК_14_02 = СНК("14.02", БухИтоги);
	
	ЗначениеПоказателя = СНК_14_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_14_02, Счет("14.02"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_41 = ДО("41", БухИтоги);
	ОБ_41__42 = ОБ("41", "42", БухИтоги);
	ОБ_41__41 = ОБ("41", "41", БухИтоги);
	ДО_15_02 = ДО("15.02", БухИтоги);
	ОБ_41__15_02 = ОБ("41", "15.02", БухИтоги);
	
	ЗначениеПоказателя = ДО_41 - ОБ_41__42 - ОБ_41__41 + ДО_15_02 - ОБ_41__15_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_41, Счет("41"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__42, Счет("41"), Счет("42"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__41, Счет("41"), Счет("41"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_15_02, Счет("15.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__15_02, Счет("41"), Счет("15.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_41 = КО("41", БухИтоги);
	ОБ_41__41 = ОБ("41", "41", БухИтоги);
	ОБ_90__42 = ОБ("90", "42", БухИтоги);
	КО_16_02 = КО("16.02", БухИтоги);
	ОБ_15_02__16_02 = ОБ("15.02", "16.02", БухИтоги);
	
	ЗначениеПоказателя = КО_41 - ОБ_41__41 + ОБ_90__42 + КО_16_02 - ОБ_15_02__16_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_41, Счет("41"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_41__41, Счет("41"), Счет("41"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ОБ", ОБ_90__42, Счет("90"), Счет("42"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_16_02, Счет("16.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_15_02__16_02, Счет("15.02"), Счет("16.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_14_02__91_01 = ОБ("14.02", "91.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_14_02__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_14_02__91_01, Счет("14.02"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_91_02__14_02 = ОБ("91.02", "14.02", БухИтоги);
	
	ЗначениеПоказателя = ОБ_91_02__14_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_91_02__14_02, Счет("91.02"), Счет("14.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_41__41 = ОБ("41", "41", БухИтоги);
	
	ЗначениеПоказателя = ОБ_41__41;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_41__41, Счет("41"), Счет("41"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_41 = СКД("41", БухИтоги);
	СКД_15_02 = СКД("15.02", БухИтоги);
	СКД_16_02 = СКД("16.02", БухИтоги);
	СКК_42 = СКК("42", БухИтоги);
	
	ЗначениеПоказателя = СКД_41 + СКД_15_02 + СКД_16_02 - СКК_42;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_41, Счет("41"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_15_02, Счет("15.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_16_02, Счет("16.02"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКК_14_02 = СКК("14.02", БухИтоги);
	
	ЗначениеПоказателя = СКК_14_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_14_02, Счет("14.02"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5404и5424(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Товары и готовая продукция отгруженные";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_45 = СНД("45", БухИтоги);
	
	ЗначениеПоказателя = СНД_45;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_45, Счет("45"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_45 = ДО("45", БухИтоги);
	
	ЗначениеПоказателя = ДО_45;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_45, Счет("45"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_45 = КО("45", БухИтоги);
	
	ЗначениеПоказателя = КО_45;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_45, Счет("45"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_45 = СКД("45", БухИтоги);
	
	ЗначениеПоказателя = СКД_45;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_45, Счет("45"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5405и5425(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Затраты в незавершенном производстве";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_20 = СНД("20", БухИтоги);
	СНД_21 = СНД("21", БухИтоги);
	СНД_23 = СНД("23", БухИтоги);
	СНД_28 = СНД("28", БухИтоги);
	СНД_29 = СНД("29", БухИтоги);
	СНД_46 = СНД("46", БухИтоги);
	
	ЗначениеПоказателя = СНД_20 + СНД_21 + СНД_23 + СНД_28 + СНД_29 + СНД_46;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_20, Счет("20"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД", СНД_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНК_14_04 = СНК("14.04", БухИтоги);
	
	ЗначениеПоказателя = СНК_14_04;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_14_04, Счет("14.04"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_20     = ДО("20", БухИтоги);
	ОБ_20__20 = ОБ("20", "20", БухИтоги);
	ОБ_20__21 = ОБ("20", "21", БухИтоги);
	ОБ_20__23 = ОБ("20", "23", БухИтоги);
	ОБ_20__28 = ОБ("20", "28", БухИтоги);
	ДО_21     = ДО("21", БухИтоги);
	ОБ_21__20 = ОБ("21", "20", БухИтоги);
	ОБ_21__23 = ОБ("21", "23", БухИтоги);
	ДО_23     = ДО("23", БухИтоги);
	ОБ_23__23 = ОБ("23", "23", БухИтоги);
	ОБ_23__28 = ОБ("23", "28", БухИтоги);
	ДО_28     = ДО("28", БухИтоги);
	ОБ_28__20 = ОБ("28", "20", БухИтоги);
	ОБ_28__21 = ОБ("28", "21", БухИтоги);
	ОБ_28__23 = ОБ("28", "23", БухИтоги);
	ДО_29     = ДО("29", БухИтоги);
	ОБ_29__29 = ОБ("29", "29", БухИтоги);
	ОБ_29__23 = ОБ("29", "23", БухИтоги);
	ОБ_29__28 = ОБ("29", "28", БухИтоги);
	ДО_46     = ДО("46", БухИтоги);
	
	ЗначениеПоказателя = ДО_20 - ОБ_20__20 - ОБ_20__21 - ОБ_20__23 - ОБ_20__28
	                   + ДО_21 - ОБ_21__20 - ОБ_21__23
	                   + ДО_23 - ОБ_23__23 - ОБ_23__28
	                   + ДО_28 - ОБ_28__20 - ОБ_28__21 - ОБ_28__23
	                   + ДО_29 - ОБ_29__29 - ОБ_29__23 - ОБ_29__28;
	Если НомерСтроки = "5425" Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + ДО_46;
	КонецЕсли;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_20, Счет("20"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__20, Счет("20"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__21, Счет("20"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__23, Счет("20"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__28, Счет("20"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__20, Счет("21"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__23, Счет("21"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__23, Счет("23"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__28, Счет("23"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__20, Счет("28"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__21, Счет("28"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__23, Счет("28"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__29, Счет("29"), Счет("29"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__23, Счет("29"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__28, Счет("29"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	Если НомерСтроки = "5425" Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!ДО", ДО_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	КонецЕсли;
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_20     = КО("20", БухИтоги);
	ОБ_20__20 = ОБ("20", "20", БухИтоги);
	ОБ_21__20 = ОБ("21", "20", БухИтоги);
	ОБ_28__20 = ОБ("28", "20", БухИтоги);
	КО_21     = КО("21", БухИтоги);
	ОБ_20__21 = ОБ("20", "21", БухИтоги);
	ОБ_23__21 = ОБ("23", "21", БухИтоги);
	ОБ_28__21 = ОБ("28", "21", БухИтоги);
	КО_23     = КО("23", БухИтоги);
	ОБ_23__23 = ОБ("23", "23", БухИтоги);
	ОБ_20__23 = ОБ("20", "23", БухИтоги);
	ОБ_21__23 = ОБ("21", "23", БухИтоги);
	ОБ_28__23 = ОБ("28", "23", БухИтоги);
	ОБ_29__23 = ОБ("29", "23", БухИтоги);
	КО_28     = КО("28", БухИтоги);
	ОБ_20__28 = ОБ("20", "28", БухИтоги);
	ОБ_23__28 = ОБ("23", "28", БухИтоги);
	ОБ_29__23 = ОБ("29", "23", БухИтоги);
	КО_29     = КО("29", БухИтоги);
	ОБ_29__29 = ОБ("29", "29", БухИтоги);
	КО_46     = КО("46", БухИтоги);
	
	ЗначениеПоказателя = КО_20 - ОБ_20__20 - ОБ_21__20 - ОБ_28__20
	                   + КО_21 - ОБ_20__21 - ОБ_23__21 - ОБ_28__21
	                   + КО_23 - ОБ_23__23 - ОБ_20__23 - ОБ_21__23 - ОБ_28__23 - ОБ_29__23
	                   + КО_28 - ОБ_20__28 - ОБ_23__28 - ОБ_29__23
	                   + КО_29 - ОБ_29__29;
	Если НомерСтроки = "5425" Тогда
		ЗначениеПоказателя = ЗначениеПоказателя - КО_46;
	КонецЕсли;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_20, Счет("20"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__20, Счет("20"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__20, Счет("21"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__20, Счет("28"), Счет("20"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__21, Счет("20"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__21, Счет("23"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__21, Счет("28"), Счет("21"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__23, Счет("23"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__23, Счет("20"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_21__23, Счет("21"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_28__23, Счет("28"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__23, Счет("29"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_20__28, Счет("20"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_23__28, Счет("23"), Счет("28"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__23, Счет("29"), Счет("23"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!КО", КО_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_29__29, Счет("29"), Счет("29"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	Если НомерСтроки = "5425" Тогда
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!КО", -КО_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	КонецЕсли;
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_14_04__91_01 = ОБ("14.04", "91.01", БухИтоги);
	
	ЗначениеПоказателя = ОБ_14_04__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_14_04__91_01, Счет("14.04"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ОБ_91_02__14_02 = ОБ("91.02", "14.02", БухИтоги);
	
	ЗначениеПоказателя = ОБ_91_02__14_02;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_91_02__14_02, Счет("91.02"), Счет("14.02"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_20 = СКД("20", БухИтоги);
	СКД_21 = СКД("21", БухИтоги);
	СКД_23 = СКД("23", БухИтоги);
	СКД_28 = СКД("28", БухИтоги);
	СКД_29 = СКД("29", БухИтоги);
	СКД_46 = СКД("46", БухИтоги);
	
	ЗначениеПоказателя = СКД_20 + СКД_21 + СКД_23 + СКД_28 + СКД_29 + СКД_46;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_20, Счет("20"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД", СКД_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКК_14_04 = СКК("14.04", БухИтоги);
	
	ЗначениеПоказателя = СКК_14_04;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_14_04, Счет("14.04"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5406и5426(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Прочие запасы и затраты";
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СНД_44 = СНД("44", БухИтоги);
	
	ЗначениеПоказателя = СНД_44;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНД", СНД_44, Счет("44"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ДО_44 = ДО("44", БухИтоги);
	
	ЗначениеПоказателя = ДО_44;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_44, Счет("44"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	КО_44 = КО("44", БухИтоги);
	
	ЗначениеПоказателя = КО_44;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_44, Счет("44"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	СКД_44 = СКД("44", БухИтоги);
	
	ЗначениеПоказателя = СКД_44;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_44, Счет("44"),  , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения4ЗаПериодСтрока5407и5427(НомерСтроки, ЗаголовкиГраф, БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	НаименованиеСтроки = "Расходы будущих периодов (для объектов аналитического учета, которые в балансе отражаются в составе «Запасов»)";
	ВидАктиваРБП = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.Запасы");
	
	ДанныеСчета97ПоВидуАктива = ПолучитьДанныеСчета97ПоВидуАктива(ВидАктиваРБП, мОргРасшифровка, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ЗначениеПоказателя = ДанныеСчета97ПоВидуАктива.СНД;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	ИмяСлагаемого = "Сальдо на начало периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.СНД, Счет("97"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ЗначениеПоказателя = ДанныеСчета97ПоВидуАктива.ДО;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	ИмяСлагаемого = "Оборот по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.ДО, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ЗначениеПоказателя = ДанныеСчета97ПоВидуАктива.КО;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	ИмяСлагаемого = "Оборот по кредиту счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.КО, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
	Графа = "11";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	ЗначениеПоказателя = ДанныеСчета97ПоВидуАктива.СКД;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	ИмяСлагаемого = "Сальдо на конец периода по дебету счета 97 /объекты со значением реквизита ""Вид актива"" - """ + Строка(ВидАктиваРБП) + """/";
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", ИмяСлагаемого, ДанныеСчета97ПоВидуАктива.СКД, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения4");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСчета97ПоВидуАктива_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ВидАктиваРБП)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СКД
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В ИЕРАРХИИ (&СчетаРБП),
	               |			&ВидСубконтоРБП,
	               |			Организация = &Организация
	               |				И Субконто1.ВидАктива = &ВидАктива) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт";
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидАктива", ВидАктиваРБП);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
КонецФункции


&НаСервере
Функция ПолучитьДанныеСчета97ПоВидуАктива_Сервер_1(Запрос)
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Результат.Вставить("СНД", 0);
	Результат.Вставить("ДО",  0);
	Результат.Вставить("КО",  0);
	Результат.Вставить("СКД", 0);
	
	Если Выборка.Следующий() Тогда
		Результат.СНД = Выборка.СНД;
		Результат.ДО  = Выборка.ДО;
		Результат.КО  = Выборка.КО;
		Результат.СКД = Выборка.СКД;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Функция ПолучитьДанныеСчета97ПоВидуАктива(ВидАктиваРБП, Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	Перем Запрос;
	
	ПолучитьДанныеСчета97ПоВидуАктива_Сервер(Запрос, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ВидАктиваРБП);
	Запрос.УстановитьПараметр("СчетаРБП", Счет("97"));
	
	ПолучитьДанныеСчета97ПоВидуАктива_Сервер_1(Запрос);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения5()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ЗаполнитьАвтоПояснения5ЗаПериод("Отчетный", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	ЗаполнитьАвтоПояснения5ЗаПериод("Предыдущий", ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоПояснения5ЗаПериод(ТипПериода, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	Если ТипПериода = "Отчетный" Тогда
		ЭтоОтчетныйПериод = Истина;
	ИначеЕсли ТипПериода = "Предыдущий" Тогда
		ЭтоОтчетныйПериод = Ложь;
	Иначе
		ВызватьИсключение "Неверное значение параметра ТипПериода в функции ЗаполнитьАвтоПояснения5ЗаПериод()";
	КонецЕсли;
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	ЗаголовкиГраф51 = Новый Соответствие;
	ЗаголовкиГраф51.Вставить("04", "На начало года - учтенная по условиям договора");
	ЗаголовкиГраф51.Вставить("05", "На начало года - величина резерва по сомнительным долгам");
	ЗаголовкиГраф51.Вставить("06", "Изменения за период - поступление - в результате хозяйственных операций (сумма долга по сделке, операции)");
	ЗаголовкиГраф51.Вставить("07", "Изменения за период - поступление - причитающиеся проценты, штрафы и иные начисления");
	ЗаголовкиГраф51.Вставить("08", "Изменения за период - выбыло - погашение");
	ЗаголовкиГраф51.Вставить("09", "Изменения за период - выбыло - списание на финансовый результат");
	ЗаголовкиГраф51.Вставить("10", "Изменения за период - выбыло - восстановление резерва");
	ЗаголовкиГраф51.Вставить("11", "Изменения за период - перевод из долго- в краткосрочную задолженность");
	ЗаголовкиГраф51.Вставить("12", "На конец периода - учтенная по условиям договора");
	ЗаголовкиГраф51.Вставить("13", "На конец периода - величина резерва по сомнительным долгам");
	
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5502", "5522");
	ЗаполнитьАвтоПояснения5Строки5502и5522(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5503", "5523");
	ЗаполнитьАвтоПояснения5Строки5503и5523(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5504", "5524");
	ЗаполнитьАвтоПояснения5Строки5504и5524(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5510", "5530");
	ЗаполнитьАвтоПояснения5Строки5510и5530(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5511", "5531");
	ЗаполнитьАвтоПояснения5Строки5511и5531(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5512", "5532");
	ЗаполнитьАвтоПояснения5Строки5512и5532(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НомерСтроки = ?(ЭтоОтчетныйПериод, "5513", "5533");
	ЗаполнитьАвтоПояснения5Строки5513и5533(НомерСтроки, ЗаголовкиГраф51, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5502и5522(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 6 переход(а|ов) на сервер

	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Расчеты с покупателями и заказчиками";
	СписокСчетовРасчетов = "62.01, 62.21, 62.31, 76.06, 76.26, 76.36";
	СписокСчетовРезервов = "63";
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаРасчетов = Новый ТаблицаЗначений;
	СчетаРасчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРасчетов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРасчетов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	СчетаРезервов = Новый ТаблицаЗначений;
	СчетаРезервов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРезервов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРезервов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	ВидПрочихДоходовРасходовСписание = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности");
	ВидПрочихДоходовРасходовШтрафы   = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", ВидПрочихДоходовРасходовСписание);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходовШтрафы", ВидПрочихДоходовРасходовШтрафы);
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СНД
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы04.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы04.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы04.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК СНК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы05
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор) КАК ОбъектыГрафы4
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы4.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы4.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы05.СНК, 0) КАК СНК
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы05 КАК ВТ_ДанныеРасчетовГрафы05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ДО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотДт, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа06_ДО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ДО.СуммаОборотДт) КАК СуммаОборотДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_02) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа06_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ КАК ВТ_ДанныеРасчетовГрафы06_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа06_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_КО КАК ВТ_ДанныеРасчетовГрафы06_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы07_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_01) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа07_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы07_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ КАК ВТ_ДанныеРасчетовГрафы07_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы0406.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы0406.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа08_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_ОБ
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				СчетДт = &Счет_91_02,
	               |				&СубконтоПрочиеДоходыРасходы,
	               |				СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ОбъектыГрафы0406.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |			И ОбъектыГрафы0406.Договор = ХозрасчетныйОборотыДтКт.СубконтоКт2
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа08_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы09
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы09.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы10
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы09.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы09.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09) КАК ОбъектыГрафы0809
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы0809.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы0809.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(СвернутыеДанные.ДО, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы10.Счет КАК Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт КАК ДО
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы10 КАК ВТ_ДанныеРасчетовГрафы10
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы10.Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт) КАК СвернутыеДанные
	               |		ПО ВТ_СчетаРезервов.Счет = СвернутыеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы12
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СКД
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы12.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы12.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы12.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК СКК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы13
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор) КАК ОбъектыГрафы12
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы12.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы12.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы13.СКК, 0) КАК СКК
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы13 КАК ВТ_ДанныеРасчетовГрафы13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы13.Счет";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.СНД
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.СНК
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ДО.Счет,
	               |	ВТ_Графа06_ДО.ДО
	               |ИЗ
	               |	ВТ_Графа06_ДО КАК ВТ_Графа06_ДО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ОБ.СчетДт,
	               |	ВТ_Графа06_ОБ.СчетКт,
	               |	ВТ_Графа06_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа06_ОБ КАК ВТ_Графа06_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_КО.Счет,
	               |	ВТ_Графа06_КО.КО
	               |ИЗ
	               |	ВТ_Графа06_КО КАК ВТ_Графа06_КО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07_ОБ.СчетДт,
	               |	ВТ_Графа07_ОБ.СчетКт,
	               |	ВТ_Графа07_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа07_ОБ КАК ВТ_Графа07_ОБ";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_КО.Счет,
	               |	ВТ_Графа08_КО.КО
	               |ИЗ
	               |	ВТ_Графа08_КО КАК ВТ_Графа08_КО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_ОБ.СчетДт,
	               |	ВТ_Графа08_ОБ.СчетКт,
	               |	ВТ_Графа08_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа08_ОБ КАК ВТ_Графа08_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.ОБ
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.ДО
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.СКД
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.СКК
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5503и5523(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 6 переход(а|ов) на сервер

	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Авансы выданные";
	СписокСчетовРасчетов = "60.02, 60.22, 60.32";
	СписокСчетовРезервов = "63";
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаРасчетов = Новый ТаблицаЗначений;
	СчетаРасчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРасчетов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРасчетов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	СчетаРезервов = Новый ТаблицаЗначений;
	СчетаРезервов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРезервов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРезервов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	ВидПрочихДоходовРасходовСписание = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности");
	ВидПрочихДоходовРасходовШтрафы   = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", ВидПрочихДоходовРасходовСписание);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходовШтрафы", ВидПрочихДоходовРасходовШтрафы);
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СНД
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы04.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы04.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы04.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК СНК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы05
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор) КАК ОбъектыГрафы4
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы4.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы4.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы05.СНК, 0) КАК СНК
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы05 КАК ВТ_ДанныеРасчетовГрафы05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ДО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотДт, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа06_ДО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ДО.СуммаОборотДт) КАК СуммаОборотДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа06_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_КО КАК ВТ_ДанныеРасчетовГрафы06_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы0406.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы0406.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа08_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_ОБ
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				СчетДт = &Счет_91_02,
	               |				&СубконтоПрочиеДоходыРасходы,
	               |				СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ОбъектыГрафы0406.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |			И ОбъектыГрафы0406.Договор = ХозрасчетныйОборотыДтКт.СубконтоКт2
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа08_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы09
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы09.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы10
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы09.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы09.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09) КАК ОбъектыГрафы0809
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы0809.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы0809.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(СвернутыеДанные.ДО, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы10.Счет КАК Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт КАК ДО
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы10 КАК ВТ_ДанныеРасчетовГрафы10
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы10.Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт) КАК СвернутыеДанные
	               |		ПО ВТ_СчетаРезервов.Счет = СвернутыеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы12
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СКД
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы12.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы12.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы12.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК СКК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы13
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор) КАК ОбъектыГрафы12
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы12.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы12.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы13.СКК, 0) КАК СКК
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы13 КАК ВТ_ДанныеРасчетовГрафы13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы13.Счет";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.СНД
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.СНК
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ДО.Счет,
	               |	ВТ_Графа06_ДО.ДО
	               |ИЗ
	               |	ВТ_Графа06_ДО КАК ВТ_Графа06_ДО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_КО.Счет,
	               |	ВТ_Графа06_КО.КО
	               |ИЗ
	               |	ВТ_Графа06_КО КАК ВТ_Графа06_КО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_КО.Счет,
	               |	ВТ_Графа08_КО.КО
	               |ИЗ
	               |	ВТ_Графа08_КО КАК ВТ_Графа08_КО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_ОБ.СчетДт,
	               |	ВТ_Графа08_ОБ.СчетКт,
	               |	ВТ_Графа08_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа08_ОБ КАК ВТ_Графа08_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.ОБ
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.ДО
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.СКД
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.СКК
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5504и5524(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 6 переход(а|ов) на сервер

	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Прочая";
	СписокСчетовРасчетов = "76.05, 76.25, 76.35, 76.09, 76.09, 76.29, 76.39";
	СписокСчетовРезервов = "63";
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаРасчетов = Новый ТаблицаЗначений;
	СчетаРасчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРасчетов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРасчетов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	СчетаРезервов = Новый ТаблицаЗначений;
	СчетаРезервов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРезервов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРезервов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	ВидПрочихДоходовРасходовСписание = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности");
	ВидПрочихДоходовРасходовШтрафы   = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", ВидПрочихДоходовРасходовСписание);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходовШтрафы", ВидПрочихДоходовРасходовШтрафы);
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СНД
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы04.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы04.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы04.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК СНК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы05
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор) КАК ОбъектыГрафы4
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы4.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы4.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы05.СНК, 0) КАК СНК
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы05 КАК ВТ_ДанныеРасчетовГрафы05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ДО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотДт, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа06_ДО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ДО.СуммаОборотДт) КАК СуммаОборотДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа06_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_КО КАК ВТ_ДанныеРасчетовГрафы06_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы0406.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы0406.Договор
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа08_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_ОБ
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				СчетДт = &Счет_91_02,
	               |				&СубконтоПрочиеДоходыРасходы,
	               |				СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ОбъектыГрафы0406.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |			И ОбъектыГрафы0406.Договор = ХозрасчетныйОборотыДтКт.СубконтоКт2
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа08_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы09
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты > &КороткийСрок
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы09.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы10
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы09.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы09.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09) КАК ОбъектыГрафы0809
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы0809.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы0809.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(СвернутыеДанные.ДО, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы10.Счет КАК Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт КАК ДО
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы10 КАК ВТ_ДанныеРасчетовГрафы10
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы10.Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт) КАК СвернутыеДанные
	               |		ПО ВТ_СчетаРезервов.Счет = СвернутыеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы12
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты
	               |	И ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты > &КороткийСрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СКД
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы12.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы12.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы12.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК СКК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы13
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор) КАК ОбъектыГрафы12
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы12.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы12.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы13.СКК, 0) КАК СКК
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы13 КАК ВТ_ДанныеРасчетовГрафы13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы13.Счет";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.СНД
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.СНК
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ДО.Счет,
	               |	ВТ_Графа06_ДО.ДО
	               |ИЗ
	               |	ВТ_Графа06_ДО КАК ВТ_Графа06_ДО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_КО.Счет,
	               |	ВТ_Графа06_КО.КО
	               |ИЗ
	               |	ВТ_Графа06_КО КАК ВТ_Графа06_КО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_КО.Счет,
	               |	ВТ_Графа08_КО.КО
	               |ИЗ
	               |	ВТ_Графа08_КО КАК ВТ_Графа08_КО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_ОБ.СчетДт,
	               |	ВТ_Графа08_ОБ.СчетКт,
	               |	ВТ_Графа08_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа08_ОБ КАК ВТ_Графа08_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.ОБ
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.ДО
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.СКД
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.СКК
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5510и5530(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

	
	Если НомерСтроки = "5510" Тогда
		НомерСтрокиМакет = "5511";
	ИначеЕсли НомерСтроки = "5530" Тогда
		НомерСтрокиМакет = "5531";
	Иначе
		ВызватьИсключение "Вызов функции ЗаполнитьАвтоПояснения5Строки5510и5530() с неверным параметром";
	КонецЕсли;
	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Прочая";
	
	ОсновнойСписокСчетов = "62.01, 62.21, 62.31, 76.06, 76.26, 76.36, 60.02, 60.22, 60.32,
	                       |68.01, 68.02, 68.03, 68.04.1, 68.07, 68.08, 68.09, 68.10, 68.11, 68.12, 68.22,
	                       |69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2, 69.11, 69.12, 69.13,
	                       |71.01, 71.21, 73.01, 73.02, 73.03, 75.01,
	                       |76.01.1, 76.01.2, 76.01.9, 76.21, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35,
	                       |76.09, 76.29, 76.39, 76.41, 76.АВ, 76.НА, 76.ОТ";
	СписокСчетовРезервов = "63";
	СписокСчетовСписания = "71.01, 71.21, 73.01, 73.02, 73.03, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39";
	
	СчетаПоВидамПлатежей = ПолучитьМассивСчетовИзСписка("68.01, 68.02, 68.03, 68.07, 68.08, 68.09, 68.11, 68.12,
	                       |69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2, 69.11, 69.12");
	СубконтоПоВидамПлатежей = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	
	СчетаПоВидамПлатежейУровням = ПолучитьМассивСчетовИзСписка("68.04.1, 68.10");
	СубконтоПоВидамПлатежейУровням = Новый Массив;
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	
	СчетаПоРаботникам = ПолучитьМассивСчетовИзСписка("71.01, 71.21");
	СубконтоПоРаботникам = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	СчетаПоКонтрагентам = ПолучитьМассивСчетовИзСписка("76.01.2, 76.01.9, 76.41");
	СубконтоПоКонтрагентам = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	
	СписокСчетовПоКонтрагентамДоговорам = "62.01, 62.21, 62.31, 76.06, 76.26, 76.36, 60.02, 60.22, 60.32,
	                                      |76.01.1, 76.21, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39, 76.НА";
	СчетаПоКонтрагентамДоговорам = ПолучитьМассивСчетовИзСписка(СписокСчетовПоКонтрагентамДоговорам);
	СубконтоПоКонтрагентамДоговорам = Новый Массив;
	СубконтоПоКонтрагентамДоговорам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоПоКонтрагентамДоговорам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаБезРазвертки = ПолучитьМассивСчетовИзСписка("68.22, 69.13, 73.01, 73.02, 73.03, 75.01, 76.АВ, 76.ОТ");
	
	СчетаСписанияБезРазвертки = ПолучитьМассивСчетовИзСписка("71.01, 71.21, 73.01, 73.02, 73.03");
	СчетаСписанияПоКонтрагентамДоговорам = ПолучитьМассивСчетовИзСписка("76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаСписания.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаСписания
	               |ИЗ
	               |	&СчетаСписания КАК СчетаСписания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоВидамПлатежей
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежей), &СубконтоПоВидамПлатежей, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК УровеньБюджета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоВидамПлатежейУровням
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежейУровням), &СубконтоПоВидамПлатежейУровням, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Работник,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоРаботникам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоРаботникам), &СубконтоПоРаботникам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоКонтрагентам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентам), &СубконтоПоКонтрагентам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД
	               |ПОМЕСТИТЬ ВТ_Данные04_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаБезРазвертки), , Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные04_ПоВидамПлатежей.Счет КАК Счет,
	               |			ВТ_Данные04_ПоВидамПлатежей.СНДР КАК Значение
	               |		ИЗ
	               |			ВТ_Данные04_ПоВидамПлатежей КАК ВТ_Данные04_ПоВидамПлатежей
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоВидамПлатежейУровням.Счет,
	               |			ВТ_Данные04_ПоВидамПлатежейУровням.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоВидамПлатежейУровням КАК ВТ_Данные04_ПоВидамПлатежейУровням
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоРаботникам.Счет,
	               |			ВТ_Данные04_ПоРаботникам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоРаботникам КАК ВТ_Данные04_ПоРаботникам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентам.Счет,
	               |			ВТ_Данные04_ПоКонтрагентам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентам КАК ВТ_Данные04_ПоКонтрагентам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам КАК ВТ_Данные04_ПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_БезРазвертки.Счет,
	               |			ВТ_Данные04_БезРазвертки.СНД
	               |		ИЗ
	               |			ВТ_Данные04_БезРазвертки КАК ВТ_Данные04_БезРазвертки) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК
	               |ПОМЕСТИТЬ ВТ_Данные05
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам КАК ВТ_Данные04_ПоКонтрагентамДоговорам
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Договор) КАК ОбъектыГрафы04
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы04.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы04.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_Данные05.СНК, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные05 КАК ВТ_Данные05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоВидамПлатежей
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежей), &СубконтоПоВидамПлатежей, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК УровеньБюджета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоВидамПлатежейУровням
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежейУровням), &СубконтоПоВидамПлатежейУровням, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Работник,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоРаботникам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоРаботникам), &СубконтоПоРаботникам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоКонтрагентам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентам), &СубконтоПоКонтрагентам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД
	               |ПОМЕСТИТЬ ВТ_Данные12_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаБезРазвертки), , Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные12_ПоВидамПлатежей.Счет КАК Счет,
	               |			ВТ_Данные12_ПоВидамПлатежей.СКДР КАК Значение
	               |		ИЗ
	               |			ВТ_Данные12_ПоВидамПлатежей КАК ВТ_Данные12_ПоВидамПлатежей
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоВидамПлатежейУровням.Счет,
	               |			ВТ_Данные12_ПоВидамПлатежейУровням.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоВидамПлатежейУровням КАК ВТ_Данные12_ПоВидамПлатежейУровням
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоРаботникам.Счет,
	               |			ВТ_Данные12_ПоРаботникам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоРаботникам КАК ВТ_Данные12_ПоРаботникам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентам.Счет,
	               |			ВТ_Данные12_ПоКонтрагентам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентам КАК ВТ_Данные12_ПоКонтрагентам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам КАК ВТ_Данные12_ПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_БезРазвертки.Счет,
	               |			ВТ_Данные12_БезРазвертки.СКД
	               |		ИЗ
	               |			ВТ_Данные12_БезРазвертки КАК ВТ_Данные12_БезРазвертки) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |ПОМЕСТИТЬ ВТ_Данные13
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам КАК ВТ_Данные12_ПоКонтрагентамДоговорам
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Договор) КАК ОбъектыГрафы12
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы12.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы12.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_Данные13.СКК, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные13 КАК ВТ_Данные13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные13.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные09_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В (&СчетаСписанияБезРазвертки),
	               |			,
	               |			Организация = &Организация
	               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПДРСписание) КАК ХозрасчетныйОборотыДтКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные09_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В (&СчетаСписанияПоКонтрагентамДоговорам),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация
	               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПДРСписание) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ОбъединенныеДанные.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаСписания.Счет КАК СчетКт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.ОБ, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаСписания КАК ВТ_СчетаСписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные09_БезРазвертки.СчетДт КАК СчетДт,
	               |			ВТ_Данные09_БезРазвертки.СчетКт КАК СчетКт,
	               |			ВТ_Данные09_БезРазвертки.ОБ КАК ОБ
	               |		ИЗ
	               |			ВТ_Данные09_БезРазвертки КАК ВТ_Данные09_БезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.СчетДт,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.СчетКт,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.ОБ
	               |		ИЗ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам КАК ВТ_Данные09_ПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаСписания.Счет = ОбъединенныеДанные.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные07_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В (&СчетаСписанияБезРазвертки),
	               |			,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация
	               |				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидПДРШтрафыПроценты)) КАК ХозрасчетныйОборотыДтКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные07_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В (&СчетаСписанияПоКонтрагентамДоговорам),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация
	               |				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидПДРШтрафыПроценты)) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаСписания.Счет КАК СчетДт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.СчетДт, &Счет_91_01) КАК СчетКт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.ОБ, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа07
	               |ИЗ
	               |	ВТ_СчетаСписания КАК ВТ_СчетаСписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные07_БезРазвертки.СчетДт КАК СчетДт,
	               |			ВТ_Данные07_БезРазвертки.СчетКт КАК СчетКт,
	               |			ВТ_Данные07_БезРазвертки.ОБ КАК ОБ
	               |		ИЗ
	               |			ВТ_Данные07_БезРазвертки КАК ВТ_Данные07_БезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.СчетДт,
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.СчетКт,
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.ОБ
	               |		ИЗ
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам КАК ВТ_Данные07_ПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаСписания.Счет = ОбъединенныеДанные.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО
	               |ПОМЕСТИТЬ ВТ_Данные08_КОБезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов)
	               |				И (НЕ Счет В (&СчетаПоКонтрагентамДоговорам)),
	               |			,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО
	               |ПОМЕСТИТЬ ВТ_Данные08_КОПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа08
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные08_КОБезРазвертки.Счет КАК Счет,
	               |			ВТ_Данные08_КОБезРазвертки.КО КАК Значение
	               |		ИЗ
	               |			ВТ_Данные08_КОБезРазвертки КАК ВТ_Данные08_КОБезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.КО
	               |		ИЗ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам КАК ВТ_Данные08_КОПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные10
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам КАК ВТ_Данные08_КОПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.Договор
	               |		ИЗ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам КАК ВТ_Данные09_ПоКонтрагентамДоговорам) КАК ОбъектыГраф0809
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГраф0809.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГраф0809.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет КАК Счет,
	               |	ЕСТЬNULL(ВТ_Данные10.ДО, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные10 КАК ВТ_Данные10
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные10.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные06_ДОБезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов)
	               |				И (НЕ Счет В (&СчетаПоКонтрагентамДоговорам)),
	               |			,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные06_ДОПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа06
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные06_ДОБезРазвертки.Счет КАК Счет,
	               |			ВТ_Данные06_ДОБезРазвертки.ДО КАК Значение
	               |		ИЗ
	               |			ВТ_Данные06_ДОБезРазвертки КАК ВТ_Данные06_ДОБезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам.ДО
	               |		ИЗ
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам КАК ВТ_Данные06_ДОПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет";
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьТаблицуСчетовИзСписка(ОсновнойСписокСчетов));
	Запрос.УстановитьПараметр("СчетаРезервов", ПолучитьТаблицуСчетовИзСписка(СписокСчетовРезервов));
	Запрос.УстановитьПараметр("СчетаСписания", ПолучитьТаблицуСчетовИзСписка(СписокСчетовСписания));
	
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	ВидПДРШтрафыПроценты = Новый Массив;
	ВидПДРШтрафыПроценты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате"));
	ВидПДРШтрафыПроценты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате"));
	Запрос.УстановитьПараметр("ВидПДРШтрафыПроценты", ВидПДРШтрафыПроценты);
	
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	Запрос.УстановитьПараметр("ВидПДРСписание", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности"));
	
	Запрос.УстановитьПараметр("СчетаСписанияБезРазвертки", СчетаСписанияБезРазвертки);
	Запрос.УстановитьПараметр("СчетаСписанияПоКонтрагентамДоговорам", СчетаСписанияПоКонтрагентамДоговорам);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.УстановитьПараметр("СчетаПоВидамПлатежей", СчетаПоВидамПлатежей);
	Запрос.УстановитьПараметр("СубконтоПоВидамПлатежей", СубконтоПоВидамПлатежей);
	
	Запрос.УстановитьПараметр("СчетаПоВидамПлатежейУровням", СчетаПоВидамПлатежейУровням);
	Запрос.УстановитьПараметр("СубконтоПоВидамПлатежейУровням", СубконтоПоВидамПлатежейУровням);
	
	Запрос.УстановитьПараметр("СчетаПоРаботникам", СчетаПоРаботникам);
	Запрос.УстановитьПараметр("СубконтоПоРаботникам", СубконтоПоРаботникам);
	
	Запрос.УстановитьПараметр("СчетаПоКонтрагентам", СчетаПоКонтрагентам);
	Запрос.УстановитьПараметр("СубконтоПоКонтрагентам", СубконтоПоКонтрагентам);
	
	Запрос.УстановитьПараметр("СчетаПоКонтрагентамДоговорам", СчетаПоКонтрагентамДоговорам);
	Запрос.УстановитьПараметр("СубконтоПоКонтрагентамДоговорам", СубконтоПоКонтрагентамДоговорам);
	
	Запрос.УстановитьПараметр("СчетаБезРазвертки", СчетаБезРазвертки);
	
	Запрос.Выполнить();
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ИмяОтчета", "Пояснения5");
	ПараметрыРасшифровки.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыРасшифровки.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.Значение
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		Если СчетаПоВидамПлатежей.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежей + """";
		ИначеЕсли СчетаПоВидамПлатежейУровням.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежейУровням[0] + """, """  + СубконтоПоВидамПлатежейУровням[1] + """";
		ИначеЕсли СчетаПоРаботникам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоРаботникам + """";
		ИначеЕсли СчетаПоКонтрагентам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентам + """";
		ИначеЕсли СчетаПоКонтрагентамДоговорам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		Иначе
			НаименованиеСоставляющей = "!СНД";
		КонецЕсли;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.Значение
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.Значение
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		Если СчетаПоВидамПлатежей.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежей + """";
		ИначеЕсли СчетаПоВидамПлатежейУровням.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежейУровням[0] + """, """  + СубконтоПоВидамПлатежейУровням[1] + """";
		ИначеЕсли СчетаПоРаботникам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоРаботникам + """";
		ИначеЕсли СчетаПоКонтрагентам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентам + """";
		ИначеЕсли СчетаПоКонтрагентамДоговорам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		Иначе
			НаименованиеСоставляющей = "!СКД";
		КонецЕсли;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.Значение
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.Значение
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код + " в дебет счета " + СчетСоставляющейДт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07.СчетДт,
	               |	ВТ_Графа07.СчетКт,
	               |	ВТ_Графа07.Значение
	               |ИЗ
	               |	ВТ_Графа07 КАК ВТ_Графа07";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ВидПДРШтрафыПроценты[0] + """"
		                         + " и """ + ВидПДРШтрафыПроценты[1] + """"
		                         + " в дебет счета " + СчетСоставляющейДт.Код;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08.Счет,
	               |	ВТ_Графа08.Значение
	               |ИЗ
	               |	ВТ_Графа08 КАК ВТ_Графа08";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!КО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.Значение
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код + " в дебет счета " + СчетСоставляющейДт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.Значение
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "!ДО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06.Счет,
	               |	ВТ_Графа06.Значение
	               |ИЗ
	               |	ВТ_Графа06 КАК ВТ_Графа06";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!ДО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07.СчетДт,
	               |	ВТ_Графа07.СчетКт,
	               |	ВТ_Графа07.Значение
	               |ИЗ
	               |	ВТ_Графа07 КАК ВТ_Графа07";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ВидПДРШтрафыПроценты[0] + """"
		                         + " и """ + ВидПДРШтрафыПроценты[1] + """"
		                         + " в дебет счета " + СчетСоставляющейДт.Код;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08.Счет,
	               |	ВТ_Графа08.Значение
	               |ИЗ
	               |	ВТ_Графа08 КАК ВТ_Графа08";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!КО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5511и5531(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 6 переход(а|ов) на сервер

	
	Если НомерСтроки = "5511" Тогда
		НомерСтрокиМакет = "5512";
	ИначеЕсли НомерСтроки = "5531" Тогда
		НомерСтрокиМакет = "5532";
	Иначе
		ВызватьИсключение "Вызов функции ЗаполнитьАвтоПояснения5Строки5511и5531() с неверным параметром";
	КонецЕсли;
	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Расчеты с покупателями и заказчиками";
	СписокСчетовРасчетов = "62.01, 62.21, 62.31, 76.06, 76.26, 76.36";
	СписокСчетовРезервов = "63";
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаРасчетов = Новый ТаблицаЗначений;
	СчетаРасчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРасчетов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРасчетов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	СчетаРезервов = Новый ТаблицаЗначений;
	СчетаРезервов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРезервов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРезервов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	ВидПрочихДоходовРасходовСписание = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности");
	ВидПрочихДоходовРасходовШтрафы   = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", ВидПрочихДоходовРасходовСписание);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходовШтрафы", ВидПрочихДоходовРасходовШтрафы);
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СНД
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы04.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы04.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы04.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК СНК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы05
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор) КАК ОбъектыГрафы4
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы4.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы4.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы05.СНК, 0) КАК СНК
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы05 КАК ВТ_ДанныеРасчетовГрафы05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ДО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотДт, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа06_ДО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ДО.СуммаОборотДт) КАК СуммаОборотДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_02) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа06_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ КАК ВТ_ДанныеРасчетовГрафы06_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа06_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_КО КАК ВТ_ДанныеРасчетовГрафы06_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы07_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_01) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа07_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы07_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ КАК ВТ_ДанныеРасчетовГрафы07_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы0406.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы0406.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа08_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_ОБ
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				СчетДт = &Счет_91_02,
	               |				&СубконтоПрочиеДоходыРасходы,
	               |				СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ОбъектыГрафы0406.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |			И ОбъектыГрафы0406.Договор = ХозрасчетныйОборотыДтКт.СубконтоКт2
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа08_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы09
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы09.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы10
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы09.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы09.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09) КАК ОбъектыГрафы0809
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы0809.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы0809.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(СвернутыеДанные.ДО, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы10.Счет КАК Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт КАК ДО
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы10 КАК ВТ_ДанныеРасчетовГрафы10
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы10.Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт) КАК СвернутыеДанные
	               |		ПО ВТ_СчетаРезервов.Счет = СвернутыеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы12
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СКД
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы12.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы12.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы12.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК СКК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы13
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор) КАК ОбъектыГрафы12
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы12.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы12.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы13.СКК, 0) КАК СКК
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы13 КАК ВТ_ДанныеРасчетовГрафы13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы13.Счет";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.СНД
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.СНК
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ДО.Счет,
	               |	ВТ_Графа06_ДО.ДО
	               |ИЗ
	               |	ВТ_Графа06_ДО КАК ВТ_Графа06_ДО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ОБ.СчетДт,
	               |	ВТ_Графа06_ОБ.СчетКт,
	               |	ВТ_Графа06_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа06_ОБ КАК ВТ_Графа06_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_КО.Счет,
	               |	ВТ_Графа06_КО.КО
	               |ИЗ
	               |	ВТ_Графа06_КО КАК ВТ_Графа06_КО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07_ОБ.СчетДт,
	               |	ВТ_Графа07_ОБ.СчетКт,
	               |	ВТ_Графа07_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа07_ОБ КАК ВТ_Графа07_ОБ";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_КО.Счет,
	               |	ВТ_Графа08_КО.КО
	               |ИЗ
	               |	ВТ_Графа08_КО КАК ВТ_Графа08_КО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_ОБ.СчетДт,
	               |	ВТ_Графа08_ОБ.СчетКт,
	               |	ВТ_Графа08_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа08_ОБ КАК ВТ_Графа08_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.ОБ
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.ДО
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.СКД
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.СКК
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5512и5532(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 6 переход(а|ов) на сервер

	
	Если НомерСтроки = "5512" Тогда
		НомерСтрокиМакет = "5513";
	ИначеЕсли НомерСтроки = "5532" Тогда
		НомерСтрокиМакет = "5533";
	Иначе
		ВызватьИсключение "Вызов функции ЗаполнитьАвтоПояснения5Строки5512и5532() с неверным параметром";
	КонецЕсли;
	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Авансы выданные";
	СписокСчетовРасчетов = "60.02, 60.22, 60.32";
	СписокСчетовРезервов = "63";
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаРасчетов = Новый ТаблицаЗначений;
	СчетаРасчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРасчетов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРасчетов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	СчетаРезервов = Новый ТаблицаЗначений;
	СчетаРезервов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	МассивКодовСчетов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокСчетовРезервов);
	Для Каждого КодСчета Из МассивКодовСчетов Цикл
		НоваяСтрока = СчетаРезервов.Добавить();
		НоваяСтрока.Счет = Счет(СокрЛП(КодСчета));
	КонецЦикла;
	
	ВидПрочихДоходовРасходовСписание = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности");
	ВидПрочихДоходовРасходовШтрафы   = ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходов", ВидПрочихДоходовРасходовСписание);
	Запрос.УстановитьПараметр("ВидПрочихДоходовИРасходовШтрафы", ВидПрочихДоходовРасходовШтрафы);
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы04
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СНД
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы04.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы04.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы04.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК СНК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы05
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор) КАК ОбъектыГрафы4
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы4.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы4.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы05.СНК, 0) КАК СНК
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы05 КАК ВТ_ДанныеРасчетовГрафы05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ДО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотДт, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа06_ДО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ДО.СуммаОборотДт) КАК СуммаОборотДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_02) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа06_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ КАК ВТ_ДанныеРасчетовГрафы06_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы06_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы06_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа06_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы06_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_КО КАК ВТ_ДанныеРасчетовГрафы06_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы06_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы07_ОБ
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы06
	               |		ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ОбъектыГрафы06.Контрагент
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ОбъектыГрафы06.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоКт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходовШтрафы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетКт, &Счет_91_01) КАК СчетКт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетДт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа07_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы07_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ КАК ВТ_ДанныеРасчетовГрафы07_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы07_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_КО
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |			ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы0406.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы0406.Договор
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборотКт, 0) КАК КО
	               |ПОМЕСТИТЬ ВТ_Графа08_КО
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_КО.СуммаОборотКт) КАК СуммаОборотКт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_КО.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы08_ОБ
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВТ_ДанныеРасчетовГрафы04.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы04.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы04 КАК ВТ_ДанныеРасчетовГрафы04
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы06_ДО.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы06_ДО КАК ВТ_ДанныеРасчетовГрафы06_ДО) КАК ОбъектыГрафы0406
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				СчетДт = &Счет_91_02,
	               |				&СубконтоПрочиеДоходыРасходы,
	               |				СчетКт В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ОбъектыГрафы0406.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	               |			И ОбъектыГрафы0406.Договор = ХозрасчетныйОборотыДтКт.СубконтоКт2
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа08_ОБ
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы08_ОБ.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы08_ОБ.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы09
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |	И ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПрочихДоходовИРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СвернутыеРезультаты.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаРасчетов.Счет КАК СчетКт,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаОборот, 0) КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт КАК СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт КАК СчетКт,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы09.СуммаОборот) КАК СуммаОборот
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы09.СчетДт,
	               |			ВТ_ДанныеРасчетовГрафы09.СчетКт) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы10
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_КО КАК ВТ_ДанныеРасчетовГрафы08_КО
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_КО.Договор
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы08_ОБ КАК ВТ_ДанныеРасчетовГрафы08_ОБ
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы09.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы09.Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы09 КАК ВТ_ДанныеРасчетовГрафы09) КАК ОбъектыГрафы0809
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы0809.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы0809.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(СвернутыеДанные.ДО, 0) КАК ДО
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы10.Счет КАК Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт КАК ДО
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы10 КАК ВТ_ДанныеРасчетовГрафы10
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы10.Счет,
	               |			ВТ_ДанныеРасчетовГрафы10.СуммаОборотДт) КАК СвернутыеДанные
	               |		ПО ВТ_СчетаРезервов.Счет = СвернутыеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы12
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Движения,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРасчетов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов),
	               |			&СубконтоКонтрагентыДоговоры,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(СвернутыеРезультаты.СуммаНачальныйРазвернутыйОстатокДт, 0) КАК СКД
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_ДанныеРасчетовГрафы12.Счет КАК Счет,
	               |			СУММА(ВТ_ДанныеРасчетовГрафы12.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт
	               |		ИЗ
	               |			ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_ДанныеРасчетовГрафы12.Счет) КАК СвернутыеРезультаты
	               |		ПО ВТ_СчетаРасчетов.Счет = СвернутыеРезультаты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК СКК
	               |ПОМЕСТИТЬ ВТ_ДанныеРасчетовГрафы13
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент КАК Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор КАК Договор
	               |	ИЗ
	               |		ВТ_ДанныеРасчетовГрафы12 КАК ВТ_ДанныеРасчетовГрафы12
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_ДанныеРасчетовГрафы12.Контрагент,
	               |		ВТ_ДанныеРасчетовГрафы12.Договор) КАК ОбъектыГрафы12
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				Период,
	               |				Движения,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРезервов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |				&СубконтоКонтрагентыДоговоры,
	               |				Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ПО ОбъектыГрафы12.Контрагент = ХозрасчетныйОстаткиИОбороты.Субконто1
	               |			И ОбъектыГрафы12.Договор = ХозрасчетныйОстаткиИОбороты.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_ДанныеРасчетовГрафы13.СКК, 0) КАК СКК
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчетовГрафы13 КАК ВТ_ДанныеРасчетовГрафы13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_ДанныеРасчетовГрафы13.Счет";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.СНД
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.СНК
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СНК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ДО.Счет,
	               |	ВТ_Графа06_ДО.ДО
	               |ИЗ
	               |	ВТ_Графа06_ДО КАК ВТ_Графа06_ДО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_ОБ.СчетДт,
	               |	ВТ_Графа06_ОБ.СчетКт,
	               |	ВТ_Графа06_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа06_ОБ КАК ВТ_Графа06_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06_КО.Счет,
	               |	ВТ_Графа06_КО.КО
	               |ИЗ
	               |	ВТ_Графа06_КО КАК ВТ_Графа06_КО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07_ОБ.СчетДт,
	               |	ВТ_Графа07_ОБ.СчетКт,
	               |	ВТ_Графа07_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа07_ОБ КАК ВТ_Графа07_ОБ";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовШтрафы) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_КО.Счет,
	               |	ВТ_Графа08_КО.КО
	               |ИЗ
	               |	ВТ_Графа08_КО КАК ВТ_Графа08_КО";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.КО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!КО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08_ОБ.СчетДт,
	               |	ВТ_Графа08_ОБ.СчетКт,
	               |	ВТ_Графа08_ОБ.ОБ
	               |ИЗ
	               |	ВТ_Графа08_ОБ КАК ВТ_Графа08_ОБ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСлагаемого, -ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.ОБ
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ОБ;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Обороты с кредита счета " + Выборка.СчетКт.Код + " в дебет счета " + Выборка.СчетДт.Код 
		                       + " /объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(ВидПрочихДоходовРасходовСписание) + """/";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.СчетДт, Выборка.СчетКт, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.ДО
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.ДО;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "!ДО";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.СКД
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКД;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по дебету счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.СКК
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.СКК;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		НаименованиеСлагаемого = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто ""Контрагенты"", ""Договоры""";
		РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСлагаемого, ЗначениеСоставляющей, Выборка.Счет, , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения5");
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения5Строки5513и5533(НомерСтроки, ЗаголовкиГраф, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

	
	Если НомерСтроки = "5513" Тогда
		НомерСтрокиМакет = "5514";
	ИначеЕсли НомерСтроки = "5533" Тогда
		НомерСтрокиМакет = "5534";
	Иначе
		ВызватьИсключение "Вызов функции ЗаполнитьАвтоПояснения5Строки5513и5533() с неверным параметром";
	КонецЕсли;
	
	ИмяРаздела = "Пояснения5";
	НаименованиеСтроки = "Прочая";
	
	ОсновнойСписокСчетов = "68.01, 68.02, 68.03, 68.04.1, 68.07, 68.08, 68.09, 68.10, 68.11, 68.12, 68.22,
	                       |69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2, 69.11, 69.12, 69.13,
	                       |71.01, 71.21, 73.01, 73.02, 73.03, 75.01,
	                       |76.01.1, 76.01.2, 76.01.9, 76.21, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35,
	                       |76.09, 76.29, 76.39, 76.41, 76.АВ, 76.НА, 76.ОТ";
	СписокСчетовРезервов = "63";
	СписокСчетовСписания = "71.01, 71.21, 73.01, 73.02, 73.03, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39";
	
	СчетаПоВидамПлатежей = ПолучитьМассивСчетовИзСписка("68.01, 68.02, 68.03, 68.07, 68.08, 68.09, 68.11, 68.12,
	                       |69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2, 69.11, 69.12");
	СубконтоПоВидамПлатежей = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	
	СчетаПоВидамПлатежейУровням = ПолучитьМассивСчетовИзСписка("68.04.1, 68.10");
	СубконтоПоВидамПлатежейУровням = Новый Массив;
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоПоВидамПлатежейУровням.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	
	СчетаПоРаботникам = ПолучитьМассивСчетовИзСписка("71.01, 71.21");
	СубконтоПоРаботникам = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	СчетаПоКонтрагентам = ПолучитьМассивСчетовИзСписка("76.01.2, 76.01.9, 76.41");
	СубконтоПоКонтрагентам = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	
	СчетаПоКонтрагентамДоговорам = ПолучитьМассивСчетовИзСписка("76.01.1, 76.21, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39, 76.НА");
	СубконтоПоКонтрагентамДоговорам = Новый Массив;
	СубконтоПоКонтрагентамДоговорам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоПоКонтрагентамДоговорам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СчетаБезРазвертки = ПолучитьМассивСчетовИзСписка("68.22, 69.13, 73.01, 73.02, 73.03, 75.01, 76.АВ, 76.ОТ");
	
	СчетаСписанияБезРазвертки = ПолучитьМассивСчетовИзСписка("71.01, 71.21, 73.01, 73.02, 73.03");
	СчетаСписанияПоКонтрагентамДоговорам = ПолучитьМассивСчетовИзСписка("76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаРасчетов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРасчетов
	               |ИЗ
	               |	&СчетаРасчетов КАК СчетаРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаРезервов.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаРезервов
	               |ИЗ
	               |	&СчетаРезервов КАК СчетаРезервов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаСписания.Счет
	               |ПОМЕСТИТЬ ВТ_СчетаСписания
	               |ИЗ
	               |	&СчетаСписания КАК СчетаСписания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоВидамПлатежей
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежей), &СубконтоПоВидамПлатежей, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК УровеньБюджета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоВидамПлатежейУровням
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежейУровням), &СубконтоПоВидамПлатежейУровням, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Работник,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоРаботникам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоРаботникам), &СубконтоПоРаботникам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоКонтрагентам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентам), &СубконтоПоКонтрагентам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СНДР
	               |ПОМЕСТИТЬ ВТ_Данные04_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД
	               |ПОМЕСТИТЬ ВТ_Данные04_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаБезРазвертки), , Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа04
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные04_ПоВидамПлатежей.Счет КАК Счет,
	               |			ВТ_Данные04_ПоВидамПлатежей.СНДР КАК Значение
	               |		ИЗ
	               |			ВТ_Данные04_ПоВидамПлатежей КАК ВТ_Данные04_ПоВидамПлатежей
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоВидамПлатежейУровням.Счет,
	               |			ВТ_Данные04_ПоВидамПлатежейУровням.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоВидамПлатежейУровням КАК ВТ_Данные04_ПоВидамПлатежейУровням
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоРаботникам.Счет,
	               |			ВТ_Данные04_ПоРаботникам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоРаботникам КАК ВТ_Данные04_ПоРаботникам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентам.Счет,
	               |			ВТ_Данные04_ПоКонтрагентам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентам КАК ВТ_Данные04_ПоКонтрагентам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.СНДР
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам КАК ВТ_Данные04_ПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные04_БезРазвертки.Счет,
	               |			ВТ_Данные04_БезРазвертки.СНД
	               |		ИЗ
	               |			ВТ_Данные04_БезРазвертки КАК ВТ_Данные04_БезРазвертки) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК
	               |ПОМЕСТИТЬ ВТ_Данные05
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам КАК ВТ_Данные04_ПоКонтрагентамДоговорам
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные04_ПоКонтрагентамДоговорам.Договор) КАК ОбъектыГрафы04
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы04.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы04.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_Данные05.СНК, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа05
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные05 КАК ВТ_Данные05
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные05.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоВидамПлатежей
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежей), &СубконтоПоВидамПлатежей, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ВидПлатежа,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК УровеньБюджета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоВидамПлатежейУровням
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоВидамПлатежейУровням), &СубконтоПоВидамПлатежейУровням, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Работник,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоРаботникам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоРаботникам), &СубконтоПоРаботникам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоКонтрагентам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентам), &СубконтоПоКонтрагентам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СКДР
	               |ПОМЕСТИТЬ ВТ_Данные12_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД
	               |ПОМЕСТИТЬ ВТ_Данные12_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаБезРазвертки), , Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа12
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные12_ПоВидамПлатежей.Счет КАК Счет,
	               |			ВТ_Данные12_ПоВидамПлатежей.СКДР КАК Значение
	               |		ИЗ
	               |			ВТ_Данные12_ПоВидамПлатежей КАК ВТ_Данные12_ПоВидамПлатежей
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоВидамПлатежейУровням.Счет,
	               |			ВТ_Данные12_ПоВидамПлатежейУровням.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоВидамПлатежейУровням КАК ВТ_Данные12_ПоВидамПлатежейУровням
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоРаботникам.Счет,
	               |			ВТ_Данные12_ПоРаботникам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоРаботникам КАК ВТ_Данные12_ПоРаботникам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентам.Счет,
	               |			ВТ_Данные12_ПоКонтрагентам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентам КАК ВТ_Данные12_ПоКонтрагентам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.СКДР
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам КАК ВТ_Данные12_ПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные12_БезРазвертки.Счет,
	               |			ВТ_Данные12_БезРазвертки.СКД
	               |		ИЗ
	               |			ВТ_Данные12_БезРазвертки КАК ВТ_Данные12_БезРазвертки) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |ПОМЕСТИТЬ ВТ_Данные13
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам КАК ВТ_Данные12_ПоКонтрагентамДоговорам
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные12_ПоКонтрагентамДоговорам.Договор) КАК ОбъектыГрафы12
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГрафы12.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГрафы12.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет,
	               |	ЕСТЬNULL(ВТ_Данные13.СКК, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа13
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные13 КАК ВТ_Данные13
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные13.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные09_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В (&СчетаСписанияБезРазвертки),
	               |			,
	               |			Организация = &Организация
	               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПДРСписание) КАК ХозрасчетныйОборотыДтКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Договор,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные09_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт = &Счет_91_02,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			СчетКт В (&СчетаСписанияПоКонтрагентамДоговорам),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация
	               |				И СубконтоДт1.ВидПрочихДоходовИРасходов = &ВидПДРСписание) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоКт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ОбъединенныеДанные.СчетДт, &Счет_91_02) КАК СчетДт,
	               |	ВТ_СчетаСписания.Счет КАК СчетКт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.ОБ, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа09
	               |ИЗ
	               |	ВТ_СчетаСписания КАК ВТ_СчетаСписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные09_БезРазвертки.СчетДт КАК СчетДт,
	               |			ВТ_Данные09_БезРазвертки.СчетКт КАК СчетКт,
	               |			ВТ_Данные09_БезРазвертки.ОБ КАК ОБ
	               |		ИЗ
	               |			ВТ_Данные09_БезРазвертки КАК ВТ_Данные09_БезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.СчетДт,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.СчетКт,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.ОБ
	               |		ИЗ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам КАК ВТ_Данные09_ПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаСписания.Счет = ОбъединенныеДанные.СчетКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные07_БезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В (&СчетаСписанияБезРазвертки),
	               |			,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация
	               |				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидПДРШтрафыПроценты)) КАК ХозрасчетныйОборотыДтКт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор,
	               |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК ОБ
	               |ПОМЕСТИТЬ ВТ_Данные07_ПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			СчетДт В (&СчетаСписанияПоКонтрагентамДоговорам),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			СчетКт = &Счет_91_01,
	               |			&СубконтоПрочиеДоходыРасходы,
	               |			Организация = &Организация
	               |				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидПДРШтрафыПроценты)) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаСписания.Счет КАК СчетДт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.СчетДт, &Счет_91_01) КАК СчетКт,
	               |	ЕСТЬNULL(ОбъединенныеДанные.ОБ, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа07
	               |ИЗ
	               |	ВТ_СчетаСписания КАК ВТ_СчетаСписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные07_БезРазвертки.СчетДт КАК СчетДт,
	               |			ВТ_Данные07_БезРазвертки.СчетКт КАК СчетКт,
	               |			ВТ_Данные07_БезРазвертки.ОБ КАК ОБ
	               |		ИЗ
	               |			ВТ_Данные07_БезРазвертки КАК ВТ_Данные07_БезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.СчетДт,
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.СчетКт,
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам.ОБ
	               |		ИЗ
	               |			ВТ_Данные07_ПоКонтрагентамДоговорам КАК ВТ_Данные07_ПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаСписания.Счет = ОбъединенныеДанные.СчетДт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО
	               |ПОМЕСТИТЬ ВТ_Данные08_КОБезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов)
	               |				И (НЕ Счет В (&СчетаПоКонтрагентамДоговорам)),
	               |			,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО
	               |ПОМЕСТИТЬ ВТ_Данные08_КОПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа08
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные08_КОБезРазвертки.Счет КАК Счет,
	               |			ВТ_Данные08_КОБезРазвертки.КО КАК Значение
	               |		ИЗ
	               |			ВТ_Данные08_КОБезРазвертки КАК ВТ_Данные08_КОБезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.КО
	               |		ИЗ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам КАК ВТ_Данные08_КОПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные10
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаРезервов.Счет
	               |				ИЗ
	               |					ВТ_СчетаРезервов КАК ВТ_СчетаРезервов),
	               |			&СубконтоПоКонтрагентамДоговорам,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Контрагент КАК Контрагент,
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам.Договор КАК Договор
	               |		ИЗ
	               |			ВТ_Данные08_КОПоКонтрагентамДоговорам КАК ВТ_Данные08_КОПоКонтрагентамДоговорам
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.Контрагент,
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам.Договор
	               |		ИЗ
	               |			ВТ_Данные09_ПоКонтрагентамДоговорам КАК ВТ_Данные09_ПоКонтрагентамДоговорам) КАК ОбъектыГраф0809
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОбъектыГраф0809.Контрагент
	               |			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ОбъектыГраф0809.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРезервов.Счет КАК Счет,
	               |	ЕСТЬNULL(ВТ_Данные10.ДО, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа10
	               |ИЗ
	               |	ВТ_СчетаРезервов КАК ВТ_СчетаРезервов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные10 КАК ВТ_Данные10
	               |		ПО ВТ_СчетаРезервов.Счет = ВТ_Данные10.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные06_ДОБезРазвертки
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			,
	               |			Счет В
	               |					(ВЫБРАТЬ
	               |						ВТ_СчетаРасчетов.Счет
	               |					ИЗ
	               |						ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов)
	               |				И (НЕ Счет В (&СчетаПоКонтрагентамДоговорам)),
	               |			,
	               |			Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	               |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО
	               |ПОМЕСТИТЬ ВТ_Данные06_ДОПоКонтрагентамДоговорам
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, , Счет В (&СчетаПоКонтрагентамДоговорам), &СубконтоПоКонтрагентамДоговорам, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |ГДЕ
	               |	((НЕ ХозрасчетныйОстаткиИОбороты.Субконто2.УстановленСрокОплаты)
	               |			ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто2.СрокОплаты <= &КороткийСрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СчетаРасчетов.Счет КАК Счет,
	               |	ЕСТЬNULL(ОбъединенныеДанные.Значение, 0) КАК Значение
	               |ПОМЕСТИТЬ ВТ_Графа06
	               |ИЗ
	               |	ВТ_СчетаРасчетов КАК ВТ_СчетаРасчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_Данные06_ДОБезРазвертки.Счет КАК Счет,
	               |			ВТ_Данные06_ДОБезРазвертки.ДО КАК Значение
	               |		ИЗ
	               |			ВТ_Данные06_ДОБезРазвертки КАК ВТ_Данные06_ДОБезРазвертки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам.Счет,
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам.ДО
	               |		ИЗ
	               |			ВТ_Данные06_ДОПоКонтрагентамДоговорам КАК ВТ_Данные06_ДОПоКонтрагентамДоговорам) КАК ОбъединенныеДанные
	               |		ПО ВТ_СчетаРасчетов.Счет = ОбъединенныеДанные.Счет";
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("КороткийСрок", 365);
	
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьТаблицуСчетовИзСписка(ОсновнойСписокСчетов));
	Запрос.УстановитьПараметр("СчетаРезервов", ПолучитьТаблицуСчетовИзСписка(СписокСчетовРезервов));
	Запрос.УстановитьПараметр("СчетаСписания", ПолучитьТаблицуСчетовИзСписка(СписокСчетовСписания));
	
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	ВидПДРШтрафыПроценты = Новый Массив;
	ВидПДРШтрафыПроценты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате"));
	ВидПДРШтрафыПроценты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате"));
	Запрос.УстановитьПараметр("ВидПДРШтрафыПроценты", ВидПДРШтрафыПроценты);
	
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	Запрос.УстановитьПараметр("ВидПДРСписание", ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности"));
	
	Запрос.УстановитьПараметр("СчетаСписанияБезРазвертки", СчетаСписанияБезРазвертки);
	Запрос.УстановитьПараметр("СчетаСписанияПоКонтрагентамДоговорам", СчетаСписанияПоКонтрагентамДоговорам);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.УстановитьПараметр("СчетаПоВидамПлатежей", СчетаПоВидамПлатежей);
	Запрос.УстановитьПараметр("СубконтоПоВидамПлатежей", СубконтоПоВидамПлатежей);
	
	Запрос.УстановитьПараметр("СчетаПоВидамПлатежейУровням", СчетаПоВидамПлатежейУровням);
	Запрос.УстановитьПараметр("СубконтоПоВидамПлатежейУровням", СубконтоПоВидамПлатежейУровням);
	
	Запрос.УстановитьПараметр("СчетаПоРаботникам", СчетаПоРаботникам);
	Запрос.УстановитьПараметр("СубконтоПоРаботникам", СубконтоПоРаботникам);
	
	Запрос.УстановитьПараметр("СчетаПоКонтрагентам", СчетаПоКонтрагентам);
	Запрос.УстановитьПараметр("СубконтоПоКонтрагентам", СубконтоПоКонтрагентам);
	
	Запрос.УстановитьПараметр("СчетаПоКонтрагентамДоговорам", СчетаПоКонтрагентамДоговорам);
	Запрос.УстановитьПараметр("СубконтоПоКонтрагентамДоговорам", СубконтоПоКонтрагентамДоговорам);
	
	Запрос.УстановитьПараметр("СчетаБезРазвертки", СчетаБезРазвертки);
	
	Запрос.Выполнить();
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ИмяОтчета", "Пояснения5");
	ПараметрыРасшифровки.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыРасшифровки.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	Графа = "04";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа04.Счет,
	               |	ВТ_Графа04.Значение
	               |ИЗ
	               |	ВТ_Графа04 КАК ВТ_Графа04";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		Если СчетаПоВидамПлатежей.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежей + """";
		ИначеЕсли СчетаПоВидамПлатежейУровням.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежейУровням[0] + """, """  + СубконтоПоВидамПлатежейУровням[1] + """";
		ИначеЕсли СчетаПоРаботникам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоРаботникам + """";
		ИначеЕсли СчетаПоКонтрагентам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентам + """";
		ИначеЕсли СчетаПоКонтрагентамДоговорам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на начало периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		Иначе
			НаименованиеСоставляющей = "!СНД";
		КонецЕсли;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "05";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа05.Счет,
	               |	ВТ_Графа05.Значение
	               |ИЗ
	               |	ВТ_Графа05 КАК ВТ_Графа05";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Сальдо на начало периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "12";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.Значение
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		Если СчетаПоВидамПлатежей.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежей + """";
		ИначеЕсли СчетаПоВидамПлатежейУровням.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоВидамПлатежейУровням[0] + """, """  + СубконтоПоВидамПлатежейУровням[1] + """";
		ИначеЕсли СчетаПоРаботникам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоРаботникам + """";
		ИначеЕсли СчетаПоКонтрагентам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентам + """";
		ИначеЕсли СчетаПоКонтрагентамДоговорам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		Иначе
			НаименованиеСоставляющей = "!СКД";
		КонецЕсли;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "13";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа13.Счет,
	               |	ВТ_Графа13.Значение
	               |ИЗ
	               |	ВТ_Графа13 КАК ВТ_Графа13";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Сальдо на конец периода по кредиту счета " + Выборка.Счет.Код + ", развернутое по субконто """ + СубконтоПоКонтрагентамДоговорам[0] + """, """  + СубконтоПоКонтрагентамДоговорам[1] + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "09";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.Значение
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код + " в дебет счета " + СчетСоставляющейДт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "07";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07.СчетДт,
	               |	ВТ_Графа07.СчетКт,
	               |	ВТ_Графа07.Значение
	               |ИЗ
	               |	ВТ_Графа07 КАК ВТ_Графа07";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ВидПДРШтрафыПроценты[0] + """"
		                         + " и """ + ВидПДРШтрафыПроценты[1] + """"
		                         + " в дебет счета " + СчетСоставляющейДт.Код;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	Графа = "08";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08.Счет,
	               |	ВТ_Графа08.Значение
	               |ИЗ
	               |	ВТ_Графа08 КАК ВТ_Графа08";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!КО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа09.СчетДт,
	               |	ВТ_Графа09.СчетКт,
	               |	ВТ_Графа09.Значение
	               |ИЗ
	               |	ВТ_Графа09 КАК ВТ_Графа09";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код + " в дебет счета " + СчетСоставляющейДт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности") + """";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "10";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа10.Счет,
	               |	ВТ_Графа10.Значение
	               |ИЗ
	               |	ВТ_Графа10 КАК ВТ_Графа10";
	
	ЗначениеПоказателя = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющей = Выборка.Счет;
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "!ДО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, -ЗначениеПоказателя); // вычитаемый
	
	Графа = "06";
	ЗаголовокГрафы = ЗаголовкиГраф[Графа];
	ИмяОбластиПоказателя = "П000100" + НомерСтрокиМакет + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа06.Счет,
	               |	ВТ_Графа06.Значение
	               |ИЗ
	               |	ВТ_Графа06 КАК ВТ_Графа06";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!ДО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа07.СчетДт,
	               |	ВТ_Графа07.СчетКт,
	               |	ВТ_Графа07.Значение
	               |ИЗ
	               |	ВТ_Графа07 КАК ВТ_Графа07";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		ЗначениеСоставляющей = Выборка.Значение;
		СчетСоставляющейДт = Выборка.СчетДт;
		СчетСоставляющейКт = Выборка.СчетКт;
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
		
		НаименованиеСоставляющей = "Оборот с кредита счета " + СчетСоставляющейКт.Код
		                         + " по статьям субконто """ + ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы
		                         + """ с видом """ + ВидПДРШтрафыПроценты[0] + """"
		                         + " и """ + ВидПДРШтрафыПроценты[1] + """"
		                         + " в дебет счета " + СчетСоставляющейДт.Код;
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющейДт, СчетСоставляющейКт);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа08.Счет,
	               |	ВТ_Графа08.Значение
	               |ИЗ
	               |	ВТ_Графа08 КАК ВТ_Графа08";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтрокиМакет + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		ЗначениеСоставляющей = Выборка.Значение;
		
		СчетСоставляющей = Выборка.Счет;
		НаименованиеСоставляющей = "!КО";
		ДобавитьСтрокуРасшифровки(ПараметрыРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, СчетСоставляющей);
		
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяОбластиПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСчетовИзСписка(Знач СписокСчетов)
	
	МассивСчетов = Новый Массив;
	
	Разделитель = ",";
	
	Пока НЕ ПустаяСтрока(СписокСчетов) Цикл
		ПозицияРазделителя = Найти(СписокСчетов, Разделитель);
		Если ПозицияРазделителя > 0 Тогда
			КодСчета = СокрЛП(Лев(СписокСчетов, ПозицияРазделителя - 1));
			СписокСчетов = Сред(СписокСчетов, ПозицияРазделителя + 1);
		Иначе
			КодСчета = СокрЛП(СписокСчетов);
			СписокСчетов = "";
		КонецЕсли;
		Если Не ПустаяСтрока(КодСчета) Тогда
			МассивСчетов.Добавить(Счет(КодСчета));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСчетовИзСписка(СписокСчетов)
	
	МассивСчетов = ПолучитьМассивСчетовИзСписка(СписокСчетов);
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Счет Из МассивСчетов Цикл
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.Счет = Счет;
	КонецЦикла;
	
	Возврат ТаблицаСчетов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения6()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	
	НаименованиеГрафы = "за " + Формат(ДатаКонцаПериодаОтчета, "ДФ=yyyy") + " г.";
	ЗаполнитьАвтоПояснения6Строки5670и5680("03", НаименованиеГрафы, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НаименованиеГрафы = "за " + Формат(ДатаКонцаПредыдущегоГода, "ДФ=yyyy") + " г.";
	ЗаполнитьАвтоПояснения6Строки5670и5680("04", НаименованиеГрафы, ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения6Строки5670и5680_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	БухИтоги       = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения6Строки5670и5680(Графа, ЗаголовокГрафы, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	Перем БухИтоги;
	
	ЗаполнитьАвтоПояснения6Строки5670и5680_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	СКД_10 = СКД("10", БухИтоги);
	СНД_10 = СНД("10", БухИтоги);
	СКД_15 = СКД("15", БухИтоги);
	СНД_15 = СНД("15", БухИтоги);
	СКД_16 = СКД("16", БухИтоги);
	СНД_16 = СНД("16", БухИтоги);
	СКД_20 = СКД("20", БухИтоги);
	СНД_20 = СНД("20", БухИтоги);
	СКД_21 = СКД("21", БухИтоги);
	СНД_21 = СНД("21", БухИтоги);
	СКД_23 = СКД("23", БухИтоги);
	СНД_23 = СНД("23", БухИтоги);
	СКД_28 = СКД("28", БухИтоги);
	СНК_28 = СНК("28", БухИтоги);
	СКД_29 = СКД("29", БухИтоги);
	СНД_29 = СНД("29", БухИтоги);
	СКД_41 = СКД("41", БухИтоги);
	СНД_41 = СНД("41", БухИтоги);
	СКК_42 = СКК("42", БухИтоги);
	СНД_42 = СНД("42", БухИтоги);
	СКД_43 = СКД("43", БухИтоги);
	СНК_43 = СНК("43", БухИтоги);
	СКД_44 = СКД("44", БухИтоги);
	СНК_44 = СНК("44", БухИтоги);
	СКД_46 = СКД("46", БухИтоги);
	СНК_46 = СНК("46", БухИтоги);
	СКД_45 = СКД("45", БухИтоги);
	СНД_45 = СНД("45", БухИтоги);
	
	ЗначениеПоказателя = СКД_10 - СНД_10
	                   + СКД_15 - СНД_15
	                   + СКД_16 - СНД_16
	                   + СКД_20 - СНД_20
	                   + СКД_21 - СНД_21
	                   + СКД_23 - СНД_23
	                   + СКД_28 - СНК_28
	                   + СКД_29 - СНД_29
	                   + СКД_41 - СКК_42
	                   - СНД_41 + СНД_42
	                   + СКД_43 - СНК_43
	                   + СКД_44 - СНК_44
	                   + СКД_46 - СНК_46
	                   + СКД_45 - СНД_45;
	
	Если ЗначениеПоказателя < 0 Тогда
		НомерСтроки = "5670";
		НаименованиеСтроки = "Изменение остатков (прирост [-]): незавершенного производства, готовой продукции и др.";
		ЗначениеПоказателя = -ЗначениеПоказателя;
	Иначе
		НомерСтроки = "5680";
		НаименованиеСтроки = "Изменение остатков (уменьшение [+]): незавершенного производства, готовой продукции и др.";
	КонецЕсли;
	
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_10, Счет("10"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_10, Счет("10"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_15, Счет("15"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_15, Счет("15"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_16, Счет("16"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_20, Счет("20"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_21, Счет("21"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_23, Счет("23"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_28, Счет("28"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_29, Счет("29"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СКК", -СКК_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_41, Счет("41"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СНД",  СНД_42, Счет("42"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_43, Счет("43"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_44, Счет("44"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНК", -СНК_46, Счет("46"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "+", "!СКД",  СКД_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!СНД", -СНД_45, Счет("45"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
КонецПроцедуры // ЗаполнитьАвтоПояснения6Строки5670и5680()

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения7()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	
	ТаблицаЗначенийДопСтрок5700 = ПолучитьПустуюТаблицуЗначенийДопСтрокДляСтроки("5700");
	ЗаполнитьАвтоПояснения7Строка5700(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаЗначенийДопСтрок5700);
	СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок5700);
	ЗаполнитьАвтоПояснения7Строка5700ВТомЧисле(ТаблицаЗначенийДопСтрок5700);
	
КонецПроцедуры // ЗаполнитьАвтоПояснения7()

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения7Строка5700(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ТаблицаДополнительныхСтрок)
//izhtc_translator Предупреждение
// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт, 
	        |ОборотДт, ОборотКт, 
	        |КорОборотДт, КорОборотКт, 
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет, КорСчет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
	
	СНК_96 = СНК("96", БухИтоги);
	ДО_96  = ДО("96", БухИтоги);
	КО_96  = КО("96", БухИтоги);
	СКК_96 = СКК("96", БухИтоги);
	
	ОБ_96__91_01 = ОБ("96", "91.01", БухИтоги);
	
	НомерСтроки = "5700";
	НаименованиеСтроки = "Оценочные обязательства - всего";
	
	Графа = "03";
	ЗаголовокГрафы = "Остаток на начало года";
	
	ЗначениеПоказателя = СНК_96;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СНК", СНК_96, Счет("96"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	Графа = "04";
	ЗаголовокГрафы = "Признано";
	
	ЗначениеПоказателя = КО_96;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!КО", КО_96, Счет("96"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	Графа = "05";
	ЗаголовокГрафы = "Погашено";
	
	ЗначениеПоказателя = ДО_96 - ОБ_96__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ДО", ДО_96, Счет("96"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "", "-", "!ОБ", -ОБ_96__91_01, Счет("96"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	Графа = "06";
	ЗаголовокГрафы = "Списано как избыточная сумма";
	
	ЗначениеПоказателя = ОБ_96__91_01;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!ОБ", ОБ_96__91_01, Счет("96"), Счет("91.01"), ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	Графа = "07";
	ЗаголовокГрафы = "Остаток на конец периода";
	
	ЗначениеПоказателя = СКК_96;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКК", СКК_96, Счет("96"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения6");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОценочноеОбязательство,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ЗначениеГрафы03,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ЗначениеГрафы04,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ЗначениеГрафы05,
	               |	0 КАК ЗначениеГрафы06,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ЗначениеГрафы07
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_96, &СубконтоОценочныеОбязательства, Организация = &Организация И ДоговорКонтрагента =&ДоговорКлиента) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |	0,
	               |	0,
	               |	-ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.уи_ХозрасчетныйДоверительноеУправление.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_96, &СубконтоОценочныеОбязательства, СчетКт = &Счет_91_01, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы03),
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07)
	               |ПО
	               |	ОценочноеОбязательство";
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", мОргРасшифровка);
	Запрос.УстановитьПараметр("ДоговорКлиента", Объект.ДоговорКлиента);
	Запрос.УстановитьПараметр("Счет_96",    Счет("96"));
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	Запрос.УстановитьПараметр("СубконтоОценочныеОбязательства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыДополнительныхСтрок = ТаблицаДополнительныхСтрок.Добавить();
		СтрокаТаблицыДополнительныхСтрок.ОценочноеОбязательство = Выборка.ОценочноеОбязательство;
		
		СтрокаТаблицыДополнительныхСтрок.Графа03 = Выборка.ЗначениеГрафы03;
		СтрокаТаблицыДополнительныхСтрок.Графа04 = Выборка.ЗначениеГрафы04;
		СтрокаТаблицыДополнительныхСтрок.Графа05 = Выборка.ЗначениеГрафы05;
		СтрокаТаблицыДополнительныхСтрок.Графа06 = Выборка.ЗначениеГрафы06;
		СтрокаТаблицыДополнительныхСтрок.Графа07 = Выборка.ЗначениеГрафы07;
		
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьАвтоПояснения7Строка5700ВТомЧисле(ТаблицаЗначенийДопСтрок)
	
	Если ТаблицаЗначенийДопСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппы = "ДопСтрока5700";
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяГруппы];
	СтруктураМногострочнойЧасти.Состав.Очистить();
	
	Для Каждого ДополнительнаяСтрока Из ТаблицаЗначенийДопСтрок Цикл
		СтрокаМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Добавить();
		СтрокаМногострочнойЧасти.П100100570001 = ДополнительнаяСтрока.ОценочноеОбязательство;
		
		СтрокаМногострочнойЧасти.П100100570003 =  ДополнительнаяСтрока.Графа03;
		СтрокаМногострочнойЧасти.П100100570004 =  ДополнительнаяСтрока.Графа04;
		СтрокаМногострочнойЧасти.П100100570005 = -ДополнительнаяСтрока.Графа05;
		СтрокаМногострочнойЧасти.П100100570006 = -ДополнительнаяСтрока.Графа06;
		СтрокаМногострочнойЧасти.П100100570007 =  ДополнительнаяСтрока.Графа07;
	КонецЦикла;
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПояснения8()
	
	// Вспомогательные значения периодов.
	ДатаНачалаПериодаОтчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = мДатаКонцаПериодаОтчета;
	ДатаНачалаПредыдущегоГода  = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоГода   = КонецГода(ДатаНачалаПредыдущегоГода);
	ДатаНачалаГодаПредшествующегоПредыдущему = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -24);
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	НаименованиеГрафы = "На " + Формат(ДатаКонцаПериодаОтчета, "ДЛФ=DD");
	ЗаполнитьАвтоПояснения8Строки5800и5810("03", НаименованиеГрафы, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	НаименованиеГрафы = "На " + Формат(ДатаКонцаПредыдущегоГода, "ДЛФ=DD");
	ЗаполнитьАвтоПояснения8Строки5800и5810("04", НаименованиеГрафы, ДатаНачалаПредыдущегоГода, ДатаКонцаПредыдущегоГода);
	
	НаименованиеГрафы = "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДЛФ=DD");
	ЗаполнитьАвтоПояснения8Строки5800и5810("05", НаименованиеГрафы, ДатаНачалаГодаПредшествующегоПредыдущему, ДатаКонцаГодаПредшествующегоПредыдущему);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоПояснения8Строки5800и5810_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	
	БухИтоги       = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
	        |КонечныйОстатокДт, КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, Объект.ДоговорКлиента);
КонецФункции


&НаКлиенте
Процедура ЗаполнитьАвтоПояснения8Строки5800и5810(Графа, ЗаголовокГрафы, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета)
	Перем БухИтоги;
	
	ЗаполнитьАвтоПояснения8Строки5800и5810_Сервер(БухИтоги, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	СКД_008 = СКД("008", БухИтоги);
	СКД_009 = СКД("009", БухИтоги);
	
	НомерСтроки = "5800";
	НаименованиеСтроки = "Полученные - всего";
	
	ЗначениеПоказателя = СКД_008;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_008, Счет("008"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения8");
	
	НомерСтроки = "5810";
	НаименованиеСтроки = "Выданные - всего";
	
	ЗначениеПоказателя = СКД_009;
	УстановитьЗначениеПоказателя("П000100" + НомерСтроки + Графа, ЗначениеПоказателя);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000100" + НомерСтроки + Графа, "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """", "+", "!СКД", СКД_009, Счет("009"), , ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Пояснения8");
	
КонецПроцедуры // ЗаполнитьАвтоПояснения6Строки5670и5680()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	// АвторасчетПоказателей  - булево, признак авторасчета показателей отчетов
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("АвторасчетПоказателей",    Новый ОписаниеТипов("Булево"));
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	ЭтоОтчетностьЗаГод = (мДатаКонцаПериодаОтчета = КонецГода(мДатаКонцаПериодаОтчета));
	Если ЭтоОтчетностьЗаГод Тогда
		ПризнакПоказаСтраницы = 1;
		ПризнакПечатиСтраницы = 1;
	Иначе
		ПризнакПоказаСтраницы = 0;
		ПризнакПечатиСтраницы = 0;
	КонецЕсли;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаБаланс";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Отчет о прибылях и убытках";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = "Отчет об изменениях капитала";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОИК";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = "Отчет о движении денежных средств";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОДДС";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИПС";
	СтрокаУровня1.Представление            = "Отчет о целевом использовании полученных средств";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаОЦИПС";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасчетАктивов";
	СтрокаУровня1.Представление            = "Расчет оценки стоимости чистых активов акционерного общества";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРасчетАктивов";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения1";
	СтрокаУровня1.Представление            = "Пояснения 1. НМА и НИОКР";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения2";
	СтрокаУровня1.Представление            = "Пояснения 2. Основные средства";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения3";
	СтрокаУровня1.Представление            = "Пояснения 3. Финансовые вложения";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения4";
	СтрокаУровня1.Представление            = "Пояснения 4. Запасы";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения5";
	СтрокаУровня1.Представление            = "Пояснения 5. Дебиторская и кредиторская задолженность";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения6";
	СтрокаУровня1.Представление            = "Пояснения 6. Затраты на производство";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения6";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения7";
	СтрокаУровня1.Представление            = "Пояснения 7. Оценочные обязательства";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения8";
	СтрокаУровня1.Представление            = "Пояснения 8. Обеспечения обязательств";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения8";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения9";
	СтрокаУровня1.Представление            = "Пояснения 9. Государственная помощь";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПояснения9";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = "Дополнительные файлы";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	
	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьВидСдачиОтчетности(1);
	
	МакетСоставаПоказателей = Объект.ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	//Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
	Для Каждого Отчет Из СтруктураОтчета Цикл
		
		ИмяСтраницы = Отчет.Значение.ИмяСтраницы;
		ИмяОбласти = Отчет.Значение.ИмяСекцииПоказателей;
		
		ТекОбласть    = МакетСоставаПоказателей.Области[ИмяОбласти];
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если мДатаКонцаПериодаОтчета <> КонецГода(мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВОтчетномПериоде Тогда
				Если КодПоказателя = "П000100242104"
				 ИЛИ КодПоказателя = "П000100243004"
				 ИЛИ КодПоказателя = "П000100245004" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВПредыдущемГоду Тогда
				Если КодПоказателя = "П000100242105"
				 ИЛИ КодПоказателя = "П000100243005"
				 ИЛИ КодПоказателя = "П000100245005" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()


// Процедура ПоказатьКодЕИ
// Отображает единицу измерения
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПоказатьКодЕИ()

	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
		КодЕдиницыИзмерения      = "383";
		НазваниеЕдиницыИзмерений = "в рублях";
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		КодЕдиницыИзмерения      = "384";
		НазваниеЕдиницыИзмерений = "в тыс. рублей";
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		КодЕдиницыИзмерения      = "385";
		НазваниеЕдиницыИзмерений = "в млн. рублей";
	Иначе
		КодЕдиницыИзмерения      = "";
		НазваниеЕдиницыИзмерений = "";
	КонецЕсли;

	мБаланс.Области.КодЕИ.Значение  = КодЕдиницыИзмерения;
	мБаланс.Области.НазвЕИ.Значение = НазваниеЕдиницыИзмерений;

	мФормаОтчета.Области.КодЕИ.Значение  = КодЕдиницыИзмерения;
	мФормаОтчета.Области.НазвЕИ.Значение = НазваниеЕдиницыИзмерений;

	ПолеТаблДокументаОДДС.Области.КодЕИ.Значение  = КодЕдиницыИзмерения;
	ПолеТаблДокументаОДДС.Области.НазвЕИ.Значение = НазваниеЕдиницыИзмерений;

	мОЦИПС.Области.КодЕИ.Значение  = КодЕдиницыИзмерения;
	мОЦИПС.Области.НазвЕИ.Значение = НазваниеЕдиницыИзмерений;

	ПолеТаблДокументаОИК.Области.КодЕИ.Значение  = КодЕдиницыИзмерения;
	ПолеТаблДокументаОИК.Области.НазвЕИ.Значение = НазваниеЕдиницыИзмерений;

КонецПроцедуры // ПоказатьКодЕИ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
&НаКлиенте
Процедура КоманднаяПанельФормыЗаполнить(Команда)

	Ответ = Вопрос("Внимание! Перед заполнением будут очищены все показатели отчетов." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		// Проверяем
		//Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		//|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		//|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		//|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
		//мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		//НачалоПериодаОтчета = Дата(2011,01,01);
		//КонецПериодаОтчета = Дата(2011,12,01);
		//мБухИтоги.РассчитатьИтоги("уи_ХозрасчетныйДоверительноеУправление", Итоги, "Сумма", "Счет", НачалоПериодаОтчета, КонецПериодаОтчета, , , , , , "Организация, ДоговорКонтрагента", мОргРасшифровка, ДоговорКлиента);
		//
		
		
		ЗаполнитьАвто();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
&НаКлиенте
Процедура КоманднаяПанельФормыОчистить(Команда)

	Ответ = Вопрос("Внимание! Будут очищены все показатели отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	Иначе

		Очистить();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
&НаКлиенте
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
&НаКлиенте
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Команда)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
&НаКлиенте
Процедура КоманднаяПанельДействийДействиеЗаписать(Команда)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
&НаКлиенте
Процедура КоманднаяПанельФормыПоиск(Команда)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
&НаКлиенте
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	ПоказатьСтраницыОтчета(); 
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаСервере
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);
	
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета =РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ТаблицаЗначений")).Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Ложь;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		ПрорисоватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Активирует поле табличного документа, содержащий выбранный посредством меню отчет
// Кнопки для перехода регистрируются в функции Иницилизация(). Имена кнопок должны
// соответствовать именам страниц элемента ОсновнаяПанель
//
// Параметры
//  Элемент  - ЭлементФормы, элемент формы, из которого вызван обработчик
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура АктивироватьОтчет(Элемент)

	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы[Элемент.Имя];

КонецПроцедуры // АктивироватьОтчет()

// Изменяет признак авторасчета для показателей отчетов
// Кнопки переключения регистрируются в функции Иницилизация(). Имена кнопок должны
// соответствовать именам страниц элемента ОсновнаяПанель
//
// Параметры
//  Элемент  - ЭлементФормы, элемент формы, из которого вызван обработчик
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ПереключитьАвторасчет(Элемент)
	Элемент.Пометка = НЕ Элемент.Пометка;
	
	ИмяСтраницы = Элемент.Имя;
	СтрокаНастройки = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницы, "ИмяСтраницы");
	
	Если СтрокаНастройки <> Неопределено Тогда
		СтрокаНастройки.АвторасчетПоказателей = НЕ СтрокаНастройки.АвторасчетПоказателей;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницы);
		Для Каждого СтрокаВариантаЗаполнения Из ТаблицаВариантыЗаполнения Цикл
			Если СтрокаВариантаЗаполнения.ВариантЗаполнения = 4 ИЛИ СтрокаВариантаЗаполнения.ВариантЗаполнения = 0 Тогда
				СтрокаВариантаЗаполнения.ВариантЗаполнения = ?(СтрокаНастройки.АвторасчетПоказателей, 4, 0);
			Иначе
				// изменений не требуется
			КонецЕсли;
		КонецЦикла;
		
		УстановитьЦветФонаЯчейки(, , ИмяСтраницы);
	Иначе
		// предполагается что все странцы формы корректно прописаны в дереве значений мДеревоСтраницОтчета
	КонецЕсли;
	
	// инициируем пересчет показателей
	Расчет();
	
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельФормыРасшифровка_Сервер()
	
	Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
	Обраб.Форма = ЭтаФорма;
	ТекущийЛист = Элементы.ТекущаяСтраница.Имя;
	ТекущееТабличноеПоле = Элементы["ПолеТабличногоДокумента" + ТекущийЛист];
	Обраб.ИмяЯчейки = Элементы[ТекущееТабличноеПоле.Имя].ТекущаяОбласть.Имя;
	Обраб.ПолучитьФорму(, ЭтаФорма).Показать();
КонецФункции


&НаКлиенте
Процедура КоманднаяПанельФормыРасшифровка(Команда)
	
	КоманднаяПанельФормыРасшифровка_Сервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыСохранять(Команда)
	Команда.Пометка = НЕ Команда.Пометка;
	мСохранятьРасшифровку = Команда.Пометка;
КонецПроцедуры


&НаКлиенте
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

&НаКлиенте
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

&НаКлиенте
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	Если Объект.Клиент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		Сообщить("Не заполнен клиент");
		Возврат;
	КонецЕсли;
	
	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мБаланс.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;
	мФормаОтчета.Области.ДатаПодписиОтчета.Значение = Объект.ДатаПодписи;

	ЗаполнитьСведенияОбОрганизации(Истина);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

&НаКлиенте
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();

	// Итоговые поля надо пересчитывать, потому что при расчете они округляются
	// в соответствии с установленной единицей измерения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();

	Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
		НазваниеЕдиницыИзмерения = "руб";
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб";
	ИначеЕсли Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		НазваниеЕдиницыИзмерения = "млн. руб";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;

	ЗаголовокПояснения1 = "Пояснения к бухгалтерскому балансу" + Символы.ПС 
	                    + "и отчету о прибылях и убытках (" + НазваниеЕдиницыИзмерения + ")";
	ПолеТаблДокументаПояснения1.Области.ЗаголовокРаздела.Текст = ЗаголовокПояснения1;

КонецПроцедуры


&НаКлиенте
Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Баланс");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Баланс");
	
КонецПроцедуры // ПолеТабличногоДокументаБалансПриАктивизацииОбласти()

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ФормаОтчета");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "ФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОИКПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ОИК");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "ОИК");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОДДСПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ОДДС");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "ОДДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОЦИПСПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "ОЦИПС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаРасчетАктивовПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "РасчетАктивов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения1ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения1");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения1");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения2ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения2");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения2");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения3ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения3");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения3");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения4ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения4");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения4");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения5ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения5");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения5");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения6ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения6");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения6");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения7ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения7");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения7");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения8ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения8");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения8");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения9ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Пояснения9");
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(Элемент, "Пояснения9");
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мБаланс);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаБалансПриИзмененииСодержимогоОбласти

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мФормаОтчета);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОДДСПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаОДДС);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОЦИПСПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мОЦИПС);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаОИКПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаОИК);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаРасчетАктивовПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(мРасчетАктивов);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения1ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения1);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения2ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения2);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения3ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения3);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения4ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения4);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения5ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения5);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения6ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения6);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения7ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения7);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения8ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения8);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПояснения9ПриИзмененииСодержимогоОбласти(Элемент, Область)

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	Если НЕ ((ОбластьИмя = "ОргНазв") Или (ОбластьИмя = "ОргКодОКПО") Или (ОбластьИмя = "ОргОтрасль")
	 Или (ОбластьИмя = "ОргКодОКВЭД") Или (ОбластьИмя = "ОргФорма") Или (ОбластьИмя = "ОргФормаСобств")
	 Или (ОбластьИмя = "ОргКодОКОПФ") Или (ОбластьИмя = "ОргКодОКФС") Или (ОбластьИмя = "ОргПочтАдрес")
	 Или (ОбластьИмя = "ОргДиректор") Или (ОбластьИмя = "ОргБухгалтер")) Тогда
		ОбработчикИзменения(ПолеТаблДокументаПояснения9);
	Иначе
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияБалансПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияФормаОтчетаПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияОИКПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияОДДСПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияОЦИПСПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияРасчетАктивовПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения4ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения5ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения6ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения7ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения8ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВариантЗаполненияПояснения9ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры


&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиБалансПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиФормаОтчетаПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиОДДСПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиОЦИПСПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиОИКПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиРасчетАктивовПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения5ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения6ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения7ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения8ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаЗначениеКорректировкиПояснения9ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры


&НаКлиенте
Процедура ПолеВводаКомментарийБалансПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

&НаКлиенте
Процедура ПолеВводаКомментарийФормаОтчетаПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийОИКПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийОДДСПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийОЦИПСПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийРасчетАктивовПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения1ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения3ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения4ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения5ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения6ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения7ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения8ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКомментарийПояснения9ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ

// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//
&НаКлиенте
Процедура КоманднаяПанельФормыВыгрузить(Команда)
	
	Если мДатаКонцаПериодаОтчета >= '20120101' Тогда
		Предупреждение("Формат выгрузки бухгалтерской отчетности за отчетные периоды 2012 года еще не утвержден ФНС России.");
		Возврат;
	КонецЕсли;
	
	Выгрузить();
	
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельФормыПроверить_Сервер()
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
КонецФункции


&НаКлиенте
Процедура КоманднаяПанельФормыПроверить(Команда)
	
	Если мДатаКонцаПериодаОтчета >= '20120101' Тогда
		Предупреждение("Формат выгрузки бухгалтерской отчетности за отчетные периоды 2012 года еще не утвержден ФНС России.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	КоманднаяПанельФормыПроверить_Сервер();
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	Возврат ПроверитьПоказателиXML();
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//     Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Функция Выгрузить_Сервер()
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	
	НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн);
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

&НаКлиенте
Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Выгрузить_Сервер();
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXML_Сервер(ТекстВыгрузки)
	
	СписокДополнительныхФайлов = Новый СписокЗначений;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВыгрузки);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЭлементыПояснительнаяЗаписка = КорневойУзел.ПолучитьЭлементыПоИмени("ПояснЗап");
	Если ЭлементыПояснительнаяЗаписка.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыПояснительнаяЗаписка[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлПЗ");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл пояснительной записки, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыАудиторскоеЗаключение = КорневойУзел.ПолучитьЭлементыПоИмени("АудитЗакл");
	Если ЭлементыАудиторскоеЗаключение.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыАудиторскоеЗаключение[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлАЗ");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл аудиторского заключения, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыЗаявленияРевизионногоСоюза = КорневойУзел.ПолучитьЭлементыПоИмени("ЗаявСХПр");
	Если ЭлементыЗаявленияРевизионногоСоюза.Количество() > 0 Тогда
		УзелДополнительногоФайла = ЭлементыЗаявленияРевизионногоСоюза[0];
		АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлЗСХП");
		Если АтрибутУзла.Указан Тогда
			СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл заявления ревизионного союза сельскохозяйственных производителей, присвоив ему имя");
		КонецЕсли;
	КонецЕсли;
	
	Если СписокДополнительныхФайлов.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("К файлу выгрузки бухгалтерской отчетности приложите:");
		Для Каждого ДополнительныйФайл Из СписокДополнительныхФайлов Цикл
			ОбщегоНазначения.СообщитьИнформациюПользователю(ДополнительныйФайл.Представление);
			ОбщегоНазначения.СообщитьИнформациюПользователю(ДополнительныйФайл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если Объект.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	КонецЕсли;
	
	УниверсальнаяВыгрузкаXML_Сервер(ТекстВыгрузки);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет =РеквизитФормыВЗначение("Объект").ПолучитьМакет(НастройкиФормы.МакетФорматаВыгрузки502);
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
			+ "_" + Параметры.КодИФНС
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(ОбщегоНазначенияБП.ПолучитьРабочуюДату(), "ДФ=ггггММдд")
			+ "_" + Параметры.ИдентификаторФайлаВыгрузки;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьИмяДополнительногоФайла(ПрефиксФайла, Параметры, ИсходноеИмяФайла)
	
	ИсходныйФайл = Новый Файл(ИсходноеИмяФайла);
	
	ИмяФайла = ПрефиксФайла
	         + "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодИФНС)
	         + "_" + Параметры.КодИФНС
	         + "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
	         + "_" + Параметры.ИдентификаторФайлаВыгрузки
	         + "_" + Формат(ОбщегоНазначенияБП.ПолучитьРабочуюДату(), "ДФ=ггггММдд")
	         + "_" + Строка(Новый УникальныйИдентификатор)
	         + ИсходныйФайл.Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбработатьПоказателиПередВыгрузкой()
	
	Перем ЗначениеПоказателя;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей();
	
	Разделы = Новый Массив;
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОИК);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОДДС);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаОЦИПС);
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				НомерСтроки = 1;
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьВиртуальныеСтрокиРасшифровки(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД = Ложь)
	
	Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
		
		// Строки расшифровки строки 1110.
		ПрефиксВиртуальнойСтроки  = "П2001001110";
		ПрефиксМногострочнойЧасти = "П0001011199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
		СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1120.
		ПрефиксВиртуальнойСтроки  = "П2001001120";
		ПрефиксМногострочнойЧасти = "П0001011299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
		СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1130.
		ПрефиксВиртуальнойСтроки  = "П2001001130";
		ПрефиксМногострочнойЧасти = "П0001011399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
		СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
		СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
		СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
		СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
		СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
		СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
		СписокФиксированныхСтрок.Добавить("11308", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1140.
		ПрефиксВиртуальнойСтроки  = "П2001001140";
		ПрефиксМногострочнойЧасти = "П0001011499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
		СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
		СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
		СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1150.
		ПрефиксВиртуальнойСтроки  = "П2001001150";
		ПрефиксМногострочнойЧасти = "П0001011599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11501", "Паи");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1160.
		ПрефиксВиртуальнойСтроки  = "П2001001160";
		ПрефиксМногострочнойЧасти = "П0001011699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1170.
		ПрефиксВиртуальнойСтроки  = "П2001001170";
		ПрефиксМногострочнойЧасти = "П0001011799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
		СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
		СписокФиксированныхСтрок.Добавить("11703", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1210
		ПрефиксВиртуальнойСтроки  = "П2001001210";
		ПрефиксМногострочнойЧасти = "П0001012199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12101", "Материалы");
		СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
		СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
		СписокФиксированныхСтрок.Добавить("12104", "Товары");
		СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
		СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
		СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
		СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
		СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
		СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
		СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1220
		ПрефиксВиртуальнойСтроки  = "П2001001220";
		ПрефиксМногострочнойЧасти = "П0001012299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
		СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
		СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
		СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
		СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
		СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
		СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1230
		ПрефиксВиртуальнойСтроки  = "П2001001230";
		ПрефиксМногострочнойЧасти = "П0001012399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
		СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
		СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
		СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
		СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1240
		ПрефиксВиртуальнойСтроки  = "П2001001240";
		ПрефиксМногострочнойЧасти = "П0001012499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12401", "Акции");
		СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
		СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
		СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
		СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
		СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1250
		ПрефиксВиртуальнойСтроки  = "П2001001250";
		ПрефиксМногострочнойЧасти = "П0001012599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
		СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
		СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
		СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
		СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
		СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
		СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
		СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
		СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
		СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1260
		ПрефиксВиртуальнойСтроки  = "П2001001260";
		ПрефиксМногострочнойЧасти = "П0001012699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
		СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
		СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
		СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
		СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
		СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
		СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1310
		ПрефиксВиртуальнойСтроки  = "П2001001310";
		ПрефиксМногострочнойЧасти = "П0001013199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1320
		ПрефиксВиртуальнойСтроки  = "П2001001320";
		ПрефиксМногострочнойЧасти = "П0001013299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1340
		Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
			ПрефиксВиртуальнойСтроки  = "П2001001340";
			ПрефиксМногострочнойЧасти = "П0001013499";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
			СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
			СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
			ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		КонецЕсли;
		
		// Строки расшифровки строки 1350
		ПрефиксВиртуальнойСтроки  = "П2001001350";
		ПрефиксМногострочнойЧасти = "П0001013599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1360
		ПрефиксВиртуальнойСтроки  = "П2001001360";
		ПрефиксМногострочнойЧасти = "П0001013699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
			СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
			СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1370
		ПрефиксВиртуальнойСтроки  = "П2001001370";
		ПрефиксМногострочнойЧасти = "П0001013799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1410
		ПрефиксВиртуальнойСтроки  = "П2001001410";
		ПрефиксМногострочнойЧасти = "П0001014199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
		СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1420
		ПрефиксВиртуальнойСтроки  = "П2001001420";
		ПрефиксМногострочнойЧасти = "П0001014299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1450
		ПрефиксВиртуальнойСтроки  = "П2001001450";
		ПрефиксМногострочнойЧасти = "П0001014599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1510
		ПрефиксВиртуальнойСтроки  = "П2001001510";
		ПрефиксМногострочнойЧасти = "П0001015199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
		СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
		СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
		СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
		СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1520
		ПрефиксВиртуальнойСтроки  = "П2001001520";
		ПрефиксМногострочнойЧасти = "П0001015299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
		СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
		СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
				
		// Строки расшифровки строки 1530
		ПрефиксВиртуальнойСтроки  = "П2001001530";
		ПрефиксМногострочнойЧасти = "П0001015399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		Если НЕ ЭтоБалансНекоммерческойОрганизации Тогда
			СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
		КонецЕсли;
		СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
		СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
		СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
		СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1550
		ПрефиксВиртуальнойСтроки  = "П2001001550";
		ПрефиксМногострочнойЧасти = "П0001015599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
	КонецЕсли;
	
	Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
		
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
		
		// Строки расшифровки строки 2110
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2120
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21201", "Cебестоимость продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21202", "Cебестоимость продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2100
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "П1001002100";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2210
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2220
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2200
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "П1001002200";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2310
		ПрефиксВиртуальнойСтроки  = "П2001002310";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2320
		ПрефиксВиртуальнойСтроки  = "П2001002320";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
		СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2330
		ПрефиксВиртуальнойСтроки  = "П2001002330";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
		СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2340
		ПрефиксВиртуальнойСтроки  = "П2001002340";
		ПрефиксМногострочнойЧасти = "П1001002340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
		СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
		СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
		СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
		СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
		СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
		СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
		СписокФиксированныхСтрок.Добавить("23425", "Корректировка прибыли до рыночных цен");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2350
		ПрефиксВиртуальнойСтроки  = "П2001002350";
		ПрефиксМногострочнойЧасти = "П1001002350";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
		СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
		СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
		СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
		СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
		СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
		СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
		СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
		СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
		СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
		СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
		СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
		СписокФиксированныхСтрок.Добавить("23533", "Прочие убытки, приравненные к внереализационным расходам");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2300
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "П1001002300";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2421
		ПрефиксВиртуальнойСтроки  = "П2001002421";
		ПрефиксМногострочнойЧасти = "П1001002421";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2430
		ПрефиксВиртуальнойСтроки  = "П2001002430";
		ПрефиксМногострочнойЧасти = "П1001002430";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2450
		ПрефиксВиртуальнойСтроки  = "П2001002450";
		ПрефиксМногострочнойЧасти = "П1001002450";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2460
		ПрефиксВиртуальнойСтроки  = "П2001002460";
		ПрефиксМногострочнойЧасти = "П1001002460";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые организациями, применяющими специальные налоговые режимы");
		СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
 		// Строки расшифровки строки 2510
		ПрефиксВиртуальнойСтроки  = "П2001002510";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
		СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
   КонецЕсли;
	
	Возврат ДанныеРаздела; 
	
КонецФункции // ПолучитьВиртуальныеСтрокиРасшифровки()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	НомерСтрокиМногострочнойЧасти = 1;
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
		Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + НомерСтрокиМногострочнойЧасти]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
	КонецЦикла;
	
КонецПроцедуры // ВнестиВиртуальныеСтрокиРасшифровкиБаланс()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Если Не ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВнестиВиртуальныеСтрокиРасшифровкиБаланс()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	СоставДополнительныхСтрок = СохрСтруктура.СоставДополнительныхСтрок;
	ПрименяетсяЕНВД = СохрСтруктура.ПрименениеЕНВД;
	ЭтоБалансНекоммерческойОрганизации = СохрСтруктура.БалансНекоммерческойОрганизации;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		// Подмена строк расшифровки виртуальной многострочной частью
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(Раздел.Ключ, Раздел.Значение, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
		мДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, "АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрПочт) Тогда
			АдресДляВыгрузки = АдрПочт;
		Иначе
			АдресДляВыгрузки = АдрЮР;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ВидСдачиОтчетности; // переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "33");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000"), 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000"), 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1"), 0);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ДатаДок",  Формат(ОбщегоНазначенияБП.ПолучитьРабочуюДату(), "ДФ=дд.ММ.гггг"));
	
	// Для промежуточного и ликвидационного баланса период определяется другими кодами
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// промежуточная отчетность при ликвидации/реорганизации
			ПериодОтчетности = "94";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// ликвидационная отчетность
			ПериодОтчетности = "90";
		Иначе
			// обычная отчетность
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)];
		КонецЕсли;
	Иначе
		ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(мСохраненныйДок.ДатаОкончания)];
	КонецЕсли;
	
	Параметры.Вставить("Период", ПериодОтчетности);
	
	Параметры.Вставить("ОтчетГод",          Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("ВидДок",            Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("НаимОрг",           СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИННОрг",            СокрЛП(Титульный.ОргИНН));
	Параметры.Вставить("КППОрг",            СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КПП")));
	Параметры.Вставить("КодИФНС",           СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КодИМНС")));
	Параметры.Вставить("КодИФНСПосредника", СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КодИФНСПолучателя")));
	
	// различные коды
	Параметры.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	Параметры.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	Параметры.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	Параметры.Вставить("ОКЕИ",  СокрЛП(Титульный.КодЕИ));
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	Параметры.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РазложитьФИО(Титульный.ОргДиректор);
	Параметры.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
	Параметры.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
	Параметры.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РазложитьФИО(Титульный.ОргБухгалтер);
	Параметры.Вставить("ФамилияБух",  СокрЛП(ФИОБух.Фамилия));
	Параметры.Вставить("ИмяБух",      СокрЛП(ФИОБух.Имя));
	Параметры.Вставить("ОтчествоБух", СокрЛП(ФИОБух.Отчество));
	
	// телефон
	Параметры.Вставить("ТелОрг", РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(мСохраненныйДок.Организация, мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	// адрес
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	Параметры.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	Параметры.Вставить("АдрКодРегион",  РегламентированнаяОтчетность.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	Параметры.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	Параметры.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	Параметры.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	Параметры.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	Параметры.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	Параметры.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	Параметры.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	Параметры.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_BUHOTCH");
	
	Параметры.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	// Формируем ИдФайл на основании значений других параметров.
	Параметры.Вставить("ИдФайл", СформироватьИдФайл(Параметры));
	
	// Условия включения узлов и элементов в выгрузку.
	Параметры.Вставить("БалансКоммерческойОрганизации", НЕ ЭтоБалансНекоммерческойОрганизации);
	Параметры.Вставить("БалансНекоммерческойОрганизации", ЭтоБалансНекоммерческойОрганизации);
	
	Параметры.Вставить("Период349094", (ПериодОтчетности = "34" ИЛИ ПериодОтчетности = "90" ИЛИ ПериодОтчетности = "94"));
	
	Параметры.Вставить("ВключитьОИК", (ПериодОтчетности = "34"));
	Параметры.Вставить("ВключитьОДДС", (ПериодОтчетности = "34"));
	Параметры.Вставить("ВключитьОЦИПС", (ПериодОтчетности = "34"));
	
	ПояснительнаяЗаписка = СокрЛП(СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
	Если (ПериодОтчетности = "34") Тогда
		Параметры.Вставить("ЕстьПояснительнаяЗаписка", Истина);
		Параметры.Вставить("ИмяФайлаПояснительнойЗаписки", ?(ПустаяСтрока(ПояснительнаяЗаписка), "", ПолучитьИмяДополнительногоФайла("NO_BUHPZ", Параметры, ПояснительнаяЗаписка)));
	Иначе
		Параметры.Вставить("ЕстьПояснительнаяЗаписка", Ложь);
	КонецЕсли;
	
	АудиторскоеЗаключение = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(АудиторскоеЗаключение)) Тогда
		Параметры.Вставить("ЕстьАудиторскоеЗаключение", Истина);
		Параметры.Вставить("ИмяФайлаАудиторскогоЗаключения", ПолучитьИмяДополнительногоФайла("NO_BUHAZ", Параметры, АудиторскоеЗаключение));
	Иначе
		Параметры.Вставить("ЕстьАудиторскоеЗаключение", Ложь);
	КонецЕсли;
	
	ЗаявлениеРевизионногоСоюза = СписокСохранения.СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
	Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(ЗаявлениеРевизионногоСоюза)) Тогда
		Параметры.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Истина);
		Параметры.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", ПолучитьИмяДополнительногоФайла("NO_BUHZSHP", Параметры, ЗаявлениеРевизионногоСоюза));
	Иначе
		Параметры.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Ложь);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.КодИФНС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННОрг, ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяРук) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяБух) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.ОКПО) И (СтрДлина(Параметры.ОКПО) < 8 ИЛИ СтрДлина(Параметры.ОКПО) > 10 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКПО)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКОПФ) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКОПФ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКФС) <> 2 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ОКЕИ) <> 3 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.ОКЕИ) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.Период = "34" И ПустаяСтрока(Параметры.ИмяФайлаПояснительнойЗаписки) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "К годовой бухгалтерской отчетности необходимо приложить файл пояснительной записки!", "ДополнительныеФайлы");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				УдалитьУзел(Узел);
			ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
				УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N",
	               Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение),
	               НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД");
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Баланс", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока Параметры.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, Параметры)
	
	Возврат Число(Формат(Значение, Параметры.ФорматВывода));
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда // !!!
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(Параметры, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если Параметры.Свойство(ИмяСвойства) Тогда // !!!
						ЗначениеСвойства = Параметры[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, Параметры));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "#" Тогда
				//ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Баланс", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Баланс", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NO_BUH1_1_023_00_05_01_01.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
&НаКлиенте
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Команда)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

// Надпись30Нажатие
//
&НаКлиенте
Процедура Надпись30Нажатие(Элемент)
	// Вставить содержимое обработчика.
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	СписокОрганизаций.ВыбратьЭлемент("Список организаций, по которым формируется отчет");
КонецПроцедуры // Надпись30Нажатие

//Процедура ПолеТабличногоДокументаБалансВыбор(Элемент, Область, СтандартнаяОбработка)
//	
//	Если Область.Имя = "ОргПочтАдрес" Тогда
//		// Запросим адреса.
//		Адреса = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ПолныйАдрЮР, ПолныйАдрПочт");
//		Если ЭтоБалансДляУПП_КА Тогда
//			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрЮР, ",", "")) Тогда
//				Адреса.ПолныйАдрЮР = "";
//			Иначе
//				Адреса.ПолныйАдрЮР = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрЮР);
//			КонецЕсли;
//			
//			Если ПустаяСтрока(СтрЗаменить(Адреса.ПолныйАдрПочт, ",", "")) Тогда
//				Адреса.ПолныйАдрПочт = "";
//			Иначе
//				Адреса.ПолныйАдрПочт = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Адреса.ПолныйАдрПочт);
//			КонецЕсли;
//		КонецЕсли;
//		
//		ТаблицаАдресов = Новый ТаблицаЗначений;
//		ТаблицаАдресов.Колонки.Добавить("НазваниеАдреса",,"Тип адреса",18);
//		ТаблицаАдресов.Колонки.Добавить("Адрес",,,100);
//		
//		НовСтр = ТаблицаАдресов.Добавить();
//		НовСтр.НазваниеАдреса = "Пустое значение";
//		НовСтр.Адрес = "Адрес не указывается";
//		
//		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрПочт) Тогда
//			НовСтр = ТаблицаАдресов.Добавить();
//			НовСтр.НазваниеАдреса = "Почтовый адрес";
//			НовСтр.Адрес = Адреса.ПолныйАдрПочт;
//		КонецЕсли;
//		
//		Если НЕ ПустаяСтрока(Адреса.ПолныйАдрЮР) Тогда
//			НовСтр = ТаблицаАдресов.Добавить();
//			НовСтр.НазваниеАдреса = "Юридический адрес";
//			НовСтр.Адрес = Адреса.ПолныйАдрЮР;
//		КонецЕсли;
//		
//		Если ТаблицаАдресов.Количество() = 1 Тогда
//			Предупреждение("В контактной информации юридический и почтовый адрес не указаны.");
//			Возврат;
//		КонецЕсли;
//		
//		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
//		НайденнаяСтрока = ТаблицаАдресов.Найти(ПоискЗначение, "Адрес");
//		Если НайденнаяСтрока = Неопределено Тогда
//			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите");
//		Иначе
//			УказанныйАдрес = ТаблицаАдресов.ВыбратьСтроку("Выберите адрес", НайденнаяСтрока);
//		КонецЕсли;
//		
//		Если УказанныйАдрес = Неопределено Тогда
//			Возврат;
//		КонецЕсли;
//		
//		Модифицированность = Истина;
//		
//		Область.Значение = ?(УказанныйАдрес.Получить(1) = "Адрес не указывается", "", УказанныйАдрес.Получить(1));
//		
//		Если УказанныйАдрес.Получить(1) = "Адрес не указывается" Тогда
//			// По умолчанию для следующих обновлений поставим, что тип адреса должен быть почтовым.
//			мТипАдреса = "ПолныйАдрПочт";
//			мАдресДляВыгрузки = "";
//		КонецЕсли;
//		
//		Если УказанныйАдрес.НазваниеАдреса = "Юридический адрес" Тогда
//			мТипАдреса = "ПолныйАдрЮР";
//			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрЮР").АдрЮР;
//		КонецЕсли;
//		
//		Если УказанныйАдрес.НазваниеАдреса = "Почтовый адрес" Тогда
//			мТипАдреса = "ПолныйАдрПочт";
//			мАдресДляВыгрузки = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "АдрПочт").АдрПочт;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Команда)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура КоманднаяПанельФормыДействиеОтправка(Команда)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАГРУЗКИ ДАННЫХ

&НаКлиенте
Функция ИмпортироватьДанныеОтчета()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "*.xml|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выбор xml файла";

	Если НЕ ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат Неопределено; // Пользователь отказался выбрать файл.
	КонецЕсли;
	
	Возврат ЗагрузитьДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);

КонецФункции

&НаСервере
Функция ЗагрузитьДанные(Путь)
	
	ДеревоСтруктуры  = ИзвлечьСтруктуруXML();
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей();
	СтруктураОтчетов = Новый Структура;
	
	ФайлОбмена = Новый ЧтениеXML();
	
	ОтчетныйГодЗагрузкиДанных = Год(мДатаКонцаПериодаОтчета);
	
	ФайлОбмена.ОткрытьФайл(Путь);
	Пока ФайлОбмена.Прочитать() Цикл
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Документ" Тогда
			Период = ФайлОбмена.ПолучитьАтрибут("Период");
			ОтчетныйГод = ФайлОбмена.ПолучитьАтрибут("ОтчетГод");
			
			ПериодЗагрузкиДанных      = ?(Период = Неопределено, 0, Число(Период));
			ОтчетныйГодЗагрузкиДанных = ?(ОтчетныйГод = Неопределено, 0, Число(ОтчетныйГод));
			
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// данных 2011 г. и позже, в 1.6 быть не должно
	Если ОтчетныйГодЗагрузкиДанных > 2012 Тогда
		Возврат СтруктураОтчетов;
	КонецЕсли;
	
	ОсновнаяВетка = ДеревоСтруктуры;
	МассивУровней = Новый Массив;
	ФайлОбмена.ОткрытьФайл(Путь);
	ТекущийУровень = 1;
	Раздел = "";
	МассивУровней.Добавить(ДеревоСтруктуры);
	Пока ФайлОбмена.Прочитать() Цикл
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		Уровень = ФайлОбмена.КонтекстПространствИмен.Глубина;
		
		Если Уровень <> ТекущийУровень И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Куст = МассивУровней[ТекущийУровень - 1].Строки.Найти(ИмяУзла, "Код", Истина);
			Если Куст = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивУровней.Вставить(Уровень - 1, Куст);
		КонецЕсли;
		
		Если Уровень = 3 И ФайлОбмена.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ОсновнаяВетка = МассивУровней[ТекущийУровень - 1].Строки.Найти(ИмяУзла, "Код", Истина);
			Если ОсновнаяВетка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Раздел = ОсновнаяВетка.Раздел;
			СтруктураДанных = Новый Структура;
		КонецЕсли;
		
		Если Уровень = 2 И ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ОсновнаяВетка <> Неопределено И ОсновнаяВетка.Раздел <> "" Тогда
				СтруктураОтчетов.Вставить(Раздел, СтруктураДанных);
				ТекущийУровень = Уровень;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Уровень > 3 И  ФайлОбмена.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
			
			КолАтр = ФайлОбмена.КоличествоАтрибутов();
			Для инд = 0 По КолАтр - 1 Цикл
				Атрибут = ФайлОбмена.ПолучитьАтрибут(инд);
				ИмяАтрибута = ФайлОбмена.ИмяАтрибута(инд);
				Ветвь = Куст.Строки.Найти(ИмяАтрибута, "Код", Истина);
				Если Ветвь = Неопределено ИЛИ Ветвь.Ключ = "" Тогда
					Продолжить;
				КонецЕсли;
				
				КлючЗначения = Ветвь.Ключ;
				Попытка
					Значение = Число(ФайлОбмена.ЗначениеАтрибута(ИмяАтрибута));
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ИменаПоказателейСоЗнакомПлюс.Найти(КлючЗначения) <> Неопределено Тогда
					Значение = -Значение;
				КонецЕСли;
				
				// данных 2011 г. и позже, в 1.6 быть не должно
				Загружать = ОтчетныйГодЗагрузкиДанных = 2011;
				Загружать = Загружать ИЛИ Раздел = "Баланс" И КлючЗначения = "СумПрдшв" И ОтчетныйГодЗагрузкиДанных <= 2012;
				Если Загружать Тогда
					СтруктураДанных.Вставить(КлючЗначения, Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийУровень = Уровень;
	КонецЦикла;
	
	Возврат СтруктураОтчетов;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ЗагрузитьДанныеВОтчет(СтруктураОтчетов)
	
	Для Каждого СтруктураДанныхОтчета ИЗ СтруктураОтчетов Цикл
		Если ТипЗнч(СтруктураДанныхОтчета.Значение) = Тип("Структура") Тогда
			Если ТипЗнч(СтруктураДанныхОтчета.Ключ) = Тип("Строка") Тогда
				ФормаОтчета = Элементы["ПолеТабличногоДокумента" + СтруктураДанныхОтчета.Ключ]
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЗаписьСтруктуры ИЗ СтруктураДанныхОтчета.Значение Цикл
				Попытка
					ФормаОтчета.Области[ЗаписьСтруктуры.Ключ].Значение = ЗаписьСтруктуры.Значение;
				Исключение
				КонецПопытки
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОпределитьПериодЗагружаемыхДанных()
	
	ГодОтчета = Год(мДатаКонцаПериодаОтчета);
	Если ГодОтчета = 2011 И ОтчетныйГодЗагрузкиДанных = 2011 Тогда
		ЗаполнятьГодПредыдущий = Ложь;
		ЗаполнятьГодПредшествующийПредыдущему  = Ложь;		
	ИначеЕсли ГодОтчета = 2012 И ОтчетныйГодЗагрузкиДанных = 2012 Тогда
		ЗаполнятьГодПредыдущий = Истина;
		ЗаполнятьГодПредшествующийПредыдущему  = Ложь;		
	Иначе
		ЗаполнятьГодПредыдущий = Истина;
		ЗаполнятьГодПредшествующийПредыдущему  = Истина;		
	КонецЕсли;
				
КонецПроцедуры		


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет соответствие номеров счетов и их ссылок для плана счетов Хозрасчетный
//
// Параметры
//  СоответствиеСчетов - Неопределено, переменная в которую будет внесено соответствие
//
&НаСервере
Процедура ЗаполнитьСоответствиеСчетов(СоответствиеСчетов)
	
	Если СоответствиеСчетов <> Неопределено Тогда
		// соответствие уже заполнено
		Возврат;
	КонецЕсли;
	
	СоответствиеСчетов = Новый Соответствие;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" И РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.6" Тогда
		Возврат;
	КонецЕсли;
	
	ПС = ПланыСчетов["Хозрасчетный"];
	
	СоответствиеСчетов.Вставить("01", ПС.ОсновныеСредства);
	СоответствиеСчетов.Вставить("01.01", ПС.ОСвОрганизации);
	СоответствиеСчетов.Вставить("01.08", ПС.ОСБезГосРегистрации);
	СоответствиеСчетов.Вставить("01.09", ПС.ВыбытиеОС);
	
	СоответствиеСчетов.Вставить("02", ПС.АмортизацияОсновныхСредств);
	СоответствиеСчетов.Вставить("02.01", ПС.АмортизацияОС_01);
	СоответствиеСчетов.Вставить("02.02", ПС.АмортизацияОС_03);
	
	СоответствиеСчетов.Вставить("03", ПС.ДоходныеВложенияВ_МЦ);
	СоответствиеСчетов.Вставить("03.01", ПС.МЦвОрганизации);
	СоответствиеСчетов.Вставить("03.02", ПС.МЦ_ПредоставленныеВоВременноеВладение);
	СоответствиеСчетов.Вставить("03.03", ПС.МЦ_ПредоставленныеВоВременноеПользование);
	СоответствиеСчетов.Вставить("03.04", ПС.ПрочиеДоходныеВложения);
	СоответствиеСчетов.Вставить("03.09", ПС.ВыбытиеМЦ);
	
	СоответствиеСчетов.Вставить("04", ПС.НематериальныеАктивы);
	СоответствиеСчетов.Вставить("04.01", ПС.НематериальныеАктивыОрганизации);
	СоответствиеСчетов.Вставить("04.02", ПС.РасходыНаНИОКР);
	СоответствиеСчетов.Вставить("05", ПС.АмортизацияНематериальныхАктивов);
	СоответствиеСчетов.Вставить("07", ПС.ОборудованиеКУстановке);
	
	СоответствиеСчетов.Вставить("08", ПС.ВложенияВоВнеоборотныеАктивы);
	СоответствиеСчетов.Вставить("08.01", ПС.ПриобретениеЗемельныхУчастков);
	СоответствиеСчетов.Вставить("08.02", ПС.ПриобретениеОбъектовПриродопользования);
	СоответствиеСчетов.Вставить("08.03", ПС.СтроительствоОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.04", ПС.ПриобретениеОбъектовОсновныхСредств);
	СоответствиеСчетов.Вставить("08.05", ПС.ПриобретениеНематериальныхАктивов);
	СоответствиеСчетов.Вставить("08.06", ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо);
	СоответствиеСчетов.Вставить("08.07", ПС.ПриобретениеВзрослыхЖивотных);
	СоответствиеСчетов.Вставить("08.08", ПС.ВыполнениеНИОКР);
	СоответствиеСчетов.Вставить("08.11", ПС.НематериальныеПоисковыеАктивы);
	СоответствиеСчетов.Вставить("08.12", ПС.МатериальныеПоисковыеАктивы);
	
	СоответствиеСчетов.Вставить("09", ПС.ОтложенныеНалоговыеАктивы);
	СоответствиеСчетов.Вставить("10", ПС.Материалы);
	СоответствиеСчетов.Вставить("11", ПС.ЖивотныеНаВыращиванииИОткорме);
	
	СоответствиеСчетов.Вставить("14", ПС.РезервыПодСнижениеСтоимостиМЦ);
	СоответствиеСчетов.Вставить("14.01", ПС.РезервыПодСнижениеСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("14.02", ПС.РезервыПодСнижениеСтоимостиТоваров);
	СоответствиеСчетов.Вставить("14.03", ПС.РезервыПодСнижениеСтоимостиГотовойПродукции);
	СоответствиеСчетов.Вставить("14.04", ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	
	СоответствиеСчетов.Вставить("15", ПС.ЗаготовлениеИПриобретениеМЦ);
	СоответствиеСчетов.Вставить("15.01", ПС.ЗаготовлениеИПриобретениеМатериалов);
	СоответствиеСчетов.Вставить("15.02", ПС.ПриобретениеТоваров);
	
	СоответствиеСчетов.Вставить("16", ПС.ОтклонениеВСтоимостиМЦ);
	СоответствиеСчетов.Вставить("16.01", ПС.ОтклонениеВСтоимостиМатериалов);
	СоответствиеСчетов.Вставить("16.02", ПС.ОтклонениеВСтоимостиТоваров);
	
	СоответствиеСчетов.Вставить("19", ПС.НДСпоПриобретеннымЦенностям);
	СоответствиеСчетов.Вставить("19.01", ПС.НДСприПриобретенииОсновныхСредств);
	СоответствиеСчетов.Вставить("19.02", ПС.НДСпоПриобретеннымНематериальнымАктивам);
	СоответствиеСчетов.Вставить("19.03", ПС.НДСпоПриобретеннымМПЗ);
	СоответствиеСчетов.Вставить("19.04", ПС.НДСпоПриобретеннымУслугам);
	СоответствиеСчетов.Вставить("19.05", ПС.НДСуплачиваемыйТаможеннымОрганам);
	СоответствиеСчетов.Вставить("19.06", ПС.АкцизыПоОплаченнымМатериальнымЦенностям);
	СоответствиеСчетов.Вставить("19.07", ПС.НДСПоТоварамРеализованнымПоСтавке0);
	СоответствиеСчетов.Вставить("19.08", ПС.НДСприСтроительствеОсновныхСредств);
	
	СоответствиеСчетов.Вставить("20", ПС.ОсновноеПроизводство_);
	СоответствиеСчетов.Вставить("20.01", ПС.ОсновноеПроизводство);
	СоответствиеСчетов.Вставить("20.02", ПС.ПроизводствоИзДавальческогоСырья);
	
	СоответствиеСчетов.Вставить("21", ПС.Полуфабрикаты);
	СоответствиеСчетов.Вставить("23", ПС.ВспомогательныеПроизводства);
	СоответствиеСчетов.Вставить("25", ПС.ОбщепроизводственныеРасходы);
	СоответствиеСчетов.Вставить("26", ПС.ОбщехозяйственныеРасходы);
	СоответствиеСчетов.Вставить("28", ПС.БракВПроизводстве);
	СоответствиеСчетов.Вставить("29", ПС.ОбслуживающиеПроизводства);
	СоответствиеСчетов.Вставить("41", ПС.Товары);
	СоответствиеСчетов.Вставить("42", ПС.ТорговаяНаценка);
	СоответствиеСчетов.Вставить("43", ПС.ГотоваяПродукция);
	СоответствиеСчетов.Вставить("44", ПС.РасходыНаПродажу);
	СоответствиеСчетов.Вставить("45", ПС.ТоварыОтгруженные);
	СоответствиеСчетов.Вставить("46", ПС.ВыполненныеЭтапыПоНезавершеннымРаботам);
	
	СоответствиеСчетов.Вставить("50", ПС.Касса);
	СоответствиеСчетов.Вставить("50.01", ПС.КассаОрганизации);
	СоответствиеСчетов.Вставить("50.02", ПС.ОперационнаяКасса);
	СоответствиеСчетов.Вставить("50.03", ПС.ДенежныеДокументы);
	СоответствиеСчетов.Вставить("50.21", ПС.КассаОрганизацииВал);
	СоответствиеСчетов.Вставить("50.23", ПС.ДенежныеДокументыВал);
	
	СоответствиеСчетов.Вставить("51", ПС.РасчетныеСчета);
	СоответствиеСчетов.Вставить("51.02", ПС.ОперационнаяКасса);
	СоответствиеСчетов.Вставить("51.21", ПС.КассаОрганизацииВал);
	
	СоответствиеСчетов.Вставить("52", ПС.ВалютныеСчета);
	
	СоответствиеСчетов.Вставить("55", ПС.СпециальныеСчета);
	СоответствиеСчетов.Вставить("55.01", ПС.Аккредитивы);
	СоответствиеСчетов.Вставить("55.02", ПС.ЧековыеКнижки);
	СоответствиеСчетов.Вставить("55.03", ПС.ДепозитныеСчета);
	СоответствиеСчетов.Вставить("55.04", ПС.ПрочиеСпециальныеСчета);
	СоответствиеСчетов.Вставить("55.21", ПС.АккредитивыВал);
	СоответствиеСчетов.Вставить("55.23", ПС.ДепозитныеСчетаВал);
	СоответствиеСчетов.Вставить("55.24", ПС.ПрочиеСпециальныеСчетаВал);
	
	СоответствиеСчетов.Вставить("57", ПС.ПереводыВПути_);
	СоответствиеСчетов.Вставить("57.01", ПС.ПереводыВПути);
	СоответствиеСчетов.Вставить("57.21", ПС.ПереводыВПутиВал);
	
	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("57.02", ПС.ПокупкаИностраннойВалюты); // 57.11
		СоответствиеСчетов.Вставить("57.22", ПС.ПродажаИностраннойВалюты); // 57.22
		СоответствиеСчетов.Вставить("57.03", ПС.ПустаяСсылка()); // счет отсутсвует
	Иначе
		СоответствиеСчетов.Вставить("57.02", ПС.ПриобретениеИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.22", ПС.РеализацияИностраннойВалюты);
		СоответствиеСчетов.Вставить("57.03", ПС.ПродажиПоПлатежнымКартам);
	КонецЕсли;

	СоответствиеСчетов.Вставить("58.01.1", ПС.Паи);
	СоответствиеСчетов.Вставить("58.01.2", ПС.Акции);
	СоответствиеСчетов.Вставить("58.02", ПС.ДолговыеЦенныеБумаги);
	СоответствиеСчетов.Вставить("58.03", ПС.ПредоставленныеЗаймы);
	СоответствиеСчетов.Вставить("58.04", ПС.ВкладыПоДоговоруПростогоТоварищества);
	СоответствиеСчетов.Вставить("58.05", ПС.ПриобретенныеПрава);
	СоответствиеСчетов.Вставить("59", ПС.РезервыПодОбесценениеФинансовыхВложений);

	СоответствиеСчетов.Вставить("60.01", ПС.РасчетыСПоставщиками);
	СоответствиеСчетов.Вставить("60.02", ПС.РасчетыПоАвансамВыданным);
	СоответствиеСчетов.Вставить("60.03", ПС.ВекселяВыданные);
	СоответствиеСчетов.Вставить("60.21", ПС.РасчетыСПоставщикамиВал);
	СоответствиеСчетов.Вставить("60.22", ПС.РасчетыПоАвансамВыданнымВал);
	СоответствиеСчетов.Вставить("60.31", ПС.РасчетыСПоставщикамиУЕ);
	СоответствиеСчетов.Вставить("60.32", ПС.РасчетыПоАвансамВыданнымУЕ);

	СоответствиеСчетов.Вставить("62.01", ПС.РасчетыСПокупателями);
	СоответствиеСчетов.Вставить("62.02", ПС.РасчетыПоАвансамПолученным);
	СоответствиеСчетов.Вставить("62.03", ПС.ВекселяПолученные);
	СоответствиеСчетов.Вставить("62.21", ПС.РасчетыСПокупателямиВал);
	СоответствиеСчетов.Вставить("62.22", ПС.РасчетыПоАвансамПолученнымВал);
	СоответствиеСчетов.Вставить("62.31", ПС.РасчетыСПокупателямиУЕ);
	СоответствиеСчетов.Вставить("62.32", ПС.РасчетыПоАвансамПолученнымУЕ);

	СоответствиеСчетов.Вставить("63", ПС.РезервыПоСомнительнымДолгам);

	СоответствиеСчетов.Вставить("66", ПС.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("66.01", ПС.КраткосрочныеКредиты);
	СоответствиеСчетов.Вставить("66.02", ПС.ПроцентыПоКраткосрочнымКредитам);
	СоответствиеСчетов.Вставить("66.03", ПС.КраткосрочныеЗаймы);
	СоответствиеСчетов.Вставить("66.04", ПС.ПроцентыПоКраткосрочнымЗаймам);
	СоответствиеСчетов.Вставить("66.21", ПС.КраткосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("66.22", ПС.ПроцентыПоКраткосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("66.23", ПС.КраткосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("66.24", ПС.ПроцентыПоКраткосрочнымЗаймамВал);

	СоответствиеСчетов.Вставить("67", ПС.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СоответствиеСчетов.Вставить("67.01", ПС.ДолгосрочныеКредиты);
	СоответствиеСчетов.Вставить("67.02", ПС.ПроцентыПоДолгосрочнымКредитам);
	СоответствиеСчетов.Вставить("67.03", ПС.ДолгосрочныеЗаймы);
	СоответствиеСчетов.Вставить("67.04", ПС.ПроцентыПоДолгосрочнымЗаймам);
	СоответствиеСчетов.Вставить("67.21", ПС.ДолгосрочныеКредитыВал);
	СоответствиеСчетов.Вставить("67.22", ПС.ПроцентыПоДолгосрочнымКредитамВал);
	СоответствиеСчетов.Вставить("67.23", ПС.ДолгосрочныеЗаймыВал);
	СоответствиеСчетов.Вставить("67.24", ПС.ПроцентыПоДолгосрочнымЗаймамВал);
	
	СоответствиеСчетов.Вставить("68", ПС.РасчетыПоНалогам);
	СоответствиеСчетов.Вставить("68.01", ПС.НДФЛ);
	СоответствиеСчетов.Вставить("68.02", ПС.НДС);
	СоответствиеСчетов.Вставить("68.03", ПС.Акцизы);
	СоответствиеСчетов.Вставить("68.04", ПС.НалогНаПрибыль);
	СоответствиеСчетов.Вставить("68.04.1", ПС.РасчетыСБюджетом);
	СоответствиеСчетов.Вставить("68.04.2", ПС.РасчетНалогаНаПрибыль);
	СоответствиеСчетов.Вставить("68.07", ПС.ТранспортныйНалог);
	СоответствиеСчетов.Вставить("68.08", ПС.НалогНаИмущество);
	СоответствиеСчетов.Вставить("68.09", ПС.НалогНаРекламу);
	СоответствиеСчетов.Вставить("68.10", ПС.ПрочиеНалогиИСборы);
	СоответствиеСчетов.Вставить("68.11", ПС.ЕНВД);
	СоответствиеСчетов.Вставить("68.12", ПС.ЕНприУСН);
	СоответствиеСчетов.Вставить("68.22", ПС.НДСпоЭкспортуКВозмещению);
	СоответствиеСчетов.Вставить("68.32", ПС.НДСНалоговогоАгента);
	
	СоответствиеСчетов.Вставить("69", ПС.РасчетыПоСоциальномуСтрахованию);
	СоответствиеСчетов.Вставить("69.01", ПС.ФСС);
	СоответствиеСчетов.Вставить("69.02", ПС.ПФР);
	СоответствиеСчетов.Вставить("69.02.1", ПС.ПФР_страх);
	СоответствиеСчетов.Вставить("69.02.2", ПС.ПФР_нак);
	СоответствиеСчетов.Вставить("69.02.3", ПС.ПФР_доп);
	СоответствиеСчетов.Вставить("69.02.4", ПС.ПФР_доп_шахтеры);
	СоответствиеСчетов.Вставить("69.03", ПС.ФОМС);
	СоответствиеСчетов.Вставить("69.03.1", ПС.ФФОМС);
	СоответствиеСчетов.Вставить("69.03.2", ПС.ТФОМС);
	СоответствиеСчетов.Вставить("69.04", ПС.ЕСН_ФБ);
	СоответствиеСчетов.Вставить("69.05", ПС.ПФР_ДОБР);
	СоответствиеСчетов.Вставить("69.05.1", ПС.ПФР_ДОБР_орг);
	СоответствиеСчетов.Вставить("69.05.2", ПС.ПФР_ДОБР_сотр);
	СоответствиеСчетов.Вставить("69.11", ПС.ФСС_НСиПЗ);
	СоответствиеСчетов.Вставить("69.12", ПС.ФСС_ДобровольныеВзносы);
	СоответствиеСчетов.Вставить("69.13", ПС.ФСС_СПЕЦ);
	
	СоответствиеСчетов.Вставить("70", ПС.РасчетыСПерсоналомПоОплатеТруда);
	СоответствиеСчетов.Вставить("71", ПС.РасчетыСПодотчетнымиЛицами_);
	СоответствиеСчетов.Вставить("71.01", ПС.РасчетыСПодотчетнымиЛицами);
	СоответствиеСчетов.Вставить("71.21", ПС.РасчетыСПодотчетнымиЛицамиВал);
	
	СоответствиеСчетов.Вставить("73", ПС.РасчетыСПерсоналомПоПрочимОперациям);
	СоответствиеСчетов.Вставить("73.01", ПС.РасчетыПоПредоставленнымЗаймам);
	СоответствиеСчетов.Вставить("73.02", ПС.РасчетыПоВозмещениюМатериальногоУщерба);
	СоответствиеСчетов.Вставить("73.03", ПС.РасчетыПоПрочимОперациям);
	
	СоответствиеСчетов.Вставить("75.01", ПС.РасчетыПоВкладамВУставныйКапитал);
	СоответствиеСчетов.Вставить("75.02", ПС.РасчетыПоВыплатеДоходов);
	
	СоответствиеСчетов.Вставить("76.01", ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);
	СоответствиеСчетов.Вставить("76.01.1", ПС.РасчетыПоИмущественномуИЛичномуСтрахованию);
	СоответствиеСчетов.Вставить("76.01.2", ПС.ПлатежиПоДобровольномуСтрахованиюРаботников);
	СоответствиеСчетов.Вставить("76.01.9", ПС.ПлатежиПоПрочимВидамСтрахования);
	
	СоответствиеСчетов.Вставить("76.02", ПС.РасчетыПоПретензиям);
	СоответствиеСчетов.Вставить("76.03", ПС.РасчетыПоПричитающимсяДивидендам);
	СоответствиеСчетов.Вставить("76.04", ПС.РасчетыПоДепонированнымСуммам);
	СоответствиеСчетов.Вставить("76.05", ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	СоответствиеСчетов.Вставить("76.06", ПС.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СоответствиеСчетов.Вставить("76.09", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	СоответствиеСчетов.Вставить("76.21", ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	СоответствиеСчетов.Вставить("76.22", ПС.РасчетыПоПретензиямВал);
	СоответствиеСчетов.Вставить("76.25", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	СоответствиеСчетов.Вставить("76.26", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СоответствиеСчетов.Вставить("76.29", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);
	СоответствиеСчетов.Вставить("76.32", ПС.РасчетыПоПретензиямУЕ);
	СоответствиеСчетов.Вставить("76.35", ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	СоответствиеСчетов.Вставить("76.36", ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СоответствиеСчетов.Вставить("76.39", ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	СоответствиеСчетов.Вставить("76.41", ПС.РасчетыПоИсполнительнымДокументамРаботников);
	СоответствиеСчетов.Вставить("76.ВА", ПС.НДСпоАвансамИПредоплатамВыданным);
	СоответствиеСчетов.Вставить("76.АВ", ПС.НДСпоАвансамИПредоплатам);
	СоответствиеСчетов.Вставить("76.Н", ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	СоответствиеСчетов.Вставить("76.НА", ПС.РасчетыНДСНалоговогоАгента);
	СоответствиеСчетов.Вставить("76.ОТ", ПС.НДСНачисленныйПоОтгрузке);

	СоответствиеСчетов.Вставить("77", ПС.ОтложенныеНалоговыеОбязательства);
	СоответствиеСчетов.Вставить("79", ПС.ВнутрихозяйственныеРасчеты);

	СоответствиеСчетов.Вставить("80", ПС.УставныйКапитал);
	СоответствиеСчетов.Вставить("81", ПС.СобственныеАкции);
	СоответствиеСчетов.Вставить("82", ПС.РезервныйКапитал);
	СоответствиеСчетов.Вставить("82.01", ПС.РезервыОбразованныеВСоответствииСЗаконодательством);
	СоответствиеСчетов.Вставить("82.02", ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами);
	
	СоответствиеСчетов.Вставить("83", ПС.ДобавочныйКапитал);

	СоответствиеСчетов.Вставить("83.01", ПС.ПриростСтоимостиПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.1", ПС.ПриростСтоимостиИмуществаПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.2", ПС.ПриростСтоимостиНМАПоПереоценке);
	СоответствиеСчетов.Вставить("83.01.3", ПС.ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке);

	СоответствиеСчетов.Вставить("84", ПС.НераспределеннаяПрибыль);
	СоответствиеСчетов.Вставить("84.01", ПС.ПрибыльПодлежащаяРаспределению);
	СоответствиеСчетов.Вставить("84.02", ПС.УбытокПодлежащийПокрытию);

	СоответствиеСчетов.Вставить("86", ПС.ЦелевоеФинансирование);

	СоответствиеСчетов.Вставить("90",    ПС.Продажи);
	СоответствиеСчетов.Вставить("90.01", ПС.Выручка);
	СоответствиеСчетов.Вставить("90.02", ПС.СебестоимостьПродаж);
	СоответствиеСчетов.Вставить("90.03", ПС.Продажи_НДС);
	СоответствиеСчетов.Вставить("90.04", ПС.Продажи_Акцизы);
	СоответствиеСчетов.Вставить("90.05", ПС.Продажи_ЭкспортныеПошлины);
	СоответствиеСчетов.Вставить("90.08", ПС.Продажи_УправленческиеРасходы);
	СоответствиеСчетов.Вставить("90.07", ПС.Продажи_РасходыНаПродажу);

	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажОблагаемаяЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыОблагаемыеЕНВД);
	Иначе
		СоответствиеСчетов.Вставить("90.01.1", ПС.ВыручкаНеЕНВД);
		СоответствиеСчетов.Вставить("90.01.2", ПС.ВыручкаЕНВД);
		СоответствиеСчетов.Вставить("90.02.1", ПС.СебестоимостьПродажНеЕНВД);
		СоответствиеСчетов.Вставить("90.02.2", ПС.СебестоимостьПродажЕНВД);
		СоответствиеСчетов.Вставить("90.07.1", ПС.Продажи_РасходыНаПродажуНеЕНВД);
		СоответствиеСчетов.Вставить("90.07.2", ПС.Продажи_РасходыНаПродажуЕНВД);
		СоответствиеСчетов.Вставить("90.08.1", ПС.Продажи_УправленческиеРасходыНеЕНВД);
		СоответствиеСчетов.Вставить("90.08.2", ПС.Продажи_УправленческиеРасходыЕНВД);
	КонецЕсли;

	СоответствиеСчетов.Вставить("91", ПС.ПрочиеДоходыИРасходы);
	СоответствиеСчетов.Вставить("91.01", ПС.ПрочиеДоходы);
	СоответствиеСчетов.Вставить("91.02", ПС.ПрочиеРасходы);

	СоответствиеСчетов.Вставить("99", ПС.ПрибылиИУбытки);
	СоответствиеСчетов.Вставить("99.01", ПС.ПрибылиИУбыткиБезНалогаНаПрибыль);

	СоответствиеСчетов.Вставить("99.02", ПС.ПрибылиИУбытки_НалогНаПрибыль);
	СоответствиеСчетов.Вставить("99.02.3", ПС.ПостоянноеНалоговоеОбязательство);
	СоответствиеСчетов.Вставить("99.02.4", ПС.ПрибылиИУбыткиОтПересчетаОНА_ОНО);

	Если ЭтоБалансДляУПП_КА Тогда
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиОблагаемыеЕНВД);
		СоответствиеСчетов.Вставить("99.09", ПС.ПустаяСсылка()); // отсуствует
	Иначе
		СоответствиеСчетов.Вставить("99.01.1", ПС.ПрибылиИУбыткиНеЕНВД);
		СоответствиеСчетов.Вставить("99.01.2", ПС.ПрибылиИУбыткиЕНВД);
		СоответствиеСчетов.Вставить("99.09", ПС.ПрочиеПрибылиИУбытки);
	КонецЕсли;

	СоответствиеСчетов.Вставить("94", ПС.НедостачиИПотериОтПорчиЦенностей);

	СоответствиеСчетов.Вставить("96", ПС.РезервыПредстоящихРасходов);

	СоответствиеСчетов.Вставить("97", ПС.РасходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98", ПС.ДоходыБудущихПериодов);
	СоответствиеСчетов.Вставить("98.01", ПС.ДоходыПолученныеВСчетБудущихПериодов);
	СоответствиеСчетов.Вставить("98.02", ПС.БезвозмездныеПоступления);
	СоответствиеСчетов.Вставить("98.03", ПС.ПредстоящиеПоступленияПоНедостачамВыявленнымЗаПрошлыеГоды);
	СоответствиеСчетов.Вставить("98.04", ПС.РазницаМеждуСуммойПодлежащейВзысканиюСВиновныхЛицИБалансовойСтоимостьюПоНедостачамЦенностей);

	Если ЭтоБалансДляАУ Тогда
		СоответствиеСчетов.Вставить("01.11", ПС.ОСвРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("08.14", ПС.ПриобретениеОСВРамкахЦелевогоФинансирования);
		СоответствиеСчетов.Вставить("76.51", ПС.РасчетыПоЦелевомуФинансированию);
		СоответствиеСчетов.Вставить("76.52", ПС.РасчетыПоЦелевомуФинансированиюВал);
	КонецЕсли;

	СоответствиеСчетов.Вставить("001", ПС.АрендованныеОсновныеСредства);
	СоответствиеСчетов.Вставить("008", ПС.ОбеспеченияОбязательствПолученные);
	СоответствиеСчетов.Вставить("009", ПС.ОбеспеченияОбязательствВыданные);
	СоответствиеСчетов.Вставить("011", ПС.ОсновныеСредстваСданныеВАренду);

КонецПроцедуры // ЗаполнитьСоответствиеСчетов()

&НаКлиенте
Функция Счет(КодСчета)
	
	НайденныйСчет = мСчет[КодСчета];
	
	Если НайденныйСчет = Неопределено Тогда
		Предупреждение("Ошибка. Не определен счет " + КодСчета + " в соответствии счетов");
	КонецЕсли;
	
	Возврат НайденныйСчет;
	
КонецФункции

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиБалансНажатие(Элемент)
	
	ПолеТабличногоДокумента = мБаланс;
	ИмяСтраницыРаздела = "Баланс";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	ПолеТабличногоДокумента = мФормаОтчета;
	ИмяСтраницыРаздела = "ФормаОтчета";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиОИКНажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаОИК;
	ИмяСтраницыРаздела = "ОИК";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиОДДСНажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаОДДС;
	ИмяСтраницыРаздела = "ОДДС";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения1Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения1;
	ИмяСтраницыРаздела = "Пояснения1";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения2Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения2;
	ИмяСтраницыРаздела = "Пояснения2";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения3Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения3;
	ИмяСтраницыРаздела = "Пояснения3";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения4Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения4;
	ИмяСтраницыРаздела = "Пояснения4";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения5Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	ИмяСтраницыРаздела = "Пояснения5";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения6Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения6;
	ИмяСтраницыРаздела = "Пояснения6";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения7Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения7;
	ИмяСтраницыРаздела = "Пояснения7";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения8Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения8;
	ИмяСтраницыРаздела = "Пояснения8";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДобавитьДопСтрокиПояснения9Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения9;
	ИмяСтраницыРаздела = "Пояснения9";
	
	ВставитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиБалансНажатие(Элемент)
	
	ПолеТабличногоДокумента = мБаланс;
	ИмяСтраницыРаздела = "Баланс";
	
	УдалитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	ПолеТабличногоДокумента = мФормаОтчета;
	ИмяСтраницыРаздела = "ФормаОтчета";
	
	УдалитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиОИКНажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаОИК;
	ИмяСтраницыРаздела = "ОИК";
	
	УдалитьДополнительнуюСтроку();
	Расчет();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиОДДСНажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаОДДС;
	ИмяСтраницыРаздела = "ОДДС";
	
	УдалитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения1Нажатие(Элемент)
	
	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения1;
	ИмяСтраницыРаздела = "Пояснения1";
	
	УдалитьДополнительнуюСтроку();
	
	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения2Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения2;
	ИмяСтраницыРаздела = "Пояснения2";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения3Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения3;
	ИмяСтраницыРаздела = "Пояснения3";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

	Расчет();

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения4Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения4;
	ИмяСтраницыРаздела = "Пояснения4";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения5Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения5;
	ИмяСтраницыРаздела = "Пояснения5";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения6Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения6;
	ИмяСтраницыРаздела = "Пояснения6";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения7Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения7;
	ИмяСтраницыРаздела = "Пояснения7";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения8Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения8;
	ИмяСтраницыРаздела = "Пояснения8";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУдалитьДопСтрокиПояснения9Нажатие(Элемент)

	ПолеТабличногоДокумента = ПолеТаблДокументаПояснения9;
	ИмяСтраницыРаздела = "Пояснения9";

	УдалитьДополнительнуюСтроку();

	ТекущийЭлемент = ПолеТабличногоДокумента;
	УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ПолеТабличногоДокумента, ИмяСтраницыРаздела);

КонецПроцедуры


// Функция определяет является ли показатель многострочным, и возвращает количество строк многострочной части
//
// Параметры
//  ИмяПоказателя  - Строка - Имя показателя
//
// Возвращаемое значение:
//   Число   - признак многострочности показателя
//			 0 - показатель не является многострочным
//			 >1 - показатель является многострочным, значение соответствует имеющемуся количеству строк
//
// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти = СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция АвторасчетПоказателей(ИмяСтраницы)
	
	Если мДеревоСтраницОтчета.Колонки.Найти("АвторасчетПоказателей") = Неопределено Тогда
		// в дереве настроек страниц отчета отсутствует необходимая колонка
		// значи авторасчет определяется какими-то иными механизмами
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаНастройки = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницы, "ИмяСтраницы");
	
	Если СтрокаНастройки <> Неопределено Тогда
		Возврат СтрокаНастройки.АвторасчетПоказателей;
	Иначе
		// предполагается что все странцы формы корректно прописаны в дереве значений мДеревоСтраницОтчета
		// если страница не описана, то автоматический расчет показателя производиться не должен
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // АвтоРасчетПоказателей()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	НайденнаяВетвьНастройки = ДеревоНастроекСтрокРасшифровки.Строки.Найти(ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
	
	Если НайденнаяВетвьНастройки = Неопределено Тогда
		// если настройка не обнаружена, считаем что допстрока должна входить в отчет
		Возврат Истина;
	Иначе
		Возврат НайденнаяВетвьНастройки.ВключатьВОтчет;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура КнопкаНастроитьДопСтрокиБалансНажатие(Элемент)
	// Передать данные настройки и исходный макет в форму настройки
	МакетНастроек = Объект.ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	ФормаНастроек = Объект.ПолучитьФорму("НастройкаРасшифровкиОтдельныхПоказателей");
	
	ФормаНастроек.ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.Баланс;
	ИмяМакетаДереваНастроек = СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей;
	ФормаНастроек.ДеревоНастроекПоУмолчанию = ИзвлечьИсходнуюСтруктуруНастроек(НастройкиФормы.МакетНастройкиСоставаПоказателей, ИмяМакетаДереваНастроек);
	
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей бухгалтерского баланса";
	РезультатНастройки = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
		СоставДополнительныхСтрок.СтруктураСоставов.Баланс = РезультатНастройки;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок();
	ПеренумероватьСтрокиРасшифровкиБаланса();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастроитьДопСтрокиФормаОтчетаНажатие(Элемент)
	
	// Передать данные настройки и исходный макет в форму настройки
	МакетНастроек = Объект.ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	ФормаНастроек = Объект.ПолучитьФорму("НастройкаРасшифровкиОтдельныхПоказателей");
	
	ФормаНастроек.ДеревоНастроек = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
	ИмяМакетаДереваНастроек = СтруктураОтчета.ОПУ.ИмяСекцииНастройкиСоставаПоказателей;
	ФормаНастроек.ДеревоНастроекПоУмолчанию = ИзвлечьИсходнуюСтруктуруНастроек(НастройкиФормы.МакетНастройкиСоставаПоказателей, ИмяМакетаДереваНастроек);
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей отчета о прибылях и убытках";
	РезультатНастройки = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
		СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета = РезультатНастройки;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок();
	ПеренумероватьСтрокиРасшифровкиОПУ();
	
	Расчет(мФормаОтчета);
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = Объект.ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей));
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ФормаОтчета", ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.ОПУ.ИмяСекцииНастройкиСоставаПоказателей));
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = Объект.ПолучитьМакет(МакетНастроек);
	КонецЕсли;
	
	ДеревоНастроек = Новый ДеревоЗначений;
	ДеревоНастроек.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), "Наименование");
	ДеревоНастроек.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"), "Код строки");
	ДеревоНастроек.Колонки.Добавить("ВключатьВОтчет", Новый ОписаниеТипов("Булево"), "Включать в отчет");
	ДеревоНастроек.Колонки.Добавить("Существенность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный)), "Уровень существ. в %");
	ДеревоНастроек.Колонки.Добавить("ИмяОбластиДопСтроки", Новый ОписаниеТипов("Строка"));
	ДеревоНастроек.Колонки.Добавить("ТипСостава", Новый ОписаниеТипов("Строка"));
	ДеревоНастроек.Колонки.Добавить("МаксимальноеКоличество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)), "Макс. кол-во строк");
	ДеревоНастроек.Колонки.Добавить("ЗначениеЭлемента");
	
	Если ПустаяСтрока(ИмяСекции) Тогда
		Возврат ДеревоНастроек;
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоНастроек;
	
КонецФункции // ИзвлечьИсходнуюСтруктуруНастроек()

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьВидимостьДополнительныхСтрок()
	
	Для Каждого НастройкаДопСтрок Из СоставДополнительныхСтрок.СтруктураСоставов Цикл
		ИмяОтчета = НастройкаДопСтрок.Ключ;
		ДеревоНастроек = НастройкаДопСтрок.Значение;
		
		ПолеОтчета = Элементы["ПолеТабличногоДокумента" + ИмяОтчета];
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ПолеОтчета.Области.Найти(СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		ДеревоНастройкиСостава = СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета;
		
		мФормаОтчета.Области.ВТомЧисле2110.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		мФормаОтчета.Области.ВТомЧисле2120.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		мФормаОтчета.Области.ВТомЧисле2210.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		мФормаОтчета.Области.ВТомЧисле2220.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		мФормаОтчета.Области.ВТомЧисле2100.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		мФормаОтчета.Области.ВТомЧисле2200.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		мФормаОтчета.Области.ВТомЧисле2300.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
		                                           ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДополнительныхСтрок()

&НаКлиенте
Процедура КоманднаяПанельФормыЗаполнитьОтчет(Команда)
	
	Ответ = Вопрос("Внимание! Перед заполнением будут очищены все показатели текущего отчета." + Символы.ПС
		  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ЗаполнитьАвто(Элементы.ТекущаяСтраница.Имя);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыОчиститьОтчет(Команда)
	
	ИмяТекущейСтраницы = Элементы.ТекущаяСтраница.Имя;
	
	Если ИмяТекущейСтраницы = "ДополнительныеФайлы" Тогда
		ТекстВопроса = "Внимание! Будут очищены сведения о дополнительных файлах." + Символы.ПС + "Продолжить операцию?";
	Иначе
		ТекстВопроса = "Внимание! Будут очищены все показатели текущего отчета." + Символы.ПС + "Продолжить операцию?";
	КонецЕсли;
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		Очистить(ИмяТекущейСтраницы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВидСдачиОтчетностиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораВидСдачиОтчетностиПриИзменении(Элемент)
	ВидСдачиОтчетности = Элемент.Значение;
	Модифицированность = Истина;
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ИспользуютсяМакетыЕНВД()
	
	Перем СохраненноеПрименениеЕНВД;
	
	// Инициализируем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе.
	Если ПрименениеЕНВД = Неопределено И мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
		Если СписокСохранения.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// Если признак не был сохранен, то определяем его на основании учетной политики организации.
	Если ПрименениеЕНВД = Неопределено Тогда
		ПрименениеЕНВД = (ОрганизацияПрименяетЕНВД(Объект.Организация, мДатаКонцаПериодаОтчета)
	                 ИЛИ ОрганизацияПрименяетЕНВД(Объект.Организация, ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12)));
	КонецЕсли;
	
	Возврат ПрименениеЕНВД;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОрганизацияПрименяетЕНВД(Организация, ДатаОпределения)
	
	Возврат НалоговыйУчет.ПрименениеЕНВД(Объект.Организация, ДатаОпределения);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применятся не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
	
	Если ЭтоБалансДляУПП_КА Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаОпределения, Объект.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ОрганизацияПрименяетПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
			ОрганизацияПерешлаНаУСН   = ПараметрыУчетнойПолитикиРегл.УСН;
		Иначе
			ОрганизацияПрименяетПБУ18 = Ложь;
			ОрганизацияПерешлаНаУСН   = Ложь;
		КонецЕсли;
		
	Иначе
		ПризнакОтказа = Ложь;
		УчетнаяПолитикаПоОрганизациии = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаОпределения, ПризнакОтказа, Объект.Организация, "Нал", Ложь);
		
		ОрганизацияПерешлаНаУСН = (НЕ ПризнакОтказа И УчетнаяПолитикаПоОрганизациии.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная"));
		ОрганизацияПрименяетПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Объект.Организация, ДатаОпределения);
		
	КонецЕсли;
	
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мГруппаОрганизаций, СписокОрганизаций);
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	Если СкрыватьСтрокиРасшифровкиПоПБУ18 Тогда
		мФормаОтчета.Области.ВТомЧисле2421.Видимость = Ложь;
		мФормаОтчета.Области.ДопСтрока2421.Видимость = Ложь;
		
		мФормаОтчета.Области.ВТомЧисле2430.Видимость = Ложь;
		мФормаОтчета.Области.ДопСтрока2430.Видимость = Ложь;
		
		мФормаОтчета.Области.ВТомЧисле2450.Видимость = Ложь;
		мФормаОтчета.Области.ДопСтрока2450.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура УстановитьДоступностьКнопокУправленияМногострочнойЧастью(ОбластьТабличногоДокумента, ИмяСтраницыПанелиОтчета)
	
	ИмяПоказателя = ПолучитьИмяПоказателяБезСчетчика(ОбластьТабличногоДокумента.ТекущаяОбласть.Имя);
	ИмяСтруктурыМногострочнойЧасти = СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КнопокиДоступны = Истина;
		ДостигнутоМаксимальноеКоличествоСтрок = (СтруктураМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок <> 0)
		                                      И (СтруктураМногострочнойЧасти.Состав.Количество() >= СтруктураМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок);
	Иначе
		КнопокиДоступны = Ложь;
		ДостигнутоМаксимальноеКоличествоСтрок = Ложь;
	КонецЕсли;
	
	КнопкаДобавить = Элементы.Найти("КнопкаДобавитьДопСтроки" + ИмяСтраницыПанелиОтчета);
	КнопкаУдалить = Элементы.Найти("КнопкаУдалитьДопСтроки" + ИмяСтраницыПанелиОтчета);
	
	Если ИмяСтраницыПанелиОтчета <> "ОИК" Тогда
		ДостигнутоМаксимальноеКоличествоСтрок = Ложь; // Сняты ограничения на максимальное количество допстрок
	КонецЕсли;
	
	Если КнопкаДобавить <> Неопределено И КнопкаУдалить <> Неопределено Тогда
		КнопкаДобавить.Доступность = (КнопокиДоступны И НЕ ДостигнутоМаксимальноеКоличествоСтрок);
		КнопкаУдалить.Доступность = КнопокиДоступны;
	КонецЕсли;
	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Функция ПолучитьИмяПоказателяБезСчетчика(ИмяПоказателя)

	ПозицияСчетчика = Найти(ИмяПоказателя, "_");
	Если ПозицияСчетчика > 0 Тогда
		ИмяПоказателяБезСчетчика = Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	Иначе
		ИмяПоказателяБезСчетчика = ИмяПоказателя;
	КонецЕсли;

	Возврат ИмяПоказателяБезСчетчика;
	
КонецФункции // ПолучитьИмяПоказателяБезСчетчика()

&НаКлиенте
Процедура ПолеВводаДоговорКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Клиент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
		Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",, Элемент);
		ОтборСписка = Форма.СправочникСписок.Отбор;
		ОтборСписка["Владелец"].Использование = ИСТИНА;
		ОтборСписка["Владелец"].ВидСравнения = ВидСравнения.Равно;
		ОтборСписка["Владелец"].Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "Ссылка");
		Форма.Открыть();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры

// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	//Узнать какие виды договоров должны быть доступны, пока все
	мСписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	мСписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	мСписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	мСписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	мСписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));	
		                                                                        
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКлиентПриИзменении(Элемент)
	
	КомментарийОбщий = Объект.Клиент;
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
КонецПроцедуры

// Версия формы.
мВерсияФормы = "16/02/2012";

// Флаги, управляющие поведением отчета в зависимости от конфигурации.
ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
ЭтоБалансДляАУ = (ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ");
ЭтоБалансДляУПП_КА = (ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА");

// Имена вспомогательных макетов и форм.
НастройкиФормы = Новый Структура;
НастройкиФормы.Вставить("МакетСоставаПоказателей",           "СоставПоказателей2011Кв4");
НастройкиФормы.Вставить("МакетНастройкиСоставаПоказателей",  "НастройкаСоставаПоказателей2011Кв4");
НастройкиФормы.Вставить("МакетСтруктурыМногострочныхЧастей", "СтруктураМногострочныхЧастей2011Кв4");
НастройкиФормы.Вставить("МакетФорматаВыгрузки502",           "СхемаВыгрузки502");

ИнициализироватьСтруктурыДанных();
ИнициализироватьЭлементыУправленияФормы();
