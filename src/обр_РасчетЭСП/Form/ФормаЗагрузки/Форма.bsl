//--------------------------------------------------------------------------------------------------------------
Функция ЧИСТВНДОХ(мПлатежи, мДаты, НачПредположение = 0.1, ЗнаковПослеЗапятой = 4, МаксИтераций = 100, ТаймАут = 10) Экспорт
    
	Если мПлатежи.Количество() <> мДаты.Количество() Тогда
		Сообщить("Размерности входных массивов НЕ совпадают!");
        Возврат 0;        
	КонецЕсли;
	
	Если мПлатежи[0] >= 0 Тогда
		Сообщить("Первый платеж должен быть отрицательным!");
        Возврат 0;        
	КонецЕсли;
	
	Если НачПредположение < 0 Тогда
		НачПредположение = 0.1;	
		Сообщить("Начальное предположение меньше нуля!" + Символы.ПС + "Меняю на 0.1 и продолжаю расчет...");
	КонецЕсли;
	
    Предположение = НачПредположение;
   	ТочностьАлгоритма = Pow(10, -ЗнаковПослеЗапятой);      
   
    ТекущаяИтерация = 0;  	
	ПродолжатьРасчет = Истина;  
    
    Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    Пока ПродолжатьРасчет Цикл              // И ТекущаяИтерация < МаксИтераций Цикл 
        ЗначениеIRR = РасчетIRR(мПлатежи, мДаты, Предположение); 
		
        НовоеПредположение = Предположение - ЗначениеIRR / РасчетОтклоненияIRR(мПлатежи, мДаты, Предположение);
		ТекущийУровеньТочности = МодульЧисла(НовоеПредположение - Предположение);
		Предположение = НовоеПредположение;
		
		Если Предположение > 2 Тогда
			Сообщить("Возможное расхождение алгоритма!" + Символы.ПС + 
					 "Текущее значение ставки " + Окр(Предположение, 4) + "." + Символы.ПС + 
					 "Сбрасываю на 0.1 и продолжаю расчет...");
			НачПредположение = 0.1;
			Предположение = НачПредположение;
		КонецЕсли;	
        
        ТекущаяИтерация = ТекущаяИтерация + 1; 
        
        Конец = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
        ВремяВыполнения = (Конец - Начало)/1000; 
        Если ВремяВыполнения >= ТаймАут Тогда
            Сообщить("Прервано по таймауту " + ТаймАут + "сек !!!");
            //Прервать;
        КонецЕсли;
        
		ПродолжатьРасчет = ?(ТекущийУровеньТочности > ТочностьАлгоритма И 
                             МодульЧисла(ЗначениеIRR) > ТочностьАлгоритма И 
                             ТекущаяИтерация < МаксИтераций И
                             ВремяВыполнения < ТаймАут, Истина, Ложь);
    КонецЦикла;
    
    Сообщить("Итераций: " + ТекущаяИтерация);
    Сообщить("--------------------------");
    Возврат Окр(Предположение, ЗнаковПослеЗапятой);
    //Возврат Предположение;
КонецФункции
//--------------------------------------------------------------------------------------------------------------
Функция РасчетIRR(Платежи, Даты, Предположение)
	Основание = Предположение + 1;	
	КоэффициентЗнака = 1;
	Если Основание < 0 Тогда
		Основание = -Основание;
		КоэффициентЗнака = -1;
	КонецЕсли;
	
	Результат = Платежи[0];       	 
	Для индекс = 1 По Платежи.Количество() - 1 Цикл
		Степень = (Даты[индекс] - Даты[0]) / 86400 / 365;		
        Результат = Результат + Платежи[индекс] / (КоэффициентЗнака * Pow(Основание, Степень));
	КонецЦикла;
	
    Возврат Результат;
КонецФункции
//--------------------------------------------------------------------------------------------------------------
Функция РасчетОтклоненияIRR(Платежи, Даты, Предположение)
	Основание = Предположение + 1;	
	КоэффициентЗнака = 1;
	Если Основание < 0 Тогда
		Основание = -Основание;
		КоэффициентЗнака = -1;
	КонецЕсли;

	
	Результат = 0;
    Для индекс = 1 По Платежи.Количество() - 1 Цикл
        ДнейДоля = (Даты[индекс] - Даты[0]) / 86400 / 365;
		Результат = Результат - ДнейДоля * Платежи[индекс] / (КоэффициентЗнака * Pow(Основание, ДнейДоля + 1));
	КонецЦикла;
	
    Возврат Результат;
КонецФункции
//--------------------------------------------------------------------------------------------------------------
Функция МодульЧисла(Число) 
	Возврат Макс(Число, -Число); 
КонецФункции
//--------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------
Функция РасчетР(мПлатежи, Предп, Прд)
    p = 0;
	Для Сч = 0 По мПлатежи.ВГраница() Цикл
		p = p + мПлатежи[Сч] / Pow(1 + Предп, Прд[Сч]);
    КонецЦикла;
    
    Возврат p;
КонецФункции            
//--------------------------------------------------------------------------------------------------------------
Функция ЧИСТВНДОХ_0(мПлатежи, мДаты, Предп=0.1, Точность=0.000001) Экспорт
	Попытка		
		Если мПлатежи.Количество() = мДаты.Количество() и мПлатежи[0] < 0 Тогда 
			Прд = Новый Массив;
    		Для Сч = 0 ПО мПлатежи.ВГраница() Цикл 
    			Прд.Добавить( ((мДаты[Сч] - мДаты[0])/86400)/365 );
            КонецЦикла;
        
            p = РасчетР(мПлатежи, Предп, Прд);
			Шаг = ?(p > 0, 1, -1) * (0.382*Предп);
            Пока МодульЧисла(Шаг) > Точность Цикл
				Предп = Предп + Шаг;
				p = РасчетР(мПлатежи, Предп, Прд);
                Шаг = ?(p*Шаг < 0, -Шаг*0.382, Шаг);
            КонецЦикла; 
            
			Возврат Предп;
		Иначе 
			Возврат 0;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при расчете эффективной ставки! Проверьте корректность заполнения данных о купонах ЦБ.");
		Возврат 0;	
	КонецПопытки	
КонецФункции
//--------------------------------------------------------------------------------------------------------------

Функция ЧИСТВНДОХ_1(мПлатежи, мДаты, Предп=0.1, Точность = 0.000001) Экспорт
    КолСч = 0;
    Попытка
        Прд = Новый Массив;
        Для Сч = 0 ПО мПлатежи.ВГраница() Цикл
            Прд.Добавить( ((мДаты[Сч] - мДаты[0])/60/60/24)/365 );
        КонецЦикла;

        Если мПлатежи.Количество() = мДаты.Количество() и мПлатежи[0] < 0 Тогда
            p = 0;
            Для Сч = 0 По мПлатежи.ВГраница() Цикл
                p = p + мПлатежи[Сч] / Pow(1 + Предп, Прд[Сч]);
            КонецЦикла;
            Если p > 0 Тогда
                Шаг = 0.382 * Предп;
            Иначе
                Шаг = -0.382 * Предп;
            КонецЕсли;
            Пока Шаг < -Точность или Шаг > Точность цикл
                Предп = Предп + Шаг;
                p = 0;
                Для Сч = 0 По мПлатежи.ВГраница() Цикл
                    p = p + мПлатежи[Сч] / Pow(1 + Предп, Прд[Сч]);
                КонецЦикла;
                Если p*Шаг < 0 тогда
                    Шаг = -Шаг * 0.382;
                КонецЕсли;
            КонецЦикла;
            Возврат Предп;
        Иначе
            Возврат 0;
        КонецЕсли;
    Исключение
        Сообщить("Ошибка при расчете эффективной ставки, проверьте корректность заполнения данных о купонах ЦБ.");
        Возврат 0;
    КонецПопытки

КонецФункции



&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл";
	
	Если ДиалогВыбора.Выбрать() Тогда
		Объект.ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры
//--------------------------------------------------------------------------------------------------------------
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ";")   Экспорт
	Если Разделитель = "" Тогда
		Разделитель = ";";
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
//--------------------------------------------------------------------------------------------------------------
&НаСервере
Процедура ПрочитатьФайлНаСервере(Парам)
    ДенежныйПоток = Новый Массив;
    ПотокДат = Новый Массив;      
		
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(Объект.ИмяФайла);  	
                   
	Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл		
		// получить строку файла с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(Строка) Тогда
			Прервать;
		КонецЕсли;	
		МассивКолонок = РазложитьСтрокуВМассивПодстрок(Строка, Объект.Разделитель);
        
        ДенежныйПоток.Добавить(Число(МассивКолонок[0]));
        ПотокДат.Добавить(Дата(МассивКолонок[1] + " 0:00:00"));		
	КонецЦикла; 
    
    
    ХранилищеСистемныхНастроек.Сохранить("ПутьКФайлуСДанными",, Объект.ИмяФайла);
    ХранилищеСистемныхНастроек.Сохранить("ЗнаковПослеЗапятой",, Объект.ЗнаковПослеЗапятой);
	ХранилищеСистемныхНастроек.Сохранить("МаксимальноеКоличествоИтераций",, Объект.МаксимальноеКоличествоИтераций);
	ХранилищеСистемныхНастроек.Сохранить("НачальноеПредположение",, Объект.НачальноеПредположение);
	ХранилищеСистемныхНастроек.Сохранить("РазделительВФайлеСДанными",, Объект.Разделитель);
    ХранилищеСистемныхНастроек.Сохранить("ТаймАут",, Объект.ТаймАут);
    

    Если Парам = 0 Тогда
        Предп = Объект.НачальноеПредположение; 
        Точн = Pow(10, -Объект.ЗнаковПослеЗапятой);
        ЭСПг = Строка(ЧИСТВНДОХ_0(ДенежныйПоток, ПотокДат, Предп, Точн));
    ИначеЕсли Парам = 1 Тогда
        ЭСП = Строка(ЧИСТВНДОХ( ДенежныйПоток, ПотокДат, 
                                Объект.НачальноеПредположение, Объект.ЗнаковПослеЗапятой, 
                                Объект.МаксимальноеКоличествоИтераций, Объект.ТаймАут));
    КонецЕсли;
КонецПроцедуры
//--------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	ПрочитатьФайлНаСервере(0);
КонецПроцедуры
//--------------------------------------------------------------------------------------------------------------
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Объект.ИмяФайла = ХранилищеСистемныхНастроек.Загрузить("ПутьКФайлуСДанными");
    Объект.ЗнаковПослеЗапятой = ХранилищеСистемныхНастроек.Загрузить("ЗнаковПослеЗапятой");
	Объект.МаксимальноеКоличествоИтераций = ХранилищеСистемныхНастроек.Загрузить("МаксимальноеКоличествоИтераций");
	Объект.НачальноеПредположение = ХранилищеСистемныхНастроек.Загрузить("НачальноеПредположение");
    Объект.Разделитель = ХранилищеСистемныхНастроек.Загрузить("РазделительВФайлеСДанными");
    Объект.ТаймАут = ХранилищеСистемныхНастроек.Загрузить("ТаймАут");
КонецПроцедуры


&НаКлиенте
Процедура Моёёё(Команда)
    ПрочитатьФайлНаСервере(1);
КонецПроцедуры

